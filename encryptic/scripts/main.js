webpackJsonp([0],Array(85).concat([
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/**
 * @module collections/modules/Module
 */



/**
 * Core collection module. The main purpose of this class is to
 * make it easier to fetch/save models or collections without writing
 * boilerplate code in every controller. It also allows to do these operations
 * with Radio requests.
 *
 * @class
 * @license MPL-2.0
 * @listens channel#findModel - find a model by its ID
 * @listens channel#find - fetch models from the database
 * @listens channel#saveModel - save a model
 * @listens channel#save - save a collection to the database
 * @listens channel#saveModelObject - create a model from
 * a key=>value object and save it
 * @listens channel#saveFromArray - create models from an array
 * of objects and save them
 * @listens channel#remove - remove a model from the database
 */
class Module {

    /**
     * Backbone collection.
     *
     * @returns {Object}
     */
    get Collection() {
        return null;
    }

    /**
     * Backbone model.
     *
     * @returns {Object}
     */
    get Model() {
        return this.Collection.prototype.model;
    }

    /**
     * ID attribute used in a collection model.
     *
     * @returns {String}
     */
    get idAttribute() {
        return this.Model.prototype.idAttribute;
    }

    /**
     * Radio channel. collections/${Name}
     *
     * @returns {Object}
     */
    get channel() {
        return this.Collection.prototype.channel;
    }

    /**
     * App configs.
     *
     * @prop {Object}
     */
    get configs() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Configs', 'findConfigs');
    }

    /**
     * A user's profile model.
     *
     * @prop {Object} Backbone model
     */
    get user() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Profiles', 'getUser');
    }

    constructor() {
        this.channel.reply({
            findModel: this.findModel,
            find: this.find,
            saveModel: this.saveModel,
            save: this.save,
            saveModelObject: this.saveModelObject,
            saveFromArray: this.saveFromArray,
            remove: this.remove
        }, this);
    }

    /**
     * Find a model by its ID.
     *
     * @param {Object} options = {}
     * @param {String} options.id - id of a model
     * @param {String} [options.profileId] - profile ID
     * @returns {Promise}
     */
    async findModel(options = {}) {
        // If id was not provided, return a model with default values
        if (!options[this.idAttribute]) {
            return new this.Model(null, options);
        }

        // The model exists in the collection
        const collModel = this.findCollectionModel(options);
        if (collModel) {
            return collModel;
        }

        // Instantiate a new model
        const model = new this.Model({
            [this.idAttribute]: options[this.idAttribute]
        }, options);

        // Fetch and decrypt the model
        await model.fetch();
        return this.decryptModel(model);
    }

    /**
     * Try to find the model in this.collection.
     *
     * @returns {Object|Boolean}
     */
    findCollectionModel(options) {
        if (!this.collection) {
            return false;
        }

        return this.collection.get(options[this.idAttribute]);
    }

    /**
     * Find all models.
     *
     * @param {Object} options = {}
     * @param {String} [options.conditions] - conditions by which models
     * will be filtered
     * @param {String} [options.profileId] - profile id
     * @returns {Promise}
     */
    async find(options = {}) {
        // eslint-disable-line complexity
        const collection = await this.fetch(__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.omit(options, 'conditions'));
        if (options.filter || options.conditions) {
            collection.filterList(options);
        }

        if (collection.paginate && options.perPage !== 0) {
            collection.paginate();
        }

        return collection;
    }

    /**
     * Fetch a collection and cache it in memory.
     * This method exists because decrypting a lot of models every time
     * a collection is fetched can be a very expensive operation.
     *
     * @param {Object} options
     * @returns {Promise} collection
     */
    async fetch(options) {
        // If the collection is already cached, return its clone
        if (this.isCollectionCached(options)) {
            return this.collection.clone();
        }

        this.collection = new this.Collection(null, options);

        // Fetch and decrypt the collection
        await this.collection.fetch(options);
        await this.decryptCollection(this.collection);
        return this.collection.clone();
    }

    /**
     * Check if the collection is not empty.
     *
     * @param {Object} options
     * @param {String} [options.profileId]
     * @returns {Boolean}
     */
    isCollectionCached(options) {
        return this.collection && this.collection.length !== 0 && (!options.profileId || this.collection.profileId === options.profileId);
    }

    /**
     * Save a model.
     *
     * @param {Object} options
     * @param {Object} options.model - Backbone model
     * @param {Object} [options.data] - data that should be updated
     * (uses model.attributes if it's not provided)
     * @param {Boolean} [options.dontValidate]
     * @fires channel#update:model - after saving a model
     * @returns {Promise} - resolves with a model
     */
    async saveModel(options) {
        //eslint-disable-line
        const { model } = options;
        const data = options.data || model.attributes;

        model.setEscape(data);
        this.setSharedBy(model);

        let errors = null;
        if (!options.dontValidate) {
            errors = model.validate(model.attributes);
        }

        // Trigger invalid event if there are any validation errors
        if (errors) {
            model.trigger('invalid', { errors });
            return Promise.reject(`Validation error: ${errors}`);
        }

        // Encrypt the model and save
        await this.encryptModel(model);
        await model.save(model.getData(), { validate: false });
        this.onSaveModel(model);
        this.channel.trigger('save:model', { model });
    }

    /**
     * Set sharedBy attribute to the user's name.
     *
     * @param {Object} model - Backbone model
     * @returns {Boolean}
     */
    setSharedBy(model) {
        if (!this.user || __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.isUndefined(model.defaults.sharedBy) || model.get('sharedBy')) {
            return false;
        }

        model.set('sharedBy', this.user.get('username'));
        return true;
    }

    /**
     * After saving a model, update/add it to this.collection.
     *
     * @param {Object} model
     */
    onSaveModel(model) {
        if (!this.collection) {
            return false;
        }

        const collModel = this.collection.get(model.id);

        if (collModel) {
            collModel.set(model.attributes);
        } else {
            this.collection.add(model);
        }
    }

    /**
     * Save all changes made in a collection.
     *
     * @param {Object} options = {}
     * @param {Object} options.collection - Backbone collection
     * @param {Object} [options.data] - with this every model in a collection
     * will be updated
     * @fires channel#save:collection - after saving a model
     * @returns {Promise}
     */
    save(options = {}) {
        const collection = options.collection || this.collection;
        const data = options.data || {};
        const promises = [];
        collection.each(model => promises.push(this.saveModel({ model, data })));

        return Promise.all(promises).then(() => this.channel.trigger('save:collection', { collection }));
    }

    /**
     * Create a model from a key=>value object and save it.
     *
     * @param {Object} options
     * @param {Object} options.data - an object with a model's values
     * @param {String} options.profileId - profile name
     * @param {Boolean} [options.dontValidate]
     * @fires collections/{Name}#save:object:{modelId}
     * @returns {Promise}
     */
    async saveModelObject(options) {
        const model = new this.Model(options.data, options);

        await this.decryptModel(model);
        await this.saveModel({ model, dontValidate: options.dontValidate });

        this.channel.trigger(`save:object:${model.id}`, { model });
        return model;
    }

    /**
     * Create models from an array of objects and save them.
     *
     * @param {Object} options
     * @param {Array} options.values - an array with key=>value objects
     * @param {String} options.profileId
     * @returns {Promise}
     */
    saveFromArray(options) {
        const promises = [];

        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(options.values, item => {
            const data = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend({ data: item }, options);
            promises.push(this.saveModelObject(data));
        });

        return Promise.all(promises);
    }

    /**
     * Remove a model from database. It doesn't actually remove a model.
     * Instead, it changes a model's attributes to the default ones.
     *
     * @param {Object} options
     * @param {Object} [options.model] - Backbone.model
     * @param {Object} [options.id] - ID of a model
     * @fires channel#destroy:model
     * @returns {Promise}
     */
    async remove(options) {
        const idAttr = this.idAttribute;
        const data = { [idAttr]: options[idAttr] || options.model[idAttr] };
        const model = new this.Model(data, options);

        data.trash = 2;
        await this.saveModel({ model, data });
        this.channel.trigger('destroy:model', { model });
    }

    /**
     * Check if a model can be encrypted and encryption is enabled.
     *
     * @param {Object} model = this.Model.prototype - Backbone model
     * @returns {Boolean}
     */
    isEncryptEnabled(model = this.Model.prototype) {
        // eslint-disable-line
        // The model doesn't have label names that should be encrypted
        if (__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.isUndefined(model.encryptKeys)) {
            return false;
        }

        const configs = __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Configs', 'findConfigs');

        if (!configs) {
            return false;
        }

        const backup = { encrypt: configs.encryptBackup.encrypt || 0 };

        // Encryption is enabled either in the current configs or backup
        return Number(configs.encrypt) === 1 || Number(backup.encrypt) === 1;
    }

    /**
     * Decrypt a model.
     *
     * @param {Object} model - Backbone model
     * @fires encrypt#decryptModel
     * @returns {Promise} resolves with a decrypted model
     */
    decryptModel(model) {
        // console.log('Encryption.js: decryptModel() start');
        if (!this.isEncryptEnabled(model)) {
            return Promise.resolve(model);
        }
        // console.log('Encryption.js: decryptModel() end');
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/Encryption', 'decryptModel', { model });
    }

    /**
     * Decrypt a collection.
     *
     * @param {Object} coll = this.collection - Backbone collection
     * @fires encrypt#decryptCollection
     * @returns {Promise} resolves with a decrypted collection
     */
    async decryptCollection(coll = this.collection) {
        if (!this.isEncryptEnabled()) {
            return coll;
        }

        const collection = coll.fullCollection || coll;
        await __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/Encryption', 'decryptCollection', { collection });
        return coll;
    }

    /**
     * Encrypt a model.
     *
     * @param {Object} model - Backbone model
     * @fires encrypt#encryptModel
     * @returns {Promise} resolves with an encrypted model
     */
    encryptModel(model) {
        if (!this.isEncryptEnabled(model)) {
            return Promise.resolve(model);
        }

        let username;

        // Encrypt "Edit" model with another user's public key
        if (model.storeName === 'edits') {
            username = model.get('username');
        }
        // console.log("Module.js: encryptModel(): model:" );
        // console.log(model);
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/Encryption', 'encryptModel', { model, username });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Module;


/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_Sync__ = __webpack_require__(296);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_backbone_radio__);
/**
 * @module models/BaseModel
 */





/**
 * Core model.
 *
 * @class
 * @extends Model Backbone model
 * @license MPL-2.0
 */

/*
 * When making an new model that extends this class, the following methods need to be implemented:
 *
 *   get validateAttributes():
 * It should contain an array of attribute names that should not be empty.
 *
 *   get escapeAttributes()
 * It should contain an array of attribute names that should be filtered from XSS.
 * 
 * 
*/

class BaseModel extends __WEBPACK_IMPORTED_MODULE_0_backbone__["Model"] {

    constructor(data, options = {}) {
        super(data, options);
        this.profileId = options.profileId;
    }

    /**
     * Override Backbone.sync.
     *
     * @returns {Function}
     */
    get sync() {
        return __WEBPACK_IMPORTED_MODULE_1__components_Sync__["a" /* default */].use();
    }

    /**
     * Profile ID.
     *
     * @returns {String}
     */
    get profileId() {
        return this._profileId;
    }

    /**
     * Change profile ID
     *
     * @param {String} name
     */
    set profileId(name) {
        this._profileId = name;
    }

    /**
     * Radio channel.  'collections/$(Storename)'.  First letter in 'Storename' is capitalized.
     *
     * @returns {Object}
     */
    get channel() {
        const name = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.capitalize(this.storeName);
        return __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.channel(`collections/${name}`);
    }

    /**
     * Validate a model.
     *
     * @param {Object} attrs
     * @returns {(Array|Undefined)} - array of errors if there are any
     */
    validate(attrs) {
        // It's not neccessary to validate when a model is about to be removed
        if (attrs.trash && Number(attrs.trash) === 2) {
            return;
        }
        const errors = [];
        // Validate attributes
        __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.each(this.validateAttributes, field => {
            const item = attrs[field];
            if (!item || typeof item === 'string' && !item.trim().length) {
                errors.push(field);
            }
        });

        if (errors.length > 0) {
            return errors;
        }
    }

    /**
     * Set new attributes filtering them from XSS.
     *
     * @param {Object} attrs
     * @returns {Object} this
     */
    setEscape(attrs) {
        const data = this.getData(attrs);

        // Filter from XSS
        __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.each(this.escapeAttributes, attr => {
            if (data[attr]) {
                data[attr] = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.cleanXSS(data[attr], true);
            }
        });

        // Set new attributes
        this.set(data);
        this.setDate();

        return this;
    }

    /**
     * Return attributes that exist in defaults property.
     *
     * @param {Object} attrs=this.attributes
     * @returns {Object}
     */
    getData(attrs = this.attributes) {
        const data = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.pick(attrs, __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.keys(this.defaults));

        if (!attrs.encryptedData || !attrs.encryptedData.length) {
            return data;
        }

        return __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.omit(data, this.encryptKeys);
    }

    /**
     * Set the time when a model was updated/created.
     */
    setDate() {
        // Do nothing if the model doesn't have date fields
        if (__WEBPACK_IMPORTED_MODULE_2_underscore___default.a.isUndefined(this.defaults.created)) {
            return;
        }

        this.set('updated', Date.now());
        this.set('created', this.get('created') || Date.now());
    }

    /**
     * Check if the model is shared with a user.
     *
     * @param {String} username
     * @returns {Boolean}
     */
    isSharedWith(username) {
        return __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.indexOf(this.get('sharedWith'), username) !== -1 || this.get('sharedBy') === username;
    }

    /**
     * Share the document with a user.
     *
     * @param {String} username
     */
    toggleShare(username) {
        let sharedWith = this.get('sharedWith') || [];

        if (this.isSharedWith(username)) {
            sharedWith = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.without(sharedWith, username);
        } else {
            sharedWith.push(username);
            this.set({ sharedWith: [] });
        }

        this.set({ sharedWith });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = BaseModel;


/***/ }),
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/**
 * @module components/settings/show/Behavior
 */


/**
 * Behavior for settings tab views.
 *
 * @class
 * @extends Marionette.Behavior
 * @license MPL-2.0
 */
class Behavior extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Behavior {

    /**
     * Events.
     *
     * @returns {Object}
     */
    events() {
        return {
            'input input, select, textarea': 'triggerChange',
            'change input, select, textarea': 'triggerChange',
            'change .show-onselect': 'showOnSelect',
            'click .showField': 'showOnCheck'
        };
    }

    /**
     * Trigger change:value event.
     *
     * @param {Object} e
     */
    triggerChange(e) {
        const $el = this.view.$(e.currentTarget);
        const config = { name: $el.attr('name') };

        if (!config.name) {
            return;
        }

        if ($el.attr('type') !== 'checkbox') {
            config.value = $el.val().trim();
        } else {
            config.value = $el.is(':checked') ? 1 : 0;
        }

        this.view.trigger('change:value', config);
    }

    /**
     * Show additional parameters if an option is selected.
     *
     * @param {Object} e
     */
    showOnSelect(e) {
        const $el = this.view.$(e.currentTarget);
        const $option = $el.find(`option[value=${$el.attr('data-option')}]`);
        const isSelected = $option.is(':selected');

        this.view.$($option.attr('data-show')).toggleClass('hidden', !isSelected);
    }

    /**
     * Show fieldsets with additional parameters after a checkbox is checked.
     *
     * @param {Object} e
     */
    showOnCheck(e) {
        const $el = this.view.$(e.currentTarget);
        const $field = this.view.$($el.attr('data-field'));
        const isChecked = $el.is(':checked');
        $field.toggleClass('hidden', !isChecked);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Behavior;


/***/ }),
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Sync__ = __webpack_require__(296);
/**
 * @module collections/BaseCollection
 */

// import Radio from 'backbone.radio';



/**
 * Core collection.
 *
 * @class
 * @extends Backbone.Collection
 * @license MPL-2.0
 */
class BaseCollection extends __WEBPACK_IMPORTED_MODULE_0_backbone___default.a.Collection {

    /**
     * Override Backbone.sync.
     *
     * @returns {Function}
     */
    get sync() {
        return __WEBPACK_IMPORTED_MODULE_2__components_Sync__["a" /* default */].use();
    }

    /**
     * Profile ID.
     *
     * @returns {String}
     */
    get profileId() {
        return this._profileId;
    }

    /**
     * Change profile ID
     *
     * @param {String} name
     */
    set profileId(name) {
        this.model.prototype._profileId = name;
        this._profileId = name;
    }

    /**
     * Store name. Get it from a model associated with the collection.
     *
     * @returns {String}
     */
    get storeName() {
        return this.model.prototype.storeName;
    }

    /**
     * Radio channel.
     *
     * @returns {Object}
     */
    get channel() {
        return this.model.prototype.channel;
    }

    /**
     * @param {Array} models
     * @param {Object} options = {}
     * @param {String} (options.sortField) - field by which notebooks will be sorted
     * @param {String} (options.sortDirection) - (asc|desc)
     * @param {String} (options.profileId) - profile ID
     */
    constructor(models, options = {}) {
        super(models, options);

        this.options = options;
        this.profileId = options.profileId;
    }

    /**
     * Filter models. If a filter cannot be described with
     * simple code in `this.conditions`, then a new method
     * should be created. The method should follow the naming convention
     * `nameFilter`. For example, taskFilter, tagFilter...
     *
     * @param {Object} options = {}
     * @param {Object} [options.conditions]
     * @param {String} [options.filter]
     * @returns {Object} this
     */
    filterList(options = {}) {
        const cond = this.getCondition(options);

        if (cond) {
            this.reset(this.where(cond));
        } else if (this[`${options.filter}Filter`]) {
            const models = this[`${options.filter}Filter`](options.query);
            this.reset(models);
        }

        return this;
    }

    destroyUser(opt) {
        console.log('destroyUser(): calling destroyDb()');
        this.sync('destroyDb', opt, {});
    }

    /**
     * Return filter conditions.
     *
     * @param {Object} options
     * @returns {Object}
     */
    getCondition(options) {
        const cond = options.conditions || this.conditions[options.filter];
        this.conditionFilter = options.filter;
        this.currentCondition = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.isFunction(cond) ? cond(options) : cond;
        return this.currentCondition;
    }

    /**
     * Find a model by ID or create a new one.
     *
     * @param {String} id
     * @param {Object} data={}
     * @returns {Object}
     */
    findOrCreate(id, data = {}) {
        const model = this.get(id) || new this.model(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({ id }, data));
        this.add(model);
        return model;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = BaseCollection;


/***/ }),
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module behavior/ModalForm
 */



/**
 * Modal form behavior.
 * 
 * Example usage in: 
 *   components/fileDialog/View.js
 *   components/linkDialog/views/View.js
 *   components/notebooks/form/notebook/View.js
 *   components/notebooks/form/tag/View.js
 * 
 *
 * @class
 * @extends Marionette.Behavior
 * @license MPL-2.0
 */
class ModalForm extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Behavior {

    get uiFocus() {
        return this.view.uiFocus || 'name';
    }

    triggers() {
        return {
            'submit form': 'save',
            'click .ok': 'save',
            'click .cancelBtn': 'cancel'
        };
    }

    modelEvents() {
        return {
            invalid: 'showErrors'
        };
    }

    constructor(...args) {
        super(...args);

        this.events = {
            [`keyup @ui.${this.uiFocus}`]: 'closeOnEsc'
        };
    }

    /**
     * Focus on an ui element.
     */
    onShownModal() {
        this.view.ui[this.uiFocus].focus();
    }

    /**
     * Trigger "cancel" event if user hits Escape.
     */
    closeOnEsc(e) {
        if (e.which === 27) {
            this.view.trigger('cancel');
        }
    }

    /**
     * Indicate that validation errors occured by highlighting
     * form elements with red color.
     *
     * @param {Object} data
     * @param {Object} data.errors
     */
    showErrors(data) {
        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(data.errors, err => {
            this.view.ui[err].parent().addClass('has-error');
        });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = ModalForm;


/***/ }),
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseCollection__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module collections/Pageable
 */



/**
 * Add pagination support to Backbone collections.
 *
 * @class
 * @extends module:collections/Collection
 * @license MPL-2.0
 */
class Pageable extends __WEBPACK_IMPORTED_MODULE_0__BaseCollection__["a" /* default */] {

    /**
     * Sort collection models by multiple fields.
     *
     * @returns {Object}
     */
    get comparators() {
        return this._comparators || {
            isFavorite: 'desc',
            created: 'desc'
        };
    }

    /**
     * Comparator setter.
     *
     * @param {Object} options
     */
    set comparators(options) {
        this._comparators = options;
    }

    constructor(...args) {
        super(...args);

        /**
         * Pagination settings.
         *
         * @prop {Number} perPage - the number of items shown per a page
         * @prop {Number} first - the first page number (defaults to 0)
         * @prop {Number} current - the current page number
         * @prop {Number} total - total amount of pages in a collection
         * @returns {Object}
         */
        this.pagination = {
            perPage: 4,
            first: 0,
            current: Number(this.options.page || 0),
            total: 0
        };

        // Use "perPage" config from the options
        if (!__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.isUndefined(this.options.perPage)) {
            this.pagination.perPage = Number(this.options.perPage);
        }
    }

    /**
     * Paginate the collection.
     *
     * @returns {Object} this
     */
    paginate() {
        // Don't paginate
        if (!this.pagination.perPage) {
            return this;
        }

        if (!this.fullCollection) {
            this.fullCollection = this.clone();
        }

        // Sort the collection
        this.fullCollection.sortByComparators();

        // Paginate
        this.updateTotalPages();
        this.reset(this.getPage(this.pagination.current));

        return this;
    }

    /**
     * Start listening to events.
     *
     * @returns {Object} this
     */
    startListening() {
        // Sort the collection again if a comparator field has changed
        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(this.comparators, (sort, field) => {
            this.listenTo(this, `change:${field}`, this.sortByComparators, this);
        });

        // Sort again on reset event
        this.listenTo(this, 'reset', this.sortByComparators, this);

        // Listen to Radio channel events
        this.listenTo(this.channel, 'save:model', this.onUpdateModel, this);
        this.listenTo(this.channel, 'destroy:model', this.onDestroyModel, this);
        this.listenTo(this.channel, 'restore:model', this.onRestoreModel, this);

        return this;
    }

    /**
     * Stop listening to events and empty the full collection.
     *
     * @returns {Object} this
     */
    removeEvents() {
        if (this.fullCollection) {
            this.fullCollection.reset([]);
        }

        // Stop listening to events
        this.stopListening();

        return this;
    }

    /**
     * After a model was updated/added, re-sort the collection.
     *
     * @param {Object} data
     * @param {Object} data.model - Backbone model
     */
    onUpdateModel(data) {
        const { model } = data;

        // Don't add models from other profiles
        if (this.profileId !== model.profileId) {
            return;
        }

        /* Remove a model from the collection if it doesn't meet
         * the current filter condition.
         */
        if (!model.matches(this.currentCondition || { trash: 0 })) {
            return this.onDestroyModel({ model });
        }

        return this.updateCollectionModel({ model });
    }

    /**
     * Update a model in the collection or add it if it doesn't exist.
     *
     * @param {Object} data
     * @param {Object} data.model - Backbone model.
     */
    updateCollectionModel(data) {
        const model = data.model;
        const collection = this.fullCollection || this;
        const collectionModel = collection.get(model.id);

        // If the model already exists in the collection, just update its attributes
        if (collectionModel) {
            return collectionModel.set(model.attributes);
        }

        // Add the model to the beginning
        collection.add(model, { at: 0 });

        // Re-sort and create pagination again
        this.paginate();
    }

    /**
     * Remove a model from the collection after it is destroyed.
     *
     * @param {Object} data
     * @param {Object} data.model - Backbone model.
     */
    onDestroyModel(data) {
        const collection = this.fullCollection || this;
        const model = collection.get(data.model.id);

        // Do nothing if the model doesn't exist in the collection
        if (!model) {
            return false;
        }

        // Remove the model from the collection and re-sort
        collection.remove(model);
        this.paginate();

        // Navigate to the previous model
        this.navigateOnRemove(model);
    }

    /**
     * Navigate to the previous model.
     *
     * @param {Object} model - Backbone model
     * @fires Radio#model:navigate
     * @fires Radio#page:previous
     */
    navigateOnRemove(model) {
        let index = this.indexOf(model);

        // Model at the index doesn't exist
        if (!this.at(index)) {
            index--;
        }

        if (this.at(index)) {
            this.channel.trigger('model:navigate', { model: this.at(index) });
        }
        // Navigate to the previous page if a model at `index` doesn't exist
        else if (this.hasPreviousPage()) {
                this.channel.trigger('page:previous');
            }
    }

    /**
     * A model was restored from trash.
     *
     * @param {Object} data
     * @param {Object} data.model - Backbone model
     */
    onRestoreModel(data) {
        if (this.conditionFilter !== 'trashed') {
            this.onUpdateModel(data);
        }
        /* If the filter condition is equal to trashed,
         * remove the model from the collection.
         */
        else if (this.length > 1) {
                this.onDestroyModel(data);
            }
    }

    /**
     * Sort models by multiple fields.
     *
     * @returns {Array} sorted models
     */
    sortByComparators() {
        const comp = this.comparator;

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(this.comparators, (sort, field) => {
            this.comparator = model => {
                return sort === 'desc' ? -model.get(field) : model.get(field);
            };
            this.sort();
        });

        this.comparator = comp;
        return this.models;
    }

    /**
     * Update the number of available pages.
     *
     * @returns {Number} number of total pages
     */
    updateTotalPages() {
        return this.pagination.total = Math.ceil(this.fullCollection.length / this.pagination.perPage) - 1;
    }

    /**
     * Return true if there are models on the next page.
     *
     * @returns {Boolean}
     */
    hasNextPage() {
        return !!this.pagination.total && this.pagination.current !== this.pagination.total;
    }

    /**
     * Return true if there are models on the previous page.
     *
     * @returns {Boolean}
     */
    hasPreviousPage() {
        return this.pagination.current !== this.pagination.first;
    }

    /**
     * Get models for the next page.
     */
    getNextPage() {
        this.reset(this.getPage(this.pagination.current + 1));
    }

    /**
     * Get models for the previous page.
     */
    getPreviousPage() {
        this.reset(this.getPage(this.pagination.current - 1));
    }

    /**
     * Get models for a page number.
     *
     * @param {Number} page
     * @returns {Array} models
     */
    getPage(page) {
        // Calculate offset
        const offset = this.getOffset(page);
        const end = offset + this.pagination.perPage;

        // Save the current page number
        this.pagination.current = page;

        // Slice the models
        return this.fullCollection.models.slice(offset, end);
    }

    /**
     * Calculate the offset number of a page.
     *
     * @param {Number} page - page number
     * @returns {Number}
     */
    getOffset(page) {
        const offsetPage = this.pagination.first === 0 ? page : page - 1;
        return offsetPage * this.pagination.perPage;
    }

    /**
     * Navigate to the next model.
     *
     * @param {String} id - ID of a model
     * @fires Radio#model:navigate
     * @fires Radio#page:next if there are no models on the page
     */
    navigateNextModel(id) {
        const model = this.get(id);
        const index = model ? this.indexOf(model) + 1 : 0;

        if (index <= this.models.length - 1) {
            this.channel.trigger('model:navigate', { model: this.at(index) });
        }
        // If it is the last model on the page, navigate to the next page
        else if (this.hasNextPage()) {
                this.channel.trigger('page:next');
            } else {
                this.channel.trigger('page:end');
            }
    }

    /**
     * Navigate to the previous model.
     *
     * @param {String} id - ID of a model
     * @fires Radio#model:navigate
     * @fires Radio#page:previous if there are no models on the page
     */
    navigatePreviousModel(id) {
        const model = this.get(id);
        const index = model ? this.indexOf(model) - 1 : this.models.length - 1;

        if (index >= 0) {
            this.channel.trigger('model:navigate', { model: this.at(index) });
        }
        // If it is the first model on the page, navigate to the previous page
        else if (this.hasPreviousPage()) {
                this.channel.trigger('page:previous');
            } else {
                this.channel.trigger('page:start');
            }
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Pageable;


/***/ }),
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_mousetrap__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_mousetrap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_mousetrap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/**
 * @module behaviors/Navigate
 */






const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:behaviors/Navigate');

/**
 * Handle navigation between models. The behavior handles the following:
 * - Making elements active;
 * - Navigating between models with keybindings (j-k);
 * - Updating the scroll position;
 *
 * @class
 * @extends Marionette.Behavior
 * @license MPL-2.0
 */
class Navigate extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Behavior {

    initialize() {
        this.collection = this.view.options.collection;
        this.configs = this.view.options.configs;
        this.$scroll = __WEBPACK_IMPORTED_MODULE_2_jquery___default()('#sidebar .-scroll');

        // Listen to keybinding events
        if (this.view.useNavigateKeybindings) {
            this.bindKeys();
        }

        this.onModelNavigate = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.debounce(this.onModelNavigate, 10);

        // Listen to model:navigate event
        this.listenTo(this.collection.channel, 'model:navigate', __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.debounce((...args) => {
            this.onModelNavigate(...args);
        }, 10));

        if (this.view.channel) {
            this.listenTo(this.view.channel, 'model:active', this.onModelNavigate);
        }

        // Child view events
        this.listenTo(this.view, 'childview:scroll:top', this.onScrollTop);
        this.listenTo(this.view, 'navigate:next', this.navigateNextModel);
        this.listenTo(this.view, 'navigate:previous', this.navigatePreviousModel);
    }

    /**
     * Start listening to keybinding events.
     */
    bindKeys() {
        log('listen to keybindings');
        __WEBPACK_IMPORTED_MODULE_3_mousetrap___default.a.bind(this.configs.navigateBottom, () => this.navigateNextModel());
        __WEBPACK_IMPORTED_MODULE_3_mousetrap___default.a.bind(this.configs.navigateTop, () => this.navigatePreviousModel());
    }

    /**
     * Stop listening to keybinding events.
     */
    onDestroy() {
        if (this.view.useNavigateKeybindings) {
            __WEBPACK_IMPORTED_MODULE_3_mousetrap___default.a.unbind([this.configs.navigateBottom, this.configs.navigateTop]);
        }
    }

    /**
     * Change the scroll position.
     *
     * @param {Object} options
     * @param {Object} options.offset
     */
    onScrollTop(options) {
        this.$scroll.scrollTop(options.offset.top - this.$scroll.offset().top + this.$scroll.scrollTop() - 100);
    }

    /**
     * Open the next model.
     */
    navigateNextModel() {
        log('navigate to the next model');
        this.collection.navigateNextModel(this.view.options.filterArgs.id);
    }

    /**
     * Open the previous model.
     */
    navigatePreviousModel() {
        log('navigate to the previous model');
        this.collection.navigatePreviousModel(this.view.options.filterArgs.id);
    }

    /**
     * Make the provided model active.
     *
     * @param {Object} data
     * @param {Object} data.model
     */
    onModelNavigate(data) {
        const model = this.collection.get(data.model.id);
        this.view.options.filterArgs.id = model.id;
        model.trigger('focus');
    }

    ui() {
        return {
            listGroup: '.list-group-item:first'
        };
    }

    modelEvents() {
        return {
            focus: 'onFocus'
        };
    }

    /**
     * The model is active (under focus).
     */
    onFocus() {
        __WEBPACK_IMPORTED_MODULE_2_jquery___default()('.list-group-item.active').removeClass('active');
        this.ui.listGroup.addClass('active');
        this.view.trigger('scroll:top', { offset: this.ui.listGroup.offset() });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Navigate;


/***/ }),
/* 237 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hammerjs__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hammerjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_hammerjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_backbone_radio__);
/**
 * @module behaviors/Sidebar
 */





/**
 * Sidebar region behavior.
 *
 * @class
 * @extends Marionette.Behavior
 * @license MPL-2.0
 */
class Sidebar extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Behavior {

    /**
     * Stop listening to touch events.
     */
    onDestroy() {
        if (this.hammer) {
            this.hammer.destroy();
        }
    }

    /**
     * Start listening to touch events.
     */
    onRender() {
        this.hammer = new __WEBPACK_IMPORTED_MODULE_2_hammerjs___default.a(__WEBPACK_IMPORTED_MODULE_1_jquery___default()('#sidebar--content')[0]);

        this.hammer.on('swiperight', () => this.onSwipeRight());
        this.hammer.on('swipeleft', () => this.onSwipeLeft());
    }

    /**
     * Show sidebar menu on swiperight.
     */
    onSwipeRight() {
        __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.trigger('components/navbar', 'show:sidemenu');
    }

    /**
     * Switch to content region (hide sidebar) on swipeleft.
     */
    onSwipeLeft() {
        // Notebooks component does not use content region
        if (!this.view.noSwipeLeft) {
            __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.request('Layout', 'toggleContent', { visible: true });
        }
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Sidebar;


/***/ }),
/* 238 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hammerjs__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hammerjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_hammerjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_backbone_radio__);
/**
 * @module behaviors/Content
 */





/**
 * Content region behavior.
 * It allows to show only one region on small screens (either content or sidebar)
 * This provides rendering behaviors in the main window.  See usage in:
 * 
 * components/notes/form/views/Form.js
 * components/notes/show/View.js
 * components/settings/show/View.js
 * 
 *
 * @class
 * @extends Marionette.Behavior
 * @license MPL-2.0
 */
class Content extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Behavior {

    events() {
        return {
            'click #show--sidebar': 'showSidebar'
        };
    }

    /**
     * If a content view is destroyed, show the sidebar.
     */
    onDestroy() {
        if (this.$active) {
            this.$active.off('click');
        }

        if (this.hammer) {
            this.hammer.destroy();
        }

        this.showSidebar();
    }

    /**
     * Show content region.
     */
    onRender() {
        this.showContent();
        this.listenToHammer();
        this.listenActive();
    }

    /**
     * Listen to touch events.
     */
    listenToHammer() {
        this.hammer = new __WEBPACK_IMPORTED_MODULE_2_hammerjs___default.a(this.view.$el[0]);
        this.hammer.on('swiperight', () => this.showSidebar());
    }

    /**
     * Show content again if a user clicks on an already active element.
     */
    listenActive() {
        if (!this.$active || !this.$active.length) {
            this.$active = __WEBPACK_IMPORTED_MODULE_1_jquery___default()('.list--item.active, .list--settings.active');
            this.$active.on('click', () => this.showContent());
        }
    }

    /**
     * Hide content and show the sidebar.
     */
    showSidebar() {
        __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.request('Layout', 'toggleContent', { visible: false });
    }

    /**
     * Hide sidebar and show content.
     */
    showContent() {
        __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.request('Layout', 'toggleContent', { visible: true });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Content;


/***/ }),
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */
/***/ (function(module, exports) {

module.exports = {"ar":{"name":"Arabic","nativeName":"العربية"},"it":{"name":"Italian","nativeName":"Italiano"},"bs_ba":{"name":"Bosnian","nativeName":"Bosnian"},"cs":{"name":"Czech","nativeName":"Čeština"},"da":{"name":"Danish","nativeName":"Dansk"},"de":{"name":"German","nativeName":"Deutsch"},"de_ch":{"name":"Swiss german","nativeName":"Schwiizerdütsch"},"el":{"name":"Greek","nativeName":"Ελληνικά"},"en":{"name":"English","nativeName":"English"},"eo":{"name":"Esperanto","nativeName":"Esperanto"},"es":{"name":"Spanish","nativeName":"Español"},"fr":{"name":"French","nativeName":"Français"},"gl":{"name":"Galician","nativeName":"Galego"},"hi_in":{"name":"Hindi","nativeName":"Hindi"},"ja":{"name":"Japanese","nativeName":"日本語"},"ko":{"name":"Korean","nativeName":"한국어"},"mr_in":{"name":"Marathi","nativeName":"Marathi"},"nb":{"name":"Norwegian Bokmål","nativeName":"Norsk bokmål"},"nl":{"name":"Dutch","nativeName":"Nederlands"},"nn":{"name":"Norwegian Nynorsk","nativeName":"Norsk nynorsk"},"oc":{"name":"Occitan","nativeName":"Occitan"},"lt":{"name":"Lithuanian","nativeName":"Lietuvių"},"lv":{"name":"Latvian","nativeName":"Latviešu"},"pl":{"name":"Polish","nativeName":"Polski"},"pt_br":{"name":"Portugisich (Brasilien)","nativeName":"Portugisich (Brasilien)"},"ru":{"name":"Russian","nativeName":"Русский"},"se":{"name":"Swedish","nativeName":"Svenska"},"sq":{"name":"Albanian","nativeName":"Shqip"},"tr":{"name":"Turkish","nativeName":"Türkçe"},"zh_cn":{"name":"Simplified Chinese","nativeName":"Simplified Chinese"},"zh_tw":{"name":"Traditional Chinese (Taiwan)","nativeName":"Traditional Chinese (Taiwan)"}}

/***/ }),
/* 296 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Db__ = __webpack_require__(699);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/**
 * @module components/Sync
 */




/**
 * Override Backbone sync.
 *
 * @class
 * @constructor
 * @license MPL-2.0
 * @example
 * class MyModel extend Backbone.Model {
 *     get sync() {
 *         return Sync.use();
 *     }
 * }
 */
class Sync {

    /**
     * Database instance.
     *
     * @prop {Object}
     */
    get db() {
        return new __WEBPACK_IMPORTED_MODULE_1__Db__["a" /* default */]();
    }

    /**
     * Profile ID
     *
     * @prop {String}
     */
    get profileId() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'getProfile');
    }

    /**
     * Instantiate the class and return sync method
     *
     * @static
     * @returns {Function}
     */
    static use() {
        const sync = new Sync();
        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.bind(sync.sync, sync);
    }

    /**
     * Override Backbone.sync with this.
     *
     * @param {String} method - read, create, update
     * @param {Object} model - Backbone model/collection
     * @param {String} [model.id] - ID of a model
     * @param {String} model.profileId - the name of a profile
     * @param {String} model.storeName - it can be notes, notebooks, tags, etc
     * @param {Object} options
     * @param {Object} [options.conditions] - conditions by which collection
     * should be filtered
     * @returns {Promise}
     */
    sync(method, model, options = {}) {
        const opt = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend({}, __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.pick(options, 'conditions'), {
            profileId: model.profileId || this.profileId,
            storeName: model.storeName
        });

        if (model.idAttribute) {
            opt.idAttribute = model.idAttribute, opt.id = model.get(model.idAttribute);
        }

        return this[method](model, opt);
    }

    /**
     * Find a model or models.
     *
     * @param {Object} model - Bacbkone model
     * @param {Object} options - options
     * @returns {Promise}
     */
    read(model, options) {
        if (model.idAttribute) {
            return this.findItem(model, options);
        }

        return this.find(model, options);
    }

    /**
     * Find a model.
     *
     * @param {Object} model - Backbone model
     * @param {Object} options
     * @returns {Promise}
     */
    async findItem(model, options) {
        const data = await this.db.processRequest('findItem', [options]);
        if (!data) {
            return Promise.reject('not found');
        }

        model.set(data || {});
        return model;
    }

    /**
     * Find models and add to the collection.
     *
     * @param {Object} collection - Backbone collection
     * @param {Object} options
     * @returns {Promise}
     */
    async find(collection, options) {
        const models = await this.db.processRequest('find', [options]);
        if (models && models.length) {
            collection.add(models);
        }

        return collection;
    }

    /**
     * @see {@link Sync.save}
     */
    create(...args) {
        return this.save.apply(this, args);
    }

    /**
     * @see {@link Sync.save}
     */
    update(...args) {
        return this.save.apply(this, args);
    }

    /**
     * Save a model.
     *
     * @param {Object} model - Backbone model
     * @param {Object} options
     * @returns {Promise}
     */
    async save(model, options) {
        const opt = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend({
            data: model.getData()
        }, options);

        const data = await this.db.processRequest('save', [opt]);
        model.set(data);
    }

    /**
     * Delete a model.
     *
     * @param {Object} model - Backbone model
     * @param {Object} options
     * @returns {Promise}
     */
    delete(model, options) {
        const opt = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend({ data: model.getData() }, options);
        return this.db.processRequest('removeItem', [opt]);
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async destroyDb(model, options) {
        this.sleep(1000);
        console.log('Sync.destroyDb(): Calling db.dropdb()');
        const opt = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend(options);
        return this.db.dropDb(model);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Sync;


/***/ }),
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_debug__);
/**
 * @module workers/Module
 */




const log = __WEBPACK_IMPORTED_MODULE_2_debug___default()('lav:workers/Module');

/**
 * Worker module. All classes that use WebWorkers should use this class.
 * With this, classes can use WebWorkers seamlessly.
 *
 * @class
 * @license MPL-2.0
 * @example
 * import WorkerModule from '../workers/Module';
 *
 * class MyClass extends WorkerModule {
 * }
 */
class Module {

    get fileName() {
        return 'workers/module';
    }

    /**
     * Radio channel for requests and events. Mandatory property.
     *
     * @returns {String}
     */
    get channelName() {
        return this.fileName;
    }

    /**
     * Radio channel.
     *
     * @returns {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.channel(this.channelName);
    }

    /**
     * Requests to which the class needs to respond to.
     *
     * @returns {Object} key=value object
     * @example
     * return {
     *     'find:all': 'findAll',
     * }
     */
    get radioRequests() {
        return {};
    }

    constructor() {
        // Start listening to requests
        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(this.radioRequests, (method, request) => {
            this.channel.reply(request, (...args) => this.processRequest(method, args));
        });
    }

    /**
     * Process a Radio request.
     *
     * @param {String} method - requested method
     * @param {Array} args - arguments
     * @returns {Promises} - all methods should return a promise
     */
    processRequest(method, args) {
        /*
         * Execute local method if:
         * 1. It's a WebWorker instance
         * 2. WebWorkers are not supported
         */
        if (typeof importScripts !== 'undefined' || !window.Worker) {
            log('not using workers');
            return this[method].apply(this, args);
        }

        // Execute the method in WebWorkers
        return this.delegateToWorker(method, args);
    }

    /**
     * Execute a method in webworkers.
     *
     * @fires workers/Delegator#execute
     * @param {String} method - method of this class that should be executed
     * @param {Array} args - arguments
     * @returns {Promise}
     */
    delegateToWorker(method, args) {
        /**
         * @event workers/Delegator#execute
         * @type {Object}
         * @property {Array} args
         * @property {String} method
         * @property {String} file
         */
        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('workers/Delegator', 'execute', {
            args,
            method,
            file: this.channelName
        });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Module;


/***/ }),
/* 301 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return configNames; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);


/**
 * Default config values.
 *
 * @namespace
 * @prop {String} appVersion - version of the app
 * @prop {String} firstStart - always equal to 1 until a user goes through
 * first-start tutorial.
 * @prop {Array} modules - an array of enabled modules
 * @license MPL-2.0
 */
const configNames = {
  appVersion: '1.0.0',
  firstStart: '1',
  modules: [],

  /**
   * Main configs.
   *
   * @prop {String} appLang - localization (en|fr...etc)
   * @prop {String} theme - theme
   * @prop {String} version - 0 is fully local, 1 is byos, 2 is fully hosted
   * @prop {String} pagination - the number of notes shown per page
   * @prop {String} sortnotes - key by which notes should be sorted
   * @prop {String} sortnotebooks - key by which notebooks should be sorted
   * @prop {String} navbarNotebooksMax - the maximum amount of notebooks shown
   * in the navbar
   */
  appLang: '',
  theme: '',

  version: '0',
  pagination: '10',
  sortnotes: 'created',
  sortnotebooks: 'name',
  navbarNotebooksMax: '5',

  /**
   * Codemirror settings.
   *
   * @prop {String} editMode - (normal|fullscreen|preview)
   * @prop {String} textEditor - keybindings used for the editor (vim|emacs|sublime)
   * @prop {String} indentUnit - number of spaces used for indentation
   */
  editMode: 'preview',
  textEditor: 'default',
  indentUnit: '4',

  /**
   * Synchronization settings.
   *
   * @prop {String} signalServer
   * @prop {String} deviceId - unique device ID
   * @prop {Array}  peers    - an array of peers. Every item in the array
   * has the following structure {username, deviceId, lastSeen}
   * @prop {String} cloudStorage - (p2p|dropbox|remotestorage)
   * @prop {String} dropboxKey - dropbox app key
   * @prop {String} dropboxAccessToken - dropbox access token
   * @prop {String} folderPath - the path to your data storage directory
   */
  signalServer: 'http://localhost:3000',
  deviceId: '',
  peers: [],
  cloudStorage: 'p2p',
  dropboxKey: '',
  dropboxAccessToken: '',
  folderPath: '',

  /**
   * Encryption settings.
   *
   * @prop {String} encrypt - disable/enable encryption (0|1)
   * @prop {Object} encryptBackup - used for storing the previous encryption
   * settings.
   */
  encrypt: '0',
  encryptBackup: {},
  /**
   * Keybinding settings.
   *
   * @prop {String} navigateTop - previous item (default k)
   * @prop {String} navigateBottom - next item (default k)
   * @prop {String} jumpInbox - go to the index page (default g+i)
   * @prop {String} jumpNotebok - go to the notebook page (default g+n)
   * @prop {String} jumpFavorite - go to the favorite page (default g+f)
   * @prop {String} jumpRemoved - go to the trash page (default g+t)
   * @prop {String} jumpOpenTasks - show all notes that have tasks (default g+o)
   * @prop {String} actionsEdit - edit selected note/notebook/tag (default e)
   * @prop {String} actionsOpen - open selected note/notebook/tag (default o)
   * @prop {String} actionsRotateStar - toggle favorite status of a note - s
   * @prop {String} appCreateNote - create a new note/notebook/tag (default c)
   * @prop {String} appSearch - show search box (default /)
   * @prop {String} appKeyboardHelp - show keybinding help (default ?)
   */
  navigateTop: 'k',
  navigateBottom: 'j',
  jumpInbox: 'g i',
  jumpNotebook: 'g n',
  jumpFavorite: 'g f',
  jumpRemoved: 'g t',
  jumpOpenTasks: 'g o',
  actionsEdit: 'e',
  actionsOpen: 'o',
  actionsRemove: 'shift+3',
  actionsRotateStar: 's',
  appCreateNote: 'c',
  appSearch: '/',
  appKeyboardHelp: '?',
  appShowSidemenu: 's m'
};



/***/ }),
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return fileSaver; });
/* unused harmony export cordovaSave */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_file_saver__ = __webpack_require__(306);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_file_saver___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_file_saver__);
/**
 * @module utils/fileSaver
 * @license MPL-2.0
 */


/**
 * Save a file in Cordova environment.
 *
 * @param {String} content
 * @param {String} fileName
 * @param {Function} resolve
 */
function cordovaSave(content, fileName, resolve) {
    const externalDir = window.cordova.file.externalDataDirectory;

    window.resolveLocalFileSystemURL(externalDir, dir => {
        dir.getFile(fileName, { create: true }, file => {
            file.createWriter(writer => {
                writer.write(content);
                resolve();
            });
        });
    });
}

/**
 * Save a file.
 *
 * @param {String} content
 * @param {String} fileName
 * @returns {Promise}
 */
function fileSaver(content, fileName) {
    if (window.cordova) {
        return new Promise(resolve => cordovaSave(content, fileName, resolve));
    }

    // Use HTML5 saveAs
    return Promise.resolve(Object(__WEBPACK_IMPORTED_MODULE_0_file_saver__["saveAs"])(content, fileName));
}



/***/ }),
/* 306 */,
/* 307 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/setup/ContentView
 */



/**
 * The main content view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class ContentView extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    className() {
        return 'row';
    }

    events() {
        return {
            'keyup input': 'onInputChange',
            'click #welcome--next': 'onClickNext'
        };
    }

    /**
     * If the key a user has provided is ready, trigger "save" event.
     *
     * @param {Object} key
     */
    onReadyKey({ key }) {
        const { user, username } = this.options;

        this.triggerMethod('save', {
            username: user ? user.username : username,
            register: this.register === true,
            keys: {
                privateKey: key.armor(),
                publicKey: key.toPublic().armor()
            }
        });
    }

    /**
     * Show a warning or an error message.
     *
     * @param {String} text
     */
    showWarning(text) {
        this.ui.alert.removeClass('hidden').text(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n(text));
    }

    /**
     * Failed to save changes or claim the username.
     *
     * @param {String} err
     */
    onSaveError({ err }) {
        const text = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.isString(err) ? err : `Signal server error #${err.status}`;
        this.showWarning(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.cleanXSS(text));
    }

    /**
     * Failed to read a key.
     *
     * @param {String} err
     */
    onKeyError({ err }) {
        this.onSaveError({ err });
    }

    serializeData() {
        return this.options;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = ContentView;


/***/ }),
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/**
 * Configs that don't change.
 *
 * @module constants
 * @license MPL-2.0
 */


/**
 * @namespace constants
 * @prop {String} version - current version of the app
 * @prop {String} url - the URL where the app is accessed from
 * @prop {Array} defaultHosts - hosts that Dropbox auth server accepts
 * @prop {String} dropboxKey - dropbox API key
 * @prop {String} dropboxSecret - dropbox secret key (not necessary)
 * @prop {Boolean} dropboxKeyNeed - true if the default Dropbox API key will
 * not work and a user needs to provid their own
 */
const constants = {
    version: '0.0.1',
    url: location.origin + location.pathname.replace('index.html', ''),
    defaultHosts: ['Encryptic.io', 'localhost', 'localhost:9000', 'localhost:9100'],
    dropboxKey: 'hlicys9cs8rj3ep',
    dropboxSecret: null,
    dropboxKeyNeed: false,

    singleUserMode: false,
    singleUserProfile: "",
    singleUserPassword: ""
};

// The default Dropbox API key will not work
if (!__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.contains(constants.defaultHosts, location.host) && !window.electron) {
    constants.dropboxKeyNeed = true;
}

/* harmony default export */ __webpack_exports__["a"] = (constants);

/***/ }),
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE

(function(mod) {
  if (true) // CommonJS
    mod(__webpack_require__(32), __webpack_require__(1175), __webpack_require__(1176));
  else if (typeof define == "function" && define.amd) // AMD
    define(["../../lib/codemirror", "../xml/xml", "../meta"], mod);
  else // Plain browser env
    mod(CodeMirror);
})(function(CodeMirror) {
"use strict";

CodeMirror.defineMode("markdown", function(cmCfg, modeCfg) {

  var htmlMode = CodeMirror.getMode(cmCfg, "text/html");
  var htmlModeMissing = htmlMode.name == "null"

  function getMode(name) {
    if (CodeMirror.findModeByName) {
      var found = CodeMirror.findModeByName(name);
      if (found) name = found.mime || found.mimes[0];
    }
    var mode = CodeMirror.getMode(cmCfg, name);
    return mode.name == "null" ? null : mode;
  }

  // Should characters that affect highlighting be highlighted separate?
  // Does not include characters that will be output (such as `1.` and `-` for lists)
  if (modeCfg.highlightFormatting === undefined)
    modeCfg.highlightFormatting = false;

  // Maximum number of nested blockquotes. Set to 0 for infinite nesting.
  // Excess `>` will emit `error` token.
  if (modeCfg.maxBlockquoteDepth === undefined)
    modeCfg.maxBlockquoteDepth = 0;

  // Turn on task lists? ("- [ ] " and "- [x] ")
  if (modeCfg.taskLists === undefined) modeCfg.taskLists = false;

  // Turn on strikethrough syntax
  if (modeCfg.strikethrough === undefined)
    modeCfg.strikethrough = false;

  if (modeCfg.emoji === undefined)
    modeCfg.emoji = false;

  if (modeCfg.fencedCodeBlockHighlighting === undefined)
    modeCfg.fencedCodeBlockHighlighting = true;

  if (modeCfg.xml === undefined)
    modeCfg.xml = true;

  // Allow token types to be overridden by user-provided token types.
  if (modeCfg.tokenTypeOverrides === undefined)
    modeCfg.tokenTypeOverrides = {};

  var tokenTypes = {
    header: "header",
    code: "comment",
    quote: "quote",
    list1: "variable-2",
    list2: "variable-3",
    list3: "keyword",
    hr: "hr",
    image: "image",
    imageAltText: "image-alt-text",
    imageMarker: "image-marker",
    formatting: "formatting",
    linkInline: "link",
    linkEmail: "link",
    linkText: "link",
    linkHref: "string",
    em: "em",
    strong: "strong",
    strikethrough: "strikethrough",
    emoji: "builtin"
  };

  for (var tokenType in tokenTypes) {
    if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {
      tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];
    }
  }

  var hrRE = /^([*\-_])(?:\s*\1){2,}\s*$/
  ,   listRE = /^(?:[*\-+]|^[0-9]+([.)]))\s+/
  ,   taskListRE = /^\[(x| )\](?=\s)/i // Must follow listRE
  ,   atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/
  ,   setextHeaderRE = /^ *(?:\={1,}|-{1,})\s*$/
  ,   textRE = /^[^#!\[\]*_\\<>` "'(~:]+/
  ,   fencedCodeRE = /^(~~~+|```+)[ \t]*([\w+#-]*)[^\n`]*$/
  ,   linkDefRE = /^\s*\[[^\]]+?\]:.*$/ // naive link-definition
  ,   punctuation = /[!\"#$%&\'()*+,\-\.\/:;<=>?@\[\\\]^_`{|}~—]/
  ,   expandedTab = "    " // CommonMark specifies tab as 4 spaces

  function switchInline(stream, state, f) {
    state.f = state.inline = f;
    return f(stream, state);
  }

  function switchBlock(stream, state, f) {
    state.f = state.block = f;
    return f(stream, state);
  }

  function lineIsEmpty(line) {
    return !line || !/\S/.test(line.string)
  }

  // Blocks

  function blankLine(state) {
    // Reset linkTitle state
    state.linkTitle = false;
    state.linkHref = false;
    state.linkText = false;
    // Reset EM state
    state.em = false;
    // Reset STRONG state
    state.strong = false;
    // Reset strikethrough state
    state.strikethrough = false;
    // Reset state.quote
    state.quote = 0;
    // Reset state.indentedCode
    state.indentedCode = false;
    if (state.f == htmlBlock) {
      var exit = htmlModeMissing
      if (!exit) {
        var inner = CodeMirror.innerMode(htmlMode, state.htmlState)
        exit = inner.mode.name == "xml" && inner.state.tagStart === null &&
          (!inner.state.context && inner.state.tokenize.isInText)
      }
      if (exit) {
        state.f = inlineNormal;
        state.block = blockNormal;
        state.htmlState = null;
      }
    }
    // Reset state.trailingSpace
    state.trailingSpace = 0;
    state.trailingSpaceNewLine = false;
    // Mark this line as blank
    state.prevLine = state.thisLine
    state.thisLine = {stream: null}
    return null;
  }

  function blockNormal(stream, state) {
    var firstTokenOnLine = stream.column() === state.indentation;
    var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);
    var prevLineIsIndentedCode = state.indentedCode;
    var prevLineIsHr = state.prevLine.hr;
    var prevLineIsList = state.list !== false;
    var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;

    state.indentedCode = false;

    var lineIndentation = state.indentation;
    // compute once per line (on first token)
    if (state.indentationDiff === null) {
      state.indentationDiff = state.indentation;
      if (prevLineIsList) {
        // Reset inline styles which shouldn't propagate aross list items
        state.em = false;
        state.strong = false;
        state.code = false;
        state.strikethrough = false;

        state.list = null;
        // While this list item's marker's indentation is less than the deepest
        //  list item's content's indentation,pop the deepest list item
        //  indentation off the stack, and update block indentation state
        while (lineIndentation < state.listStack[state.listStack.length - 1]) {
          state.listStack.pop();
          if (state.listStack.length) {
            state.indentation = state.listStack[state.listStack.length - 1];
          // less than the first list's indent -> the line is no longer a list
          } else {
            state.list = false;
          }
        }
        if (state.list !== false) {
          state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1]
        }
      }
    }

    // not comprehensive (currently only for setext detection purposes)
    var allowsInlineContinuation = (
        !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header &&
        (!prevLineIsList || !prevLineIsIndentedCode) &&
        !state.prevLine.fencedCodeEnd
    );

    var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) &&
      state.indentation <= maxNonCodeIndentation && stream.match(hrRE);

    var match = null;
    if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd ||
         state.prevLine.header || prevLineLineIsEmpty)) {
      stream.skipToEnd();
      state.indentedCode = true;
      return tokenTypes.code;
    } else if (stream.eatSpace()) {
      return null;
    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {
      state.quote = 0;
      state.header = match[1].length;
      state.thisLine.header = true;
      if (modeCfg.highlightFormatting) state.formatting = "header";
      state.f = state.inline;
      return getType(state);
    } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {
      state.quote = firstTokenOnLine ? 1 : state.quote + 1;
      if (modeCfg.highlightFormatting) state.formatting = "quote";
      stream.eatSpace();
      return getType(state);
    } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {
      var listType = match[1] ? "ol" : "ul";

      state.indentation = lineIndentation + stream.current().length;
      state.list = true;
      state.quote = 0;

      // Add this list item's content's indentation to the stack
      state.listStack.push(state.indentation);

      if (modeCfg.taskLists && stream.match(taskListRE, false)) {
        state.taskList = true;
      }
      state.f = state.inline;
      if (modeCfg.highlightFormatting) state.formatting = ["list", "list-" + listType];
      return getType(state);
    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {
      state.quote = 0;
      state.fencedEndRE = new RegExp(match[1] + "+ *$");
      // try switching mode
      state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2]);
      if (state.localMode) state.localState = CodeMirror.startState(state.localMode);
      state.f = state.block = local;
      if (modeCfg.highlightFormatting) state.formatting = "code-block";
      state.code = -1
      return getType(state);
    // SETEXT has lowest block-scope precedence after HR, so check it after
    //  the others (code, blockquote, list...)
    } else if (
      // if setext set, indicates line after ---/===
      state.setext || (
        // line before ---/===
        (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false &&
        !state.code && !isHr && !linkDefRE.test(stream.string) &&
        (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))
      )
    ) {
      if ( !state.setext ) {
        state.header = match[0].charAt(0) == '=' ? 1 : 2;
        state.setext = state.header;
      } else {
        state.header = state.setext;
        // has no effect on type so we can reset it now
        state.setext = 0;
        stream.skipToEnd();
        if (modeCfg.highlightFormatting) state.formatting = "header";
      }
      state.thisLine.header = true;
      state.f = state.inline;
      return getType(state);
    } else if (isHr) {
      stream.skipToEnd();
      state.hr = true;
      state.thisLine.hr = true;
      return tokenTypes.hr;
    } else if (stream.peek() === '[') {
      return switchInline(stream, state, footnoteLink);
    }

    return switchInline(stream, state, state.inline);
  }

  function htmlBlock(stream, state) {
    var style = htmlMode.token(stream, state.htmlState);
    if (!htmlModeMissing) {
      var inner = CodeMirror.innerMode(htmlMode, state.htmlState)
      if ((inner.mode.name == "xml" && inner.state.tagStart === null &&
           (!inner.state.context && inner.state.tokenize.isInText)) ||
          (state.md_inside && stream.current().indexOf(">") > -1)) {
        state.f = inlineNormal;
        state.block = blockNormal;
        state.htmlState = null;
      }
    }
    return style;
  }

  function local(stream, state) {
    var currListInd = state.listStack[state.listStack.length - 1] || 0;
    var hasExitedList = state.indentation < currListInd;
    var maxFencedEndInd = currListInd + 3;
    if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {
      if (modeCfg.highlightFormatting) state.formatting = "code-block";
      var returnType;
      if (!hasExitedList) returnType = getType(state)
      state.localMode = state.localState = null;
      state.block = blockNormal;
      state.f = inlineNormal;
      state.fencedEndRE = null;
      state.code = 0
      state.thisLine.fencedCodeEnd = true;
      if (hasExitedList) return switchBlock(stream, state, state.block);
      return returnType;
    } else if (state.localMode) {
      return state.localMode.token(stream, state.localState);
    } else {
      stream.skipToEnd();
      return tokenTypes.code;
    }
  }

  // Inline
  function getType(state) {
    var styles = [];

    if (state.formatting) {
      styles.push(tokenTypes.formatting);

      if (typeof state.formatting === "string") state.formatting = [state.formatting];

      for (var i = 0; i < state.formatting.length; i++) {
        styles.push(tokenTypes.formatting + "-" + state.formatting[i]);

        if (state.formatting[i] === "header") {
          styles.push(tokenTypes.formatting + "-" + state.formatting[i] + "-" + state.header);
        }

        // Add `formatting-quote` and `formatting-quote-#` for blockquotes
        // Add `error` instead if the maximum blockquote nesting depth is passed
        if (state.formatting[i] === "quote") {
          if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {
            styles.push(tokenTypes.formatting + "-" + state.formatting[i] + "-" + state.quote);
          } else {
            styles.push("error");
          }
        }
      }
    }

    if (state.taskOpen) {
      styles.push("meta");
      return styles.length ? styles.join(' ') : null;
    }
    if (state.taskClosed) {
      styles.push("property");
      return styles.length ? styles.join(' ') : null;
    }

    if (state.linkHref) {
      styles.push(tokenTypes.linkHref, "url");
    } else { // Only apply inline styles to non-url text
      if (state.strong) { styles.push(tokenTypes.strong); }
      if (state.em) { styles.push(tokenTypes.em); }
      if (state.strikethrough) { styles.push(tokenTypes.strikethrough); }
      if (state.emoji) { styles.push(tokenTypes.emoji); }
      if (state.linkText) { styles.push(tokenTypes.linkText); }
      if (state.code) { styles.push(tokenTypes.code); }
      if (state.image) { styles.push(tokenTypes.image); }
      if (state.imageAltText) { styles.push(tokenTypes.imageAltText, "link"); }
      if (state.imageMarker) { styles.push(tokenTypes.imageMarker); }
    }

    if (state.header) { styles.push(tokenTypes.header, tokenTypes.header + "-" + state.header); }

    if (state.quote) {
      styles.push(tokenTypes.quote);

      // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth
      if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {
        styles.push(tokenTypes.quote + "-" + state.quote);
      } else {
        styles.push(tokenTypes.quote + "-" + modeCfg.maxBlockquoteDepth);
      }
    }

    if (state.list !== false) {
      var listMod = (state.listStack.length - 1) % 3;
      if (!listMod) {
        styles.push(tokenTypes.list1);
      } else if (listMod === 1) {
        styles.push(tokenTypes.list2);
      } else {
        styles.push(tokenTypes.list3);
      }
    }

    if (state.trailingSpaceNewLine) {
      styles.push("trailing-space-new-line");
    } else if (state.trailingSpace) {
      styles.push("trailing-space-" + (state.trailingSpace % 2 ? "a" : "b"));
    }

    return styles.length ? styles.join(' ') : null;
  }

  function handleText(stream, state) {
    if (stream.match(textRE, true)) {
      return getType(state);
    }
    return undefined;
  }

  function inlineNormal(stream, state) {
    var style = state.text(stream, state);
    if (typeof style !== 'undefined')
      return style;

    if (state.list) { // List marker (*, +, -, 1., etc)
      state.list = null;
      return getType(state);
    }

    if (state.taskList) {
      var taskOpen = stream.match(taskListRE, true)[1] === " ";
      if (taskOpen) state.taskOpen = true;
      else state.taskClosed = true;
      if (modeCfg.highlightFormatting) state.formatting = "task";
      state.taskList = false;
      return getType(state);
    }

    state.taskOpen = false;
    state.taskClosed = false;

    if (state.header && stream.match(/^#+$/, true)) {
      if (modeCfg.highlightFormatting) state.formatting = "header";
      return getType(state);
    }

    var ch = stream.next();

    // Matches link titles present on next line
    if (state.linkTitle) {
      state.linkTitle = false;
      var matchCh = ch;
      if (ch === '(') {
        matchCh = ')';
      }
      matchCh = (matchCh+'').replace(/([.?*+^\[\]\\(){}|-])/g, "\\$1");
      var regex = '^\\s*(?:[^' + matchCh + '\\\\]+|\\\\\\\\|\\\\.)' + matchCh;
      if (stream.match(new RegExp(regex), true)) {
        return tokenTypes.linkHref;
      }
    }

    // If this block is changed, it may need to be updated in GFM mode
    if (ch === '`') {
      var previousFormatting = state.formatting;
      if (modeCfg.highlightFormatting) state.formatting = "code";
      stream.eatWhile('`');
      var count = stream.current().length
      if (state.code == 0 && (!state.quote || count == 1)) {
        state.code = count
        return getType(state)
      } else if (count == state.code) { // Must be exact
        var t = getType(state)
        state.code = 0
        return t
      } else {
        state.formatting = previousFormatting
        return getType(state)
      }
    } else if (state.code) {
      return getType(state);
    }

    if (ch === '\\') {
      stream.next();
      if (modeCfg.highlightFormatting) {
        var type = getType(state);
        var formattingEscape = tokenTypes.formatting + "-escape";
        return type ? type + " " + formattingEscape : formattingEscape;
      }
    }

    if (ch === '!' && stream.match(/\[[^\]]*\] ?(?:\(|\[)/, false)) {
      state.imageMarker = true;
      state.image = true;
      if (modeCfg.highlightFormatting) state.formatting = "image";
      return getType(state);
    }

    if (ch === '[' && state.imageMarker && stream.match(/[^\]]*\](\(.*?\)| ?\[.*?\])/, false)) {
      state.imageMarker = false;
      state.imageAltText = true
      if (modeCfg.highlightFormatting) state.formatting = "image";
      return getType(state);
    }

    if (ch === ']' && state.imageAltText) {
      if (modeCfg.highlightFormatting) state.formatting = "image";
      var type = getType(state);
      state.imageAltText = false;
      state.image = false;
      state.inline = state.f = linkHref;
      return type;
    }

    if (ch === '[' && !state.image) {
      if (state.linkText && stream.match(/^.*?\]/)) return getType(state)
      state.linkText = true;
      if (modeCfg.highlightFormatting) state.formatting = "link";
      return getType(state);
    }

    if (ch === ']' && state.linkText) {
      if (modeCfg.highlightFormatting) state.formatting = "link";
      var type = getType(state);
      state.linkText = false;
      state.inline = state.f = stream.match(/\(.*?\)| ?\[.*?\]/, false) ? linkHref : inlineNormal
      return type;
    }

    if (ch === '<' && stream.match(/^(https?|ftps?):\/\/(?:[^\\>]|\\.)+>/, false)) {
      state.f = state.inline = linkInline;
      if (modeCfg.highlightFormatting) state.formatting = "link";
      var type = getType(state);
      if (type){
        type += " ";
      } else {
        type = "";
      }
      return type + tokenTypes.linkInline;
    }

    if (ch === '<' && stream.match(/^[^> \\]+@(?:[^\\>]|\\.)+>/, false)) {
      state.f = state.inline = linkInline;
      if (modeCfg.highlightFormatting) state.formatting = "link";
      var type = getType(state);
      if (type){
        type += " ";
      } else {
        type = "";
      }
      return type + tokenTypes.linkEmail;
    }

    if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\?|!\[CDATA\[|[a-z][a-z0-9-]*(?:\s+[a-z_:.\-]+(?:\s*=\s*[^>]+)?)*\s*(?:>|$))/i, false)) {
      var end = stream.string.indexOf(">", stream.pos);
      if (end != -1) {
        var atts = stream.string.substring(stream.start, end);
        if (/markdown\s*=\s*('|"){0,1}1('|"){0,1}/.test(atts)) state.md_inside = true;
      }
      stream.backUp(1);
      state.htmlState = CodeMirror.startState(htmlMode);
      return switchBlock(stream, state, htmlBlock);
    }

    if (modeCfg.xml && ch === '<' && stream.match(/^\/\w*?>/)) {
      state.md_inside = false;
      return "tag";
    } else if (ch === "*" || ch === "_") {
      var len = 1, before = stream.pos == 1 ? " " : stream.string.charAt(stream.pos - 2)
      while (len < 3 && stream.eat(ch)) len++
      var after = stream.peek() || " "
      // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis
      var leftFlanking = !/\s/.test(after) && (!punctuation.test(after) || /\s/.test(before) || punctuation.test(before))
      var rightFlanking = !/\s/.test(before) && (!punctuation.test(before) || /\s/.test(after) || punctuation.test(after))
      var setEm = null, setStrong = null
      if (len % 2) { // Em
        if (!state.em && leftFlanking && (ch === "*" || !rightFlanking || punctuation.test(before)))
          setEm = true
        else if (state.em == ch && rightFlanking && (ch === "*" || !leftFlanking || punctuation.test(after)))
          setEm = false
      }
      if (len > 1) { // Strong
        if (!state.strong && leftFlanking && (ch === "*" || !rightFlanking || punctuation.test(before)))
          setStrong = true
        else if (state.strong == ch && rightFlanking && (ch === "*" || !leftFlanking || punctuation.test(after)))
          setStrong = false
      }
      if (setStrong != null || setEm != null) {
        if (modeCfg.highlightFormatting) state.formatting = setEm == null ? "strong" : setStrong == null ? "em" : "strong em"
        if (setEm === true) state.em = ch
        if (setStrong === true) state.strong = ch
        var t = getType(state)
        if (setEm === false) state.em = false
        if (setStrong === false) state.strong = false
        return t
      }
    } else if (ch === ' ') {
      if (stream.eat('*') || stream.eat('_')) { // Probably surrounded by spaces
        if (stream.peek() === ' ') { // Surrounded by spaces, ignore
          return getType(state);
        } else { // Not surrounded by spaces, back up pointer
          stream.backUp(1);
        }
      }
    }

    if (modeCfg.strikethrough) {
      if (ch === '~' && stream.eatWhile(ch)) {
        if (state.strikethrough) {// Remove strikethrough
          if (modeCfg.highlightFormatting) state.formatting = "strikethrough";
          var t = getType(state);
          state.strikethrough = false;
          return t;
        } else if (stream.match(/^[^\s]/, false)) {// Add strikethrough
          state.strikethrough = true;
          if (modeCfg.highlightFormatting) state.formatting = "strikethrough";
          return getType(state);
        }
      } else if (ch === ' ') {
        if (stream.match(/^~~/, true)) { // Probably surrounded by space
          if (stream.peek() === ' ') { // Surrounded by spaces, ignore
            return getType(state);
          } else { // Not surrounded by spaces, back up pointer
            stream.backUp(2);
          }
        }
      }
    }

    if (modeCfg.emoji && ch === ":" && stream.match(/^(?:[a-z_\d+][a-z_\d+-]*|\-[a-z_\d+][a-z_\d+-]*):/)) {
      state.emoji = true;
      if (modeCfg.highlightFormatting) state.formatting = "emoji";
      var retType = getType(state);
      state.emoji = false;
      return retType;
    }

    if (ch === ' ') {
      if (stream.match(/^ +$/, false)) {
        state.trailingSpace++;
      } else if (state.trailingSpace) {
        state.trailingSpaceNewLine = true;
      }
    }

    return getType(state);
  }

  function linkInline(stream, state) {
    var ch = stream.next();

    if (ch === ">") {
      state.f = state.inline = inlineNormal;
      if (modeCfg.highlightFormatting) state.formatting = "link";
      var type = getType(state);
      if (type){
        type += " ";
      } else {
        type = "";
      }
      return type + tokenTypes.linkInline;
    }

    stream.match(/^[^>]+/, true);

    return tokenTypes.linkInline;
  }

  function linkHref(stream, state) {
    // Check if space, and return NULL if so (to avoid marking the space)
    if(stream.eatSpace()){
      return null;
    }
    var ch = stream.next();
    if (ch === '(' || ch === '[') {
      state.f = state.inline = getLinkHrefInside(ch === "(" ? ")" : "]");
      if (modeCfg.highlightFormatting) state.formatting = "link-string";
      state.linkHref = true;
      return getType(state);
    }
    return 'error';
  }

  var linkRE = {
    ")": /^(?:[^\\\(\)]|\\.|\((?:[^\\\(\)]|\\.)*\))*?(?=\))/,
    "]": /^(?:[^\\\[\]]|\\.|\[(?:[^\\\[\]]|\\.)*\])*?(?=\])/
  }

  function getLinkHrefInside(endChar) {
    return function(stream, state) {
      var ch = stream.next();

      if (ch === endChar) {
        state.f = state.inline = inlineNormal;
        if (modeCfg.highlightFormatting) state.formatting = "link-string";
        var returnState = getType(state);
        state.linkHref = false;
        return returnState;
      }

      stream.match(linkRE[endChar])
      state.linkHref = true;
      return getType(state);
    };
  }

  function footnoteLink(stream, state) {
    if (stream.match(/^([^\]\\]|\\.)*\]:/, false)) {
      state.f = footnoteLinkInside;
      stream.next(); // Consume [
      if (modeCfg.highlightFormatting) state.formatting = "link";
      state.linkText = true;
      return getType(state);
    }
    return switchInline(stream, state, inlineNormal);
  }

  function footnoteLinkInside(stream, state) {
    if (stream.match(/^\]:/, true)) {
      state.f = state.inline = footnoteUrl;
      if (modeCfg.highlightFormatting) state.formatting = "link";
      var returnType = getType(state);
      state.linkText = false;
      return returnType;
    }

    stream.match(/^([^\]\\]|\\.)+/, true);

    return tokenTypes.linkText;
  }

  function footnoteUrl(stream, state) {
    // Check if space, and return NULL if so (to avoid marking the space)
    if(stream.eatSpace()){
      return null;
    }
    // Match URL
    stream.match(/^[^\s]+/, true);
    // Check for link title
    if (stream.peek() === undefined) { // End of line, set flag to check next line
      state.linkTitle = true;
    } else { // More content on line, check if link title
      stream.match(/^(?:\s+(?:"(?:[^"\\]|\\\\|\\.)+"|'(?:[^'\\]|\\\\|\\.)+'|\((?:[^)\\]|\\\\|\\.)+\)))?/, true);
    }
    state.f = state.inline = inlineNormal;
    return tokenTypes.linkHref + " url";
  }

  var mode = {
    startState: function() {
      return {
        f: blockNormal,

        prevLine: {stream: null},
        thisLine: {stream: null},

        block: blockNormal,
        htmlState: null,
        indentation: 0,

        inline: inlineNormal,
        text: handleText,

        formatting: false,
        linkText: false,
        linkHref: false,
        linkTitle: false,
        code: 0,
        em: false,
        strong: false,
        header: 0,
        setext: 0,
        hr: false,
        taskList: false,
        list: false,
        listStack: [],
        quote: 0,
        trailingSpace: 0,
        trailingSpaceNewLine: false,
        strikethrough: false,
        emoji: false,
        fencedEndRE: null
      };
    },

    copyState: function(s) {
      return {
        f: s.f,

        prevLine: s.prevLine,
        thisLine: s.thisLine,

        block: s.block,
        htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),
        indentation: s.indentation,

        localMode: s.localMode,
        localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,

        inline: s.inline,
        text: s.text,
        formatting: false,
        linkText: s.linkText,
        linkTitle: s.linkTitle,
        linkHref: s.linkHref,
        code: s.code,
        em: s.em,
        strong: s.strong,
        strikethrough: s.strikethrough,
        emoji: s.emoji,
        header: s.header,
        setext: s.setext,
        hr: s.hr,
        taskList: s.taskList,
        list: s.list,
        listStack: s.listStack.slice(0),
        quote: s.quote,
        indentedCode: s.indentedCode,
        trailingSpace: s.trailingSpace,
        trailingSpaceNewLine: s.trailingSpaceNewLine,
        md_inside: s.md_inside,
        fencedEndRE: s.fencedEndRE
      };
    },

    token: function(stream, state) {

      // Reset state.formatting
      state.formatting = false;

      if (stream != state.thisLine.stream) {
        state.header = 0;
        state.hr = false;

        if (stream.match(/^\s*$/, true)) {
          blankLine(state);
          return null;
        }

        state.prevLine = state.thisLine
        state.thisLine = {stream: stream}

        // Reset state.taskList
        state.taskList = false;

        // Reset state.trailingSpace
        state.trailingSpace = 0;
        state.trailingSpaceNewLine = false;

        if (!state.localState) {
          state.f = state.block;
          if (state.f != htmlBlock) {
            var indentation = stream.match(/^\s*/, true)[0].replace(/\t/g, expandedTab).length;
            state.indentation = indentation;
            state.indentationDiff = null;
            if (indentation > 0) return null;
          }
        }
      }
      return state.f(stream, state);
    },

    innerMode: function(state) {
      if (state.block == htmlBlock) return {state: state.htmlState, mode: htmlMode};
      if (state.localState) return {state: state.localState, mode: state.localMode};
      return {state: state, mode: mode};
    },

    indent: function(state, textAfter, line) {
      if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line)
      if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line)
      return CodeMirror.Pass
    },

    blankLine: blankLine,

    getType: getType,

    blockCommentStart: "<!--",
    blockCommentEnd: "-->",
    closeBrackets: "()[]{}''\"\"``",
    fold: "markdown"
  };
  return mode;
}, "xml");

CodeMirror.defineMIME("text/markdown", "markdown");

CodeMirror.defineMIME("text/x-markdown", "markdown");

});


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE

// Utility function that allows modes to be combined. The mode given
// as the base argument takes care of most of the normal mode
// functionality, but a second (typically simple) mode is used, which
// can override the style of text. Both modes get to parse all of the
// text, but when both assign a non-null style to a piece of code, the
// overlay wins, unless the combine argument was true and not overridden,
// or state.overlay.combineTokens was true, in which case the styles are
// combined.

(function(mod) {
  if (true) // CommonJS
    mod(__webpack_require__(32));
  else if (typeof define == "function" && define.amd) // AMD
    define(["../../lib/codemirror"], mod);
  else // Plain browser env
    mod(CodeMirror);
})(function(CodeMirror) {
"use strict";

CodeMirror.overlayMode = function(base, overlay, combine) {
  return {
    startState: function() {
      return {
        base: CodeMirror.startState(base),
        overlay: CodeMirror.startState(overlay),
        basePos: 0, baseCur: null,
        overlayPos: 0, overlayCur: null,
        streamSeen: null
      };
    },
    copyState: function(state) {
      return {
        base: CodeMirror.copyState(base, state.base),
        overlay: CodeMirror.copyState(overlay, state.overlay),
        basePos: state.basePos, baseCur: null,
        overlayPos: state.overlayPos, overlayCur: null
      };
    },

    token: function(stream, state) {
      if (stream != state.streamSeen ||
          Math.min(state.basePos, state.overlayPos) < stream.start) {
        state.streamSeen = stream;
        state.basePos = state.overlayPos = stream.start;
      }

      if (stream.start == state.basePos) {
        state.baseCur = base.token(stream, state.base);
        state.basePos = stream.pos;
      }
      if (stream.start == state.overlayPos) {
        stream.pos = stream.start;
        state.overlayCur = overlay.token(stream, state.overlay);
        state.overlayPos = stream.pos;
      }
      stream.pos = Math.min(state.basePos, state.overlayPos);

      // state.overlay.combineTokens always takes precedence over combine,
      // unless set to null
      if (state.overlayCur == null) return state.baseCur;
      else if (state.baseCur != null &&
               state.overlay.combineTokens ||
               combine && state.overlay.combineTokens == null)
        return state.baseCur + " " + state.overlayCur;
      else return state.overlayCur;
    },

    indent: base.indent && function(state, textAfter) {
      return base.indent(state.base, textAfter);
    },
    electricChars: base.electricChars,

    innerMode: function(state) { return {state: state.base, mode: base}; },

    blankLine: function(state) {
      var baseToken, overlayToken;
      if (base.blankLine) baseToken = base.blankLine(state.base);
      if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);

      return overlayToken == null ?
        baseToken :
        (combine && baseToken != null ? baseToken + " " + overlayToken : overlayToken);
    }
  };
};

});


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE

(function(mod) {
  if (true) // CommonJS
    mod(__webpack_require__(32))
  else if (typeof define == "function" && define.amd) // AMD
    define(["../../lib/codemirror"], mod)
  else // Plain browser env
    mod(CodeMirror)
})(function(CodeMirror) {
  "use strict"
  var Pos = CodeMirror.Pos

  function regexpFlags(regexp) {
    var flags = regexp.flags
    return flags != null ? flags : (regexp.ignoreCase ? "i" : "")
      + (regexp.global ? "g" : "")
      + (regexp.multiline ? "m" : "")
  }

  function ensureFlags(regexp, flags) {
    var current = regexpFlags(regexp), target = current
    for (var i = 0; i < flags.length; i++) if (target.indexOf(flags.charAt(i)) == -1)
      target += flags.charAt(i)
    return current == target ? regexp : new RegExp(regexp.source, target)
  }

  function maybeMultiline(regexp) {
    return /\\s|\\n|\n|\\W|\\D|\[\^/.test(regexp.source)
  }

  function searchRegexpForward(doc, regexp, start) {
    regexp = ensureFlags(regexp, "g")
    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {
      regexp.lastIndex = ch
      var string = doc.getLine(line), match = regexp.exec(string)
      if (match)
        return {from: Pos(line, match.index),
                to: Pos(line, match.index + match[0].length),
                match: match}
    }
  }

  function searchRegexpForwardMultiline(doc, regexp, start) {
    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)

    regexp = ensureFlags(regexp, "gm")
    var string, chunk = 1
    for (var line = start.line, last = doc.lastLine(); line <= last;) {
      // This grows the search buffer in exponentially-sized chunks
      // between matches, so that nearby matches are fast and don't
      // require concatenating the whole document (in case we're
      // searching for something that has tons of matches), but at the
      // same time, the amount of retries is limited.
      for (var i = 0; i < chunk; i++) {
        if (line > last) break
        var curLine = doc.getLine(line++)
        string = string == null ? curLine : string + "\n" + curLine
      }
      chunk = chunk * 2
      regexp.lastIndex = start.ch
      var match = regexp.exec(string)
      if (match) {
        var before = string.slice(0, match.index).split("\n"), inside = match[0].split("\n")
        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length
        return {from: Pos(startLine, startCh),
                to: Pos(startLine + inside.length - 1,
                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),
                match: match}
      }
    }
  }

  function lastMatchIn(string, regexp) {
    var cutOff = 0, match
    for (;;) {
      regexp.lastIndex = cutOff
      var newMatch = regexp.exec(string)
      if (!newMatch) return match
      match = newMatch
      cutOff = match.index + (match[0].length || 1)
      if (cutOff == string.length) return match
    }
  }

  function searchRegexpBackward(doc, regexp, start) {
    regexp = ensureFlags(regexp, "g")
    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {
      var string = doc.getLine(line)
      if (ch > -1) string = string.slice(0, ch)
      var match = lastMatchIn(string, regexp)
      if (match)
        return {from: Pos(line, match.index),
                to: Pos(line, match.index + match[0].length),
                match: match}
    }
  }

  function searchRegexpBackwardMultiline(doc, regexp, start) {
    regexp = ensureFlags(regexp, "gm")
    var string, chunk = 1
    for (var line = start.line, first = doc.firstLine(); line >= first;) {
      for (var i = 0; i < chunk; i++) {
        var curLine = doc.getLine(line--)
        string = string == null ? curLine.slice(0, start.ch) : curLine + "\n" + string
      }
      chunk *= 2

      var match = lastMatchIn(string, regexp)
      if (match) {
        var before = string.slice(0, match.index).split("\n"), inside = match[0].split("\n")
        var startLine = line + before.length, startCh = before[before.length - 1].length
        return {from: Pos(startLine, startCh),
                to: Pos(startLine + inside.length - 1,
                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),
                match: match}
      }
    }
  }

  var doFold, noFold
  if (String.prototype.normalize) {
    doFold = function(str) { return str.normalize("NFD").toLowerCase() }
    noFold = function(str) { return str.normalize("NFD") }
  } else {
    doFold = function(str) { return str.toLowerCase() }
    noFold = function(str) { return str }
  }

  // Maps a position in a case-folded line back to a position in the original line
  // (compensating for codepoints increasing in number during folding)
  function adjustPos(orig, folded, pos, foldFunc) {
    if (orig.length == folded.length) return pos
    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {
      if (min == max) return min
      var mid = (min + max) >> 1
      var len = foldFunc(orig.slice(0, mid)).length
      if (len == pos) return mid
      else if (len > pos) max = mid
      else min = mid + 1
    }
  }

  function searchStringForward(doc, query, start, caseFold) {
    // Empty string would match anything and never progress, so we
    // define it to match nothing instead.
    if (!query.length) return null
    var fold = caseFold ? doFold : noFold
    var lines = fold(query).split(/\r|\n\r?/)

    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {
      var orig = doc.getLine(line).slice(ch), string = fold(orig)
      if (lines.length == 1) {
        var found = string.indexOf(lines[0])
        if (found == -1) continue search
        var start = adjustPos(orig, string, found, fold) + ch
        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),
                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}
      } else {
        var cutFrom = string.length - lines[0].length
        if (string.slice(cutFrom) != lines[0]) continue search
        for (var i = 1; i < lines.length - 1; i++)
          if (fold(doc.getLine(line + i)) != lines[i]) continue search
        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]
        if (endString.slice(0, lastLine.length) != lastLine) continue search
        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),
                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}
      }
    }
  }

  function searchStringBackward(doc, query, start, caseFold) {
    if (!query.length) return null
    var fold = caseFold ? doFold : noFold
    var lines = fold(query).split(/\r|\n\r?/)

    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {
      var orig = doc.getLine(line)
      if (ch > -1) orig = orig.slice(0, ch)
      var string = fold(orig)
      if (lines.length == 1) {
        var found = string.lastIndexOf(lines[0])
        if (found == -1) continue search
        return {from: Pos(line, adjustPos(orig, string, found, fold)),
                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}
      } else {
        var lastLine = lines[lines.length - 1]
        if (string.slice(0, lastLine.length) != lastLine) continue search
        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)
          if (fold(doc.getLine(start + i)) != lines[i]) continue search
        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)
        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search
        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),
                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}
      }
    }
  }

  function SearchCursor(doc, query, pos, options) {
    this.atOccurrence = false
    this.doc = doc
    pos = pos ? doc.clipPos(pos) : Pos(0, 0)
    this.pos = {from: pos, to: pos}

    var caseFold
    if (typeof options == "object") {
      caseFold = options.caseFold
    } else { // Backwards compat for when caseFold was the 4th argument
      caseFold = options
      options = null
    }

    if (typeof query == "string") {
      if (caseFold == null) caseFold = false
      this.matches = function(reverse, pos) {
        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)
      }
    } else {
      query = ensureFlags(query, "gm")
      if (!options || options.multiline !== false)
        this.matches = function(reverse, pos) {
          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)
        }
      else
        this.matches = function(reverse, pos) {
          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)
        }
    }
  }

  SearchCursor.prototype = {
    findNext: function() {return this.find(false)},
    findPrevious: function() {return this.find(true)},

    find: function(reverse) {
      var result = this.matches(reverse, this.doc.clipPos(reverse ? this.pos.from : this.pos.to))

      // Implements weird auto-growing behavior on null-matches for
      // backwards-compatiblity with the vim code (unfortunately)
      while (result && CodeMirror.cmpPos(result.from, result.to) == 0) {
        if (reverse) {
          if (result.from.ch) result.from = Pos(result.from.line, result.from.ch - 1)
          else if (result.from.line == this.doc.firstLine()) result = null
          else result = this.matches(reverse, this.doc.clipPos(Pos(result.from.line - 1)))
        } else {
          if (result.to.ch < this.doc.getLine(result.to.line).length) result.to = Pos(result.to.line, result.to.ch + 1)
          else if (result.to.line == this.doc.lastLine()) result = null
          else result = this.matches(reverse, Pos(result.to.line + 1, 0))
        }
      }

      if (result) {
        this.pos = result
        this.atOccurrence = true
        return this.pos.match || true
      } else {
        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)
        this.pos = {from: end, to: end}
        return this.atOccurrence = false
      }
    },

    from: function() {if (this.atOccurrence) return this.pos.from},
    to: function() {if (this.atOccurrence) return this.pos.to},

    replace: function(newText, origin) {
      if (!this.atOccurrence) return
      var lines = CodeMirror.splitLines(newText)
      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)
      this.pos.to = Pos(this.pos.from.line + lines.length - 1,
                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))
    }
  }

  CodeMirror.defineExtension("getSearchCursor", function(query, pos, caseFold) {
    return new SearchCursor(this.doc, query, pos, caseFold)
  })
  CodeMirror.defineDocExtension("getSearchCursor", function(query, pos, caseFold) {
    return new SearchCursor(this, query, pos, caseFold)
  })

  CodeMirror.defineExtension("selectMatches", function(query, caseFold) {
    var ranges = []
    var cur = this.getSearchCursor(query, this.getCursor("from"), caseFold)
    while (cur.findNext()) {
      if (CodeMirror.cmpPos(cur.to(), this.getCursor("to")) > 0) break
      ranges.push({anchor: cur.from(), head: cur.to()})
    }
    if (ranges.length)
      this.setSelections(ranges, 0)
  })
});


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE

(function(mod) {
  if (true) // CommonJS
    mod(__webpack_require__(32));
  else if (typeof define == "function" && define.amd) // AMD
    define(["../../lib/codemirror"], mod);
  else // Plain browser env
    mod(CodeMirror);
})(function(CodeMirror) {
  var ie_lt8 = /MSIE \d/.test(navigator.userAgent) &&
    (document.documentMode == null || document.documentMode < 8);

  var Pos = CodeMirror.Pos;

  var matching = {"(": ")>", ")": "(<", "[": "]>", "]": "[<", "{": "}>", "}": "{<"};

  function findMatchingBracket(cm, where, config) {
    var line = cm.getLineHandle(where.line), pos = where.ch - 1;
    var afterCursor = config && config.afterCursor
    if (afterCursor == null)
      afterCursor = /(^| )cm-fat-cursor($| )/.test(cm.getWrapperElement().className)

    // A cursor is defined as between two characters, but in in vim command mode
    // (i.e. not insert mode), the cursor is visually represented as a
    // highlighted box on top of the 2nd character. Otherwise, we allow matches
    // from before or after the cursor.
    var match = (!afterCursor && pos >= 0 && matching[line.text.charAt(pos)]) ||
        matching[line.text.charAt(++pos)];
    if (!match) return null;
    var dir = match.charAt(1) == ">" ? 1 : -1;
    if (config && config.strict && (dir > 0) != (pos == where.ch)) return null;
    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));

    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);
    if (found == null) return null;
    return {from: Pos(where.line, pos), to: found && found.pos,
            match: found && found.ch == match.charAt(0), forward: dir > 0};
  }

  // bracketRegex is used to specify which type of bracket to scan
  // should be a regexp, e.g. /[[\]]/
  //
  // Note: If "where" is on an open bracket, then this bracket is ignored.
  //
  // Returns false when no bracket was found, null when it reached
  // maxScanLines and gave up
  function scanForBracket(cm, where, dir, style, config) {
    var maxScanLen = (config && config.maxScanLineLength) || 10000;
    var maxScanLines = (config && config.maxScanLines) || 1000;

    var stack = [];
    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\]]/;
    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)
                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);
    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {
      var line = cm.getLine(lineNo);
      if (!line) continue;
      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;
      if (line.length > maxScanLen) continue;
      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);
      for (; pos != end; pos += dir) {
        var ch = line.charAt(pos);
        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {
          var match = matching[ch];
          if ((match.charAt(1) == ">") == (dir > 0)) stack.push(ch);
          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};
          else stack.pop();
        }
      }
    }
    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;
  }

  function matchBrackets(cm, autoclear, config) {
    // Disable brace matching in long lines, since it'll cause hugely slow updates
    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;
    var marks = [], ranges = cm.listSelections();
    for (var i = 0; i < ranges.length; i++) {
      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, config);
      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {
        var style = match.match ? "CodeMirror-matchingbracket" : "CodeMirror-nonmatchingbracket";
        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));
        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)
          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));
      }
    }

    if (marks.length) {
      // Kludge to work around the IE bug from issue #1193, where text
      // input stops going to the textare whever this fires.
      if (ie_lt8 && cm.state.focused) cm.focus();

      var clear = function() {
        cm.operation(function() {
          for (var i = 0; i < marks.length; i++) marks[i].clear();
        });
      };
      if (autoclear) setTimeout(clear, 800);
      else return clear;
    }
  }

  function doMatchBrackets(cm) {
    cm.operation(function() {
      if (cm.state.matchBrackets.currentlyHighlighted) {
        cm.state.matchBrackets.currentlyHighlighted();
        cm.state.matchBrackets.currentlyHighlighted = null;
      }
      cm.state.matchBrackets.currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);
    });
  }

  CodeMirror.defineOption("matchBrackets", false, function(cm, val, old) {
    if (old && old != CodeMirror.Init) {
      cm.off("cursorActivity", doMatchBrackets);
      if (cm.state.matchBrackets && cm.state.matchBrackets.currentlyHighlighted) {
        cm.state.matchBrackets.currentlyHighlighted();
        cm.state.matchBrackets.currentlyHighlighted = null;
      }
    }
    if (val) {
      cm.state.matchBrackets = typeof val == "object" ? val : {};
      cm.on("cursorActivity", doMatchBrackets);
    }
  });

  CodeMirror.defineExtension("matchBrackets", function() {matchBrackets(this, true);});
  CodeMirror.defineExtension("findMatchingBracket", function(pos, config, oldConfig){
    // Backwards-compatibility kludge
    if (oldConfig || typeof config == "boolean") {
      if (!oldConfig) {
        config = config ? {strict: true} : null
      } else {
        oldConfig.strict = config
        config = oldConfig
      }
    }
    return findMatchingBracket(this, pos, config)
  });
  CodeMirror.defineExtension("scanForBracket", function(pos, dir, style, config){
    return scanForBracket(this, pos, dir, style, config);
  });
});


/***/ }),
/* 388 */,
/* 389 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jszip__ = __webpack_require__(226);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jszip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_jszip__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_openpgp__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_openpgp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_openpgp__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_debug__);
/**
 * @module components/importExport/Import
 */








const log = __WEBPACK_IMPORTED_MODULE_5_debug___default()('lav:components/importExport/Import');

/**
 * Import data to Encryptic from a ZIP archive.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Import extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Radio channel (components/importExport).
     *
     * @prop {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('components/importExport');
    }

    /**
     * Current user's profile data.
     *
     * @prop {Object}
     */
    get user() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'getUser');
    }

    /**
     * Available profiles.
     *
     * @prop {Object} Backbone collection
     */
    get profiles() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'findProfiles');
    }

    /**
     * An array of collection names which are allowed to be imported.
     *
     * @prop {Array}
     */
    get collections() {
        return ['notebooks', 'tags', 'configs', 'users', 'files', 'profiles'];
    }

    init() {
        // eslint-disable-line complexity
        if (this.options.files && this.options.files.length) {
            if (this.isZipFile()) {
                return this.importData();
            } else if (this.isKey()) {
                return this.importKey();
            }
        }

        // Do nothing if there aren't any ZIP archives
        return Promise.resolve();
    }

    /**
     * If import is successful, trigger "completed" and reload the page after 800ms.
     */
    onSuccess() {
        const msg = !this.isOldBackup ? 'Import success' : 'Old backup import success';
        this.channel.trigger('completed', { msg });

        // Reload the page only if it isn't a backup from an older version
        if (!this.isOldBackup) {
            window.setTimeout(() => document.location.reload(), 800);
        }
    }

    /**
     * If import failed, trigger "completed" event with the error.
     *
     * @param {String} error
     */
    onError(error) {
        log('error', error);
        this.channel.trigger('completed', { error, msg: 'Import error' });
    }

    /**
     * Check if a file is a ZIP archive.
     *
     * @param {Object} file=this.options.files[0]
     * @param {String} file.type
     * @param {String} file.name
     * @returns {Boolean}
     */
    isZipFile(file = this.options.files[0]) {
        return file.type === 'application/zip' || __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.last(file.name.split('.')) === 'zip';
    }

    /**
     * Check if a file is a private key.
     *
     * @param {Object} file=this.options.files[0]
     * @param {String} file.type
     * @param {String} file.name
     * @param {String} file.size
     * @returns {Boolean}
     */
    isKey(file = this.options.files[0]) {
        return file.type === 'text/plain' && __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.last(file.name.split('.')) === 'asc' && file.size >= 2500;
    }

    /**
     * Import everything from a ZIP file.
     *
     * @returns {Promise}
     */
    importData() {
        // Trigger an event that import proccess started
        this.channel.trigger('started');

        return this.readZip(this.options.files[0]).then(zip => this.import(zip)).then(() => this.onSuccess()).catch(err => this.onError(err));
    }

    /**
     * Import a private key.
     *
     * @returns {Promise}
     */
    importKey() {
        // Trigger an event that import proccess started
        this.channel.trigger('started');

        return this.getPrivateKey(this.options.files[0]).then(res => {
            if (!res || !res.key || !res.username) {
                return null;
            }

            return this.importProfileFromKey(res);
        }).then(res => {
            if (!res) {
                return this.onError('Could not recover your profile from the key!');
            }

            this.onSuccess();
        }).catch(err => this.onError(err));
    }

    /**
     * Read the armored key and check it.
     *
     * @param {Object} keyFile
     * @returns {Promise} - returns null if the key isn't compatible
     */
    getPrivateKey(keyFile) {
        return this.readText(keyFile).then(armorKey => {
            const { keys, err } = __WEBPACK_IMPORTED_MODULE_4_openpgp__["key"].readArmored(armorKey);
            if (err) {
                throw new Error(err);
            }

            // Don't import if it's just a public key
            if (keys[0].isPublic()) {
                return null;
            }

            return {
                key: keys[0],
                username: this.getUsernameFromKey(keys[0])
            };
        });
    }

    /**
     * Get the username from the private key.
     *
     * @param {Object} key
     * @returns {String} returns null if username doesn't exist
     */
    getUsernameFromKey(key) {
        // eslint-disable-line
        let username = this.options.username;

        // If username wasn't provided, try to get it from the private key
        if (!username || !username.length) {
            username = key.users[0].userId.userid.split('<')[0].trim();
        }

        if (!username || !username.length) {
            log('The key does not contain the username!');
            return null;
        } else if (this.profiles && this.profiles.get({ username })) {
            log(`Profile ${username} already exists!`);
            return null;
        }

        return username;
    }

    /**
     * Import a user's profile from an OpenPGP private key.
     *
     * @param {Object} key
     * @returns {Promise} resolves with boolean
     */
    importProfileFromKey({ key, username }) {
        // First, change the signaling server
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('models/Signal', 'changeServer', {
            signal: this.options.signalServer
        });

        // Try to get the user from signaling server
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('models/Signal', 'findUser', { username }).then(user => {
            // The user does not exist on the server or fingerprints don't match
            if (__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.isEmpty(user) || user.fingerprint !== key.primaryKey.fingerprint) {
                return false;
            }

            // Save the profile
            return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'createProfile', {
                username,
                privateKey: key.armor(),
                publicKey: key.toPublic().armor()
            }).then(() => true);
        });
    }

    /**
     * Read a text file.
     *
     * @param {Object} file
     * @returns {Promise} resolves with string
     */
    readText(file) {
        return new Promise(resolve => {
            const reader = new FileReader();
            reader.onload = e => resolve(e.target.result);
            reader.readAsText(file);
        });
    }

    /**
     * Read a ZIP archive.
     *
     * @param {Object} file
     * @returns {Promise} resolves with JSZip instance
     */
    readZip(file) {
        const reader = new FileReader();
        this.zip = new __WEBPACK_IMPORTED_MODULE_3_jszip___default.a();

        return new Promise((resolve, reject) => {
            reader.onload = evt => {
                this.zip.loadAsync(evt.target.result).then(() => resolve(this.zip)).catch(err => reject(err));
            };

            reader.readAsArrayBuffer(file);
        });
    }

    /**
     * Import files from a ZIP archive.
     *
     * @param {Object} zip
     * @returns {Promise}
     */
    import(zip) {
        if (!__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.isUndefined(zip.files['Encryptic-backups/notes-db/configs.json'])) {
            this.isOldBackup = true;
            return this.importCollections(zip);
        }

        return this.importProfile(zip).then(() => this.importCollections(zip));
    }

    /**
     * Import a user's profile data.
     *
     * @param {Object} zip
     * @returns {Promise}
     */
    importProfile(zip) {
        const file = zip.files['Encryptic-backups/profiles.json'];

        if (!file && !this.user) {
            return Promise.reject('You need to create a profile first!');
        }

        return zip.file('Encryptic-backups/profiles.json').async('string').then(res => {
            this.profile = JSON.parse(res)[0];

            if (this.user && this.profile.username !== this.user.get('username')) {
                return Promise.reject('You cannot import another users backup!');
            }

            return this.importCollection({ data: [this.profile], type: 'profiles' });
        }).then(() => __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'setUser', this.profile));
    }

    /**
     * Import all collections from the backup.
     *
     * @param {Object} zip
     * @returns {Promise}
     */
    importCollections(zip) {
        const promises = [];
        let configFile;

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(zip.files, file => {
            // Ignore directories and non JSON files
            if (!this.isCollectionFile(file)) {
                return;
            }

            if (file.name.indexOf('configs.json') === -1) {
                promises.push(this.readFile(zip, file));
            } else {
                configFile = file;
            }
        });

        // Import configs at the end to avoid encryption errors
        return Promise.all(promises).then(() => this.readFile(zip, configFile));
    }

    /**
     * Return true if it's a file that contains collection data.
     *
     * @param {Object} file
     * @returns {Boolean}
     */
    isCollectionFile(file) {
        return !file.dir && __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.last(file.name.split('.')) === 'json' && file.name.indexOf('profiles.json') === -1;
    }

    /**
     * Read a file from the ZIP archive.
     *
     * @param {Object} zip
     * @param {Object} file
     * @returns {Promise}
     */
    readFile(zip, file) {
        return zip.file(file.name).async('string').then(res => {
            const path = file.name.split('/');
            const profileId = path[1] !== 'notes-db' ? this.profile.username : path[1];
            const data = JSON.parse(res);

            if (path[2] === 'notes') {
                return this.importNote({ zip, profileId, data, name: file.name });
            } else if (path[2] === 'files') {
                return this.importFile({ profileId, data });
            } else {
                const type = path[2].split('.json')[0];
                return this.importCollection({ profileId, data, type });
            }
        });
    }

    /**
     * Import a note to database.
     *
     * @param {Object} options
     * @param {Object} options.zip - JSZip instance
     * @param {String} options.name - file name of a note
     * @param {String} options.profileId
     * @param {Object} options.data
     * @returns {Promise}
     */
    importNote(options) {
        const { data, profileId } = options;

        return this.readMarkdown(options).then(() => {
            return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Notes', 'saveModelObject', {
                data,
                profileId,
                dontValidate: true
            });
        });
    }

    /**
     * Read a note's content from Markdown file.
     *
     * @param {Object} data
     * @param {String} name
     * @param {Object} zip
     * @returns {Promise}
     */
    readMarkdown({ data, name, zip }) {
        if (data.encryptedData && data.encryptedData.length) {
            return Promise.resolve();
        }

        const mdName = name.replace(/\.json$/, '.md');
        return zip.file(mdName).async('string')
        // eslint-disable-next-line
        .then(content => data.content = content);
    }

    /**
     * Import a file attachment to database.
     *
     * @param {Object} options
     * @param {String} options.profileId
     * @param {Object} options.data
     * @returns {Promise}
     */
    importFile(options) {
        const { data, profileId } = options;
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Files', 'saveModelObject', {
            data,
            profileId
        });
    }

    /**
     * Import a collection to database.
     *
     * @param {Object} options
     * @param {String} options.type - collection name (notebooks, tags, configs...)
     * @param {String} options.profileId
     * @param {Object} options.data
     * @returns {Promise}
     */
    importCollection(options) {
        // Do nothing if the collection name is incorrect
        if (__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.indexOf(this.collections, options.type) === -1) {
            return Promise.resolve();
        }

        const type = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.capitalize(options.type);

        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request(`collections/${type}`, 'saveFromArray', {
            profileId: options.profileId,
            values: options.data
        });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Import;


/***/ }),
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jquery__);
/**
 * @module behaviors/NavModel
 */



/**
 * Handle navigation between models.  Renamed to NavModel to increase
 * distinction of modEL vs modAl in behaviors directory.
 *
 * @class
 * @extends Marionette.Behavior
 * @license MPL-2.0
 */
class NavModel extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Behavior {

    ui() {
        return {
            listGroup: '.list-group-item:first'
        };
    }

    modelEvents() {
        return {
            focus: 'onFocus'
        };
    }

    /**
     * The model is active (under focus).
     */
    onFocus() {
        __WEBPACK_IMPORTED_MODULE_1_jquery___default()('.list-group-item.active').removeClass('active');
        this.ui.listGroup.addClass('active');
        this.view.trigger('scroll:top', { offset: this.ui.listGroup.offset() });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = NavModel;


/***/ }),
/* 421 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__behaviors_NavModel__ = __webpack_require__(420);
/**
 * @module components/notebooks/list/views/ItemView
 */





/**
 * Item view. Views like Notebook.js and Tag.js extend from this.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class ItemView extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get className() {
        return 'list--group list-group';
    }

    events() {
        return {
            'click .remove-link': 'removeModel'
        };
    }

    /**
     * Behaviors.
     *
     * @see module:behaviors/NavModel
     * @returns {Array}
     */
    behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_3__behaviors_NavModel__["a" /* default */]];
    }

    /**
     * Return options and model attributes.
     *
     * @returns {Object}
     */
    serializeData() {
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({}, this.options, this.model.attributes);
    }

    /**
     * Remove a model.
     */
    removeModel() {
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/notebooks', 'remove', { model: this.model });
        return false;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = ItemView;


/***/ }),
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_polyfill__ = __webpack_require__(250);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_polyfill___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_polyfill__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_fastclick__ = __webpack_require__(285);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_fastclick___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_fastclick__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hammerjs__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hammerjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_hammerjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_es6_promise__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_es6_promise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_es6_promise__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_bootstrap__ = __webpack_require__(286);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_bootstrap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_bootstrap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__App__ = __webpack_require__(660);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__workers_Delegator__ = __webpack_require__(669);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_theme__ = __webpack_require__(671);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_Env__ = __webpack_require__(672);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_underscore__ = __webpack_require__(673);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_I18n__ = __webpack_require__(686);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils_Url__ = __webpack_require__(690);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__utils_Title__ = __webpack_require__(691);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__utils_Keybindings__ = __webpack_require__(692);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__utils_Notify__ = __webpack_require__(694);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__utils_electronListener__ = __webpack_require__(695);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__modules_main__ = __webpack_require__(696);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__components_setup_main__ = __webpack_require__(721);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__components_encryption_main__ = __webpack_require__(732);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__components_confirm_Controller__ = __webpack_require__(822);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__components_navbar_Controller__ = __webpack_require__(825);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__components_help_controller__ = __webpack_require__(829);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__components_markdown_main__ = __webpack_require__(836);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__components_codemirror_main__ = __webpack_require__(1169);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__components_linkDialog_main__ = __webpack_require__(1182);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__components_fileDialog_main__ = __webpack_require__(1189);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__components_fuzzySearch_main__ = __webpack_require__(1194);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__components_electronSearch_Controller__ = __webpack_require__(1200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__components_importExport_main__ = __webpack_require__(1203);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__components_share_Controller__ = __webpack_require__(1252);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__components_dropbox_main__ = __webpack_require__(1259);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__components_notes_Router__ = __webpack_require__(1276);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__components_notebooks_Router__ = __webpack_require__(1297);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__components_settings_Router__ = __webpack_require__(1315);
/**
 * @file main.js - load dependencies and start the app.
 * @license MPL-2.0
 */







// The core app



// Utils










// Collections


// P2P differential synchronization
// import './models/diffsync/main';

// Components














// import './components/remotestorage/main';

// Router based components




const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:main');

// Enable promise polyfill
__WEBPACK_IMPORTED_MODULE_3_es6_promise___default.a.polyfill();

document.addEventListener('DOMContentLoaded', () => {
    // Enable debugging
    __WEBPACK_IMPORTED_MODULE_4_debug___default.a.enable('lav*');
    log('DOM is ready');

    // Remove 300ms delay
    __WEBPACK_IMPORTED_MODULE_1_fastclick___default.a.attach(document.body);

    // Enable text selection
    delete __WEBPACK_IMPORTED_MODULE_2_hammerjs___default.a.defaults.cssProps.userSelect;

    // Start the app
    const app = new __WEBPACK_IMPORTED_MODULE_6__App__["a" /* default */]();
    app.lazyStart();
});

/***/ }),
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */,
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */,
/* 488 */,
/* 489 */,
/* 490 */,
/* 491 */,
/* 492 */,
/* 493 */,
/* 494 */,
/* 495 */,
/* 496 */,
/* 497 */,
/* 498 */,
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */,
/* 534 */,
/* 535 */,
/* 536 */,
/* 537 */,
/* 538 */,
/* 539 */,
/* 540 */,
/* 541 */,
/* 542 */,
/* 543 */,
/* 544 */,
/* 545 */,
/* 546 */,
/* 547 */,
/* 548 */,
/* 549 */,
/* 550 */,
/* 551 */,
/* 552 */,
/* 553 */,
/* 554 */,
/* 555 */,
/* 556 */,
/* 557 */,
/* 558 */,
/* 559 */,
/* 560 */,
/* 561 */,
/* 562 */,
/* 563 */,
/* 564 */,
/* 565 */,
/* 566 */,
/* 567 */,
/* 568 */,
/* 569 */,
/* 570 */,
/* 571 */,
/* 572 */,
/* 573 */,
/* 574 */,
/* 575 */,
/* 576 */,
/* 577 */,
/* 578 */,
/* 579 */,
/* 580 */,
/* 581 */,
/* 582 */,
/* 583 */,
/* 584 */,
/* 585 */,
/* 586 */,
/* 587 */,
/* 588 */,
/* 589 */,
/* 590 */,
/* 591 */,
/* 592 */,
/* 593 */,
/* 594 */,
/* 595 */,
/* 596 */,
/* 597 */,
/* 598 */,
/* 599 */,
/* 600 */,
/* 601 */,
/* 602 */,
/* 603 */,
/* 604 */,
/* 605 */,
/* 606 */,
/* 607 */,
/* 608 */,
/* 609 */,
/* 610 */,
/* 611 */,
/* 612 */,
/* 613 */,
/* 614 */,
/* 615 */,
/* 616 */,
/* 617 */,
/* 618 */,
/* 619 */,
/* 620 */,
/* 621 */,
/* 622 */,
/* 623 */,
/* 624 */,
/* 625 */,
/* 626 */,
/* 627 */,
/* 628 */,
/* 629 */,
/* 630 */,
/* 631 */,
/* 632 */,
/* 633 */,
/* 634 */,
/* 635 */,
/* 636 */,
/* 637 */,
/* 638 */,
/* 639 */,
/* 640 */,
/* 641 */,
/* 642 */,
/* 643 */,
/* 644 */,
/* 645 */,
/* 646 */,
/* 647 */,
/* 648 */,
/* 649 */,
/* 650 */,
/* 651 */,
/* 652 */,
/* 653 */,
/* 654 */,
/* 655 */,
/* 656 */,
/* 657 */,
/* 658 */,
/* 659 */,
/* 660 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_Initializer__ = __webpack_require__(662);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__views_Layout__ = __webpack_require__(663);
/**
 * @module App
 */









const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:App');

/**
 * The main app (core).
 *
 * @class
 * @extends Application
 * @license MPL-2.0
 */
class App extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__["Application"] {

  get channelName() {
    return 'App';
  }

  get channel() {
    return this.getChannel();
  }

  /**
   * The main layout view.
   *
   * @see module:views/Layout
   * @returns {Object}
   */
  get layout() {
    return new __WEBPACK_IMPORTED_MODULE_6__views_Layout__["a" /* default */]();
  }

  /**
   * It's called after instantiating the class.
   *
   * @fires App#init
   */
  initialize() {
    log('initialized');

    // Start listening to initialize events
    new __WEBPACK_IMPORTED_MODULE_5__utils_Initializer__["a" /* default */]();

    /**
     * App was initialized but hasn't started yet.
     *
     * @event App#init
     */
    this.channel.trigger('init');

    // Render the layout
    this.layout.render();
  }

  /**
   * Start routers and notify other components that the app has started.
   *
   * @fires App#start
   */
  onStart() {
    log('starting the core...');
    __WEBPACK_IMPORTED_MODULE_1_backbone__["history"].start({ pushStart: false });

    /**
     * App has started.
     *
     * @event App#start
     */
    this.channel.trigger('start');

    // Remove loading class
    __WEBPACK_IMPORTED_MODULE_3_jquery___default()('.-loading').removeClass('-loading');
  }

  /**
   * Lazy start the app.
   * Wait until other components complete their tasks, then start the app.
   * This method is used for fetching settings and doing other things
   * before starting the app.
   *
   * @listens utils/Initializer#App:core - initialize core components
   * @listens utils/Initializer#App:utils - initialize utils
   * @listens utils/Initializer#App:components - init other components
   * @listens utils/Initializer#App:auth - authentication
   * @listens utils/Initializer#App:checks - init some checks before starting the app
   * @returns {Promise}
   * @todo handle errors
   */
  lazyStart() {
    return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Initializer', 'start', {
      names: ['App:core', 'App:utils', 'App:components', 'App:auth', 'App:last']
    }).then(() => this.start()).catch(err => log('error', err));
  }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = App;


/***/ }),
/* 661 */,
/* 662 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_debug__);
/**
 * @module utils/Initializer
 */




const log = __WEBPACK_IMPORTED_MODULE_2_debug___default()('lav:utils/Initializer');

/**
 * Add and execute asynchronous callbacks which can be
 * started later by requesting them with Backbone.Radio.
 *
 * @example
 * // Add a new callback to an array of callbacks.
 * // It can be found later by the key app:before
 * Radio.request('utils/Initializer', 'add', {
 *     name    : 'app:before',
 *     callback: asyncCallback,
 * });
 * @example
 * // Start the previously added callbacks.
 * // In this example it executes all callbacks with the key App:before
 * Radio.request('utils/Initializer', 'start', {
 *     inits  : ['App:before'],
 *     options: {},
 * );
 * @license MPL-2.0
 */
class Initializer {

    /**
     * Channel to which it replies and triggers events.
     *
     * @returns {Object} Backbone.Radio object
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('utils/Initializer');
    }

    /**
     * @listens utils/Initializer#add - schedule a callback
     * @listens utils/Initializer#start - execute scheduled callbacks
     * @fires utils/Initializer#init
     */
    constructor() {
        this._inits = {};

        // Start replying to requests
        this.channel.reply({
            add: this.add,
            start: this.start
        }, this);

        /**
         * Initializer is ready to schedule callbacks.
         *
         * @event utils/Initializer#init
         */
        this.channel.trigger('init');
    }

    /**
     * Schedule a callback.
     * i.e. attach to an array of callbacks.
     *
     * @param {Object} init - object with init information
     * @param {String} init.name - a key of the initializer
     * to which the callback needs to be attached.
     * @param {Function} init.callback - a function-callback which
     * needs to be attached to an initializer.
     */
    add(init) {
        this._inits[init.name] = this._inits[init.name] || [];
        this._inits[init.name].push(init.callback);
        log(`added a callback to ${init.name} array`);
    }

    /**
     * Start an initializer(s).
     * i.e. execute all scheduled callbacks with a key name/s.
     *
     * @param {(String|Object)} data - key(s) of the initializer or object
     * that contains keys of initializers and options
     * @param {Array} data.names - array with keys of initializers
     * which should be started
     * @param {Object} data.options - options for callbacks
     * @returns {Promise} it will be resolved once all callbacks complete their tasks
     */
    start(data) {
        const dataObj = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.isObject(data) ? data : { names: data.split(' ') };
        let promise = Promise.resolve();

        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(dataObj.names, name => {
            log(`starting ${name}`);
            promise = promise.then(() => this.startInit(name, data.options || {}));
        });

        return promise;
    }

    /**
     * Execute all callbacks of a particular initializer.
     * i.e. callbacks that are saved in this._inits[name].
     *
     * @param {String} name - name of an initializer
     * @param {Object} options
     * @returns {Promise} it will be resolved once all callbacks complete their tasks
     */
    startInit(name, options) {
        let promise = Promise.resolve();

        // Get all callbacks by key name and execute
        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(this._inits[name] || [], fnc => {
            promise = promise.then(() => fnc(options));
        });

        return promise;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Initializer;


/***/ }),
/* 663 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Loader__ = __webpack_require__(664);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Modal__ = __webpack_require__(666);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Brand__ = __webpack_require__(667);
/**
 * @module views/Layout
 */










const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:views/Layout');

/**
 * Layout view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Layout extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(668);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * Radio channel.
     *
     * @returns {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.channel('Layout');
    }

    /**
     * el.
     *
     * @returns {String} #wrapper
     */
    el() {
        return '#wrapper';
    }

    /**
     * Regions.
     *
     * @returns {Object}
     */
    regions() {
        return {
            sidebarNavbar: '#sidebar--navbar',
            sidebar: '#sidebar--content',
            content: '#content',
            brand: { regionClass: __WEBPACK_IMPORTED_MODULE_7__Brand__["a" /* default */], el: '#layout--brand' },
            modal: { regionClass: __WEBPACK_IMPORTED_MODULE_6__Modal__["a" /* default */], el: '#layout--modal' }
        };
    }

    /**
     * Initialize.
     *
     * @listens Layout#show
     * @listens Layout#empty
     * @listens Layout#add
     */
    initialize() {
        this.$body = __WEBPACK_IMPORTED_MODULE_2_jquery___default()('body');

        // Start replying to requests
        log('initialized');
        this.channel.reply({
            show: this.show,
            empty: this.empty,
            add: this.add,
            toggle: this.toggle,
            toggleContent: this.toggleContent,
            showLoader: this.showLoader
        }, this);
    }

    /**
     * Show a view in a region.
     *
     * @param {Object} options
     * @param {String} options.region
     * @param {Object} options.view
     */
    show(options) {
        log(`rendering ${options.region} region`);
        this.showChildView(options.region, options.view);
    }

    /**
     * Empty a region.
     *
     * @param {Object} options
     * @param {String} options.region
     */
    empty(options) {
        this.getRegion(options.region).empty();
    }

    /**
     * Add a new region.
     *
     * @param {Object} options
     * @param {String} options.region - the name of a region
     * @param {String|Boolean} [options.html] - if it's provided, it will create
     * a new HTML element and append it to DOM
     * @param {Object} [options.regionOptions]
     */
    add(options) {
        if (this.getRegion(options.region)) {
            return false;
        }

        // Create a new HTML element
        if (options.html) {
            this.createRegionElement(options);
        }

        this.addRegion(options.region, options.regionOptions || `#${options.region}`);
    }

    /**
     * Create HTML element for a region.
     *
     * @param {Object} options
     */
    createRegionElement(options) {
        let html = options.html;

        if (typeof html !== 'string') {
            html = `<div id="${options.region}"/>`;
        }

        this.$el.append(html);
    }

    /**
     * Show/hide a region.
     *
     * @param {Object} options
     * @param {String} options.region - the name of a region
     */
    toggle(options) {
        this.getRegion(options.region).$el.toggleClass('hidden');
    }

    /**
     * Show either sidebar or content region.
     *
     * @param {Object} options
     * @param {Boolean} options.visible - true if content region should be visible
     */
    toggleContent(options) {
        this.getRegion('sidebar').$el.toggleClass('hidden-xs', options.visible);
        this.getRegion('content').$el.toggleClass('hidden-xs', !options.visible);
    }

    /**
     * Render the loader view in a region.
     *
     * @param {Object} options
     * @param {String} options.region
     */
    showLoader(options) {
        this.show({
            region: options.region,
            view: new __WEBPACK_IMPORTED_MODULE_5__Loader__["a" /* default */]()
        });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Layout;


/***/ }),
/* 664 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module views/Loader
 */



/**
 * A view that shows a spining icon.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Loader extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

  get template() {
    const tmpl = __webpack_require__(665);
    return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
  }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Loader;


/***/ }),
/* 665 */
/***/ (function(module, exports) {

module.exports = "<p class=\"text-center loader\" style=\"font-size: 1.4em;padding-top: 20px\">\n    <i class=\"icon icon-arrows animate-spin\"></i>\n</p>\n"

/***/ }),
/* 666 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jquery__);
/**
 * @module views/Modal
 */




/**
 * Modal region.
 *
 * @class
 * @extends Marionette.Region
 * @license MPL-2.0
 */
class Modal extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Region {

    /**
     * Radio channel.
     *
     * @prop {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('views/Modal');
    }

    /**
     * Show the modal window.
     */
    onShow() {
        this.currentView.$el.modal({
            show: true,
            backdrop: 'static',
            keyboard: true
        });

        this.currentView.$el.on('shown.bs.modal', () => this.onModalShown());
        this.currentView.$el.on('hidden.bs.modal', () => this.onModalHidden());
        this.channel.trigger('shown');
    }

    /**
     * Trigger "shown:modal" event after showing the modal window.
     */
    onModalShown() {
        this.currentView.triggerMethod('shown:modal');
    }

    /**
     * Empty the region immediately after closing the modal window.
     */
    onModalHidden() {
        this.empty();
    }

    /**
     * Hide the modal window before emptying the region.
     */
    onBeforeEmpty() {
        this.currentView.$el.off(['hidden.bs.modal', 'shown.bs.modal']);
        this.currentView.$el.modal('hide');
        this.removeBackdrop();
        this.channel.trigger('hidden');
    }

    /**
     * Remove modal backdrop if it is still there.
     */
    removeBackdrop() {
        const $backdrop = __WEBPACK_IMPORTED_MODULE_2_jquery___default()('.modal-backdrop');

        if ($backdrop.length) {
            $backdrop.remove();
        }
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Modal;


/***/ }),
/* 667 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/**
 * @module views/Brand
 */


/**
 * The region that shows its content on fullscreen and on green background.
 *
 * @class
 * @extends Marionette.Region
 * @license MPL-2.0
 */
class Brand extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Region {

  /**
   * Show the region with animation.
   */
  onShow() {
    this.$el.slideDown('fast');
  }

  /**
   * Hide the region with animation.
   */
  onEmpty() {
    this.$el.slideUp('fast');
  }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Brand;


/***/ }),
/* 668 */
/***/ (function(module, exports) {

module.exports = "<div id=\"sidebar\" class=\"layout--sidebar\">\n    <div id=\"sidebar--navbar\" class=\"layout--navbar\"></div>\n    <div id=\"sidebar--content\" class=\"layout--body -scroll\"></div>\n</div>\n\n<div id=\"content\" class=\"layout--content hidden-xs\"></div>\n\n<div id=\"layout--backdrop\" class=\"layout--backdrop\"></div>\n\n<div id=\"layout--brand\" class=\"layout--brand -loading\">\n    <div id=\"loading--circle\" class=\"loading--circle -loading\">\n        <div></div>\n    </div>\n</div>\n\n<div id=\"layout--modal\"></div>\n"

/***/ }),
/* 669 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Modernizr) {/* unused harmony export initializer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_debug__);
/**
 * @module workers/Delegator
 */




const log = __WEBPACK_IMPORTED_MODULE_2_debug___default()('lav:workers/Delegator');

/**
 * Delegate events, methods to WebWorkers.
 *
 * @class
 * @license MPL-2.0
 */
class Delegator {

    /**
     * Radio channel for events/requests.
     *
     * @prop {Object} Backbone Radio object
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.channel('workers/Delegator');
    }

    /**
     * WebWorker file.
     */
    get WebWorker() {
        return __webpack_require__(670);
    }

    /**
     * @param {Object} options = {}
     * @listens worker/Delegator#execute
     */
    constructor(options = {}) {
        log('initialized');

        this.options = options;
        this.promises = [];

        // Start listening to requests
        this.channel.reply({
            execute: this.delegateMethod
        }, this);

        this.channel.trigger('init');
    }

    /**
     * Delegate a method of a class/object to WebWorkers.
     *
     * @param {Object} data
     * @param {Array} data.args - arguments for a method
     * @param {String} data.method - method which should be executed
     * @param {String} data.file - relative path to class/object where method
     * is located
     * @returns {Promise}
     */
    delegateMethod(data) {
        log(`delegating method '${data.method}' to workers`);
        return this.postMessage('execute', data);
    }

    /**
     * Post a message to a WebWorker.
     *
     * @param {String} action
     * @param {Object} data
     * @returns {Promise}
     * @todo use transferable objects for files/images or large data (collection)
     */
    postMessage(action, data) {
        // Get the least loaded worker
        const worker = this.getWorker(data);

        // Increase the number of unresolved promises
        worker.unresolved += 1;

        return new Promise((resolve, reject) => {
            this.promises.push({ resolve, reject });

            // Post the message to the worker
            const promiseId = this.promises.length - 1;
            const sdata = { action, promiseId, data };
            log('sending data:', sdata);
            worker.instance.postMessage(sdata);
        });
    }

    /**
     * Spawn WebWorkers.
     */
    spawnWorkers() {
        // Assume there is only 1 core if the API isn't available
        const cpus = window.navigator.hardwareConcurrency || 1;
        this.workers = [];

        // Spawn a Webworker for each CPU core
        log(`spawning ${cpus} workers`);
        for (let i = 0; i < cpus; i++) {
            this.workers.push(this.spawnWorker());
        }
    }

    /**
     * Spawn a new WebWorker.
     *
     * @listens Worker#message
     * @listens Worker#error
     * @returns {Object} worker instance
     */
    spawnWorker() {
        /**
         * @namespace
         * @param {Object} instance - WebWorker object
         * @param {Boolean} unresolved - number of unresolved worker promises
         */
        const worker = {
            instance: new this.WebWorker(),
            unresolved: 0
        };

        /**
         * @event Worker#message
         * @param {Event} evt
         */
        worker.instance.addEventListener('message', evt => this.onMessage(worker, evt));

        /**
         * @event Worker#error
         * @param {Error} err
         * @todo handle errors
         */
        worker.instance.addEventListener('error', err => log('error', err));

        return worker;
    }

    /**
     * Handle a message from a worker.
     *
     * @param {Object} worker - a webworker instance
     * @param {Event} evt
     */
    onMessage(worker, evt) {
        const msg = evt.data;
        log('delegator message', msg);

        switch (msg.action) {
            case 'resolve':
                this.onPromise(worker, msg);
                break;

            case 'reject':
                this.onPromise(worker, msg);
                break;

            default:
                log('unhandled message from a worker', msg);
        }
    }

    /**
     * Resolve/reject a promise.
     *
     * @param {Object} worker - Worker instance
     * @param {Object} msg - Message posted by a worker.
     */
    onPromise(worker, msg) {
        const promise = this.getPromise(msg.promiseId);

        // Resolve/reject a promise
        if (promise[msg.action]) {
            worker.unresolved -= 1; // eslint-disable-line
            promise[msg.action](msg.data);
            this.promises[msg.promiseId] = null;
        }
    }

    /**
     * Find and return the promise for a particular task.
     *
     * @param {String} id - id of the promise
     * @returns {Promise}
     */
    getPromise(id) {
        const promise = this.promises[id];

        if (!promise) {
            throw new Error(`Worker promise with #${id} does not exist`);
        }

        return promise;
    }

    /**
     * Return the least loaded WebWorker.
     *
     * @param {Object} data={}
     * @returns {Object} WebWorker instance
     */
    getWorker(data = {}) {
        /*
         * Use the first worker if:
         * 1. There is only one worker;
         * 2. It's an indexedDB operation (because it allows to have only
         * one instance)
         */
        if (this.workers.length === 1 || data.file === 'components/Db') {
            return this.workers[0];
        }

        // Try to find a worker that isn't in use
        let worker = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.findWhere(this.workers, { unresolved: 0 });

        // Or use the least loaded worker
        if (!worker) {
            worker = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.sortBy(this.workers, worker => {
                return worker.unresolved;
            })[0];
        }

        return worker;
    }

}
/* unused harmony export default */


/**
 * Initializer callback.
 *
 * @returns {(Boolean|Object)} - delegator object if WebWorkers are
 * supported or false.
 */
const initializer = () => {
    /* global Modernizr */
    if (!Modernizr.webworkers) {
        return false;
    }

    return new Delegator().spawnWorkers();
};

__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', () => {
    __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('utils/Initializer', 'add', {
        name: 'App:core',
        callback: initializer
    });
});


/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(111)))

/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
  return new Worker(__webpack_require__.p + "a9d0330e8a27fd2711d5.worker.js");
};

/***/ }),
/* 671 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);


const theme = {
    /**
     * Apply a theme.
     *
     * @param {Object} data
     * @param {String} data.name - theme name
     */
    applyTheme(data = {}) {
        const theme = data.name || __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('collections/Configs', 'findConfig', {
            name: 'theme'
        });
        $('#lav--theme').attr('href', `styles/theme-${theme || 'default'}.css`);
    },

    /**
     * Initializer.
     */
    initializer() {
        __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.on('components/settings', 'changeTheme', theme.applyTheme);
        theme.applyTheme();
    }
};

__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', () => {
    __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('utils/Initializer', 'add', {
        name: 'App:utils',
        callback: theme.initializer
    });
});

/* unused harmony default export */ var _unused_webpack_default_export = (theme);
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(15)))

/***/ }),
/* 672 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Modernizr) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_device_detect_js__ = __webpack_require__(287);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_device_detect_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_device_detect_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/**
 * @module utils/Env
 */
/* global Modernizr */


// import Modernizr from 'modernizr';
// import deb from 'debug';

// const log = deb('lav:utils/Env');

/**
 * @class
 * @license MPL-2.0
 */
class Env {

    /**
     * @listens utils/Env#isMobile - returns true if it's a mobile device
     * @listens utils/Env#isWebkit - returns true if it's a webkit based device
     * @listens utils/Env#canUseWorkers - returns if the device supports web workers
     * @listens utils/Env#platform - returns platform of the user
     */
    constructor() {
        // Start replying to requests
        this.channel.reply({
            isMobile: this.isMobile,
            isWebkit: this.isWebkit,
            canUseWorkers: this.canUseWorkers,
            platform: this.platform
        });
    }

    /**
     * Return user agent.
     *
     * @returns {String} user agent
     */
    get ua() {
        return window.navigator.userAgent;
    }

    get channel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('utils/Env');
    }

    /**
     * Determine if it's a mobile or a tablet.
     *
     * @returns {Boolean}
     */
    get isMobile() {
        return __WEBPACK_IMPORTED_MODULE_0_device_detect_js___default.a.mobile() || __WEBPACK_IMPORTED_MODULE_0_device_detect_js___default.a.tablet();
    }

    /**
     * Determine if it's a webkit based device
     *
     * @returns {Boolean}
     */
    get isWebkit() {
        return 'WebkitAppearance' in document.documentElement.style;
    }

    /**
     * Return true if it's Palemon or Sailfish browser.
     *
     * @returns {Boolean}
     */
    get isPalemoonOrSailfish() {
        return (/(palemoon|sailfish)/i.test(this.ua)
        );
    }

    /**
     * Don't use Webworkers if:
     * 1. WebWorkers aren't available
     * 2. The app is started with file protocol
     * 3. It's a Webkit based browser
     * 4. It's Palemoon or Sailfish browser
     *
     * @returns {Boolean}
     */
    canUseWorkers() {
        const { protocol } = window.location;

        return Modernizr.webworkers && protocol !== 'file' && !this.isWebkit && !this.isPalemoonOrSailfish;
    }

    /**
     * Check the platform of the user and return it
     *
     * @returns {String}
     */
    getPlatform() {
        if (this.isMobile) {
            return 'mobile';
        } else if (window.requireNode) {
            return 'electron';
        }

        return 'browser';
    }

}
/* unused harmony export default */


__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.once('App', 'init', () => new Env());
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(111)))

/***/ }),
/* 673 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_i18next__ = __webpack_require__(141);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_xss__ = __webpack_require__(289);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_xss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_xss__);
/**
 * @module utils/underscore
 */




/**
 * Customize underscore template engine.
 *
 * @namespace templateSettings
 * @property {RegExp} escape - {{ myVar }} show escaped string
 * @property {RegExp} interpolate - {= myVar } - show string without escaping
 * @property {RegExp} evaluate - <% code %> - execute JS code
 */
__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.templateSettings = {
  escape: /\{\{([\s\S]+?)\}\}/g,
  interpolate: /\{=([\s\S]+?)\}/g,
  evaluate: /<%([\s\S]+?)%>/g
};

/**
 * Add some helper functions to Underscore.
 *
 * @license MPL-2.0
 */
__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.mixin({

  /**
   * I18next.
   *
   * @param {String} str
   * @returns {String}
   */
  i18n(...args) {
    return __WEBPACK_IMPORTED_MODULE_1_i18next__["default"].t(...args);
  },

  /**
   * Sanitize HTML to prevent XSS.
   *
   * @example
   * _.cleanXSS('<script>alert('yes');</script>Test'); // Result - 'test'
   * @example
   * _.cleanXSS('<script></script><b>Test</b>', true, true); // Result - 'test'
   * @param {String} str - text that needs to be sanitized
   * @param {Boolean} unescape - true if there are some escaped special characters
   * @param {Boolean} stripTags - true if you want to remove HTML tags from the text
   * @returns {String}
   */
  cleanXSS(text, unescape, stripTags) {
    let str = text;

    /*
     * Unescape the string 2 times because
     * data from Dropbox is always escaped + we escape them too.
     */
    if (unescape === true) {
      str = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.runTimes(__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.unescape, 2, str);
    }

    // Remove all HTML tags
    if (stripTags === true) {
      str = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.stripTags(str);
    }

    return __WEBPACK_IMPORTED_MODULE_2_xss___default()(str);
  },

  /**
   * Invoke the given function n times and return the last result.
   *
   * @example _.runTimes(_.unescape, 2, 'String');
   * @param {Function} fnc - a callback function
   * @param {Number} n - number of times the callback should run
   * @returns {} result of running a callback n times
   */
  runTimes(fnc, n, ...args) {
    const res = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.times(n, () => fnc.apply(null, args));
    return res[res.length - 1];
  },

  /**
   * Remove HTML tags from string.
   *
   * @example _.stripTags('<b>Bold</b>'); // Resulting text: 'Bold'
   * @param {String} str
   * @returns {String}
   */
  stripTags(str) {
    return str.replace(/<\/?[^>]+>/g, '');
  },

  /**
   * Convert the first letter of a string to uppercase.
   *
   * @param {String} str
   * @returns {String}
   */
  capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  },

  /**
   * Split string by 4 characters.
   *
   * @param {String} str
   * @returns {String}
   */
  splitBy4(str) {
    return str.match(/.{4}/g).join(' ');
  },

  /**
   * Count a number of words in text.
   *
   * @param {String} text
   * @returns {Number} number of words
   */
  countWords(text) {
    const matches = text.match(/([^\u0000-\u007F]|\w)+/g, '');
    return matches ? matches.length : 0;
  },

  /**
   * Select an option if it is active.
   *
   * @param {String} active
   * @param {String} item
   * @returns {String}
   */
  selectOption(active, item) {
    return active === item ? 'selected="selected" ' : '';
  }

});

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_underscore___default.a);

/***/ }),
/* 674 */,
/* 675 */,
/* 676 */,
/* 677 */,
/* 678 */,
/* 679 */,
/* 680 */,
/* 681 */,
/* 682 */,
/* 683 */,
/* 684 */,
/* 685 */,
/* 686 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export initialize */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_i18next__ = __webpack_require__(141);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_i18next_xhr_backend__ = __webpack_require__(294);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_i18next_xhr_backend___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_i18next_xhr_backend__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__locales_locales_json__ = __webpack_require__(295);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__locales_locales_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__locales_locales_json__);
/**
 * @module utils/I18n
 */








const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:utils/I18n');

/**
 * I18next helper. It fetches locales and initializes the library.
 *
 * @class
 * @license MPL-2.0
 */
class I18n {

    /**
     * Initialize i18next.
     *
     * @returns {Promise}
     */
    initialize() {
        log('init');

        return this.getLang().then(lng => this.initLocale(lng)).catch(err => {
            log('error', err);
            return Promise.reject(err);
        });
    }

    /**
     * Initialize i18next.
     *
     * @param {String} lng - locale name (en, fr...)
     * @returns {Promise} the promise is resolved once i18next is ready
     */
    initLocale(lng) {
        const options = {
            lng,
            fallbackLng: ['en'],
            ns: [''],
            defaultNS: '',
            backend: {
                loadPath: 'locales/{{lng}}/translation.json'
            }
        };

        // Enable XHR module
        __WEBPACK_IMPORTED_MODULE_1_i18next__["default"].use(__WEBPACK_IMPORTED_MODULE_2_i18next_xhr_backend___default.a);

        // Initialize i18next
        return new Promise((resolve, reject) => {
            __WEBPACK_IMPORTED_MODULE_1_i18next__["default"].init(options, resolve, reject);
        });
    }

    /**
     * Get language either from configs or autodect it from
     * browser settings.
     *
     * @returns {Promise}
     * @todo detect language in Cordova
     */
    getLang() {
        const lng = __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.request('collections/Configs', 'findConfig', {
            name: 'appLang'
        });

        if (lng || typeof window.navigator === 'undefined') {
            return Promise.resolve(lng);
        }

        return Promise.resolve(this.getBrowserLang());
    }

    /**
     * Get language from browser settings.
     *
     * @returns {String}
     */
    getBrowserLang() {
        // Keys by which language settings can be found in browsers
        const keys = ['languages', 'language', 'userLanguage', 'browserLanguage'];
        const localeKeys = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.keys(__WEBPACK_IMPORTED_MODULE_5__locales_locales_json___default.a);

        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.chain(window.navigator).pick(keys).values().flatten().compact().map(key => key.replace('-', '_').toLowerCase()).find(key => __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.contains(localeKeys, key)).value();
    }

}
/* unused harmony export default */


/**
 * Add a new initializer once the app is ready.
 */
function initialize() {
    const i18n = new I18n();
    const callback = () => i18n.initialize();

    // Initialize i18n at start
    __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.request('utils/Initializer', 'add', {
        callback,
        name: 'App:utils'
    });

    // Initialize i18n again because every profile can use a different locale
    __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.request('utils/Initializer', 'add', {
        callback,
        name: 'App:last'
    });

    return callback;
}

__WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.once('App', 'init', initialize);


/***/ }),
/* 687 */,
/* 688 */,
/* 689 */,
/* 690 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);
/**
 * @module utils/Url
 */



// import $ from 'jquery';

/**
 * URL helper.
 *
 * @class
 * @license MPL-2.0
 */
class Url {

    /**
     * Radio channel.
     *
     * @returns {Object} utils/Url
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('utils/Url');
    }

    /**
     * Notes filter parameters with their route fragments.
     *
     * @returns {Object}
     */
    get noteFilters() {
        return {
            filter: '/f/',
            query: '/q/',
            page: '/p'
        };
    }

    constructor() {
        // Save the original location hash
        this.hashOnStart = document.location.hash;

        // Start replying to requests
        this.channel.reply({
            getHashOnStart: () => this.hashOnStart,
            getHash: this.getHash,
            navigate: this.navigate,
            navigateBack: this.navigateBack,
            getNotesLink: this.getNotesLink,
            getNoteLink: this.getNoteLink,
            getFileLink: this.getFileLink
        }, this);
    }

    /**
     * Return the current history hash.
     *
     * @returns {String}
     */
    getHash() {
        return __WEBPACK_IMPORTED_MODULE_0_backbone___default.a.history.fragment;
    }

    /**
     * Navigate to a URL.
     *
     * @param {Object} options
     * @param {String} (options.url)
     * @param {Object} (options.filterArgs)
     * to the URL
     */
    navigate(options) {
        let { url } = options;

        // For default, trigger = true
        if (__WEBPACK_IMPORTED_MODULE_2_underscore___default.a.isUndefined(options.trigger)) {
            options.trigger = true; // eslint-disable-line
        }

        // Generate link to a note
        if (options.filterArgs) {
            url = this.getNoteLink(options);
        }

        __WEBPACK_IMPORTED_MODULE_0_backbone___default.a.history.navigate(url, options);
    }

    /**
     * Navigate back.
     *
     * @param {Object} options
     * @param {String} (options.url) - this URL will be used if history is empty
     */
    navigateBack(options) {
        if (this.historyLength() === 0) {
            const url = options.url || '/notes';
            return this.navigate({ url });
        }

        window.history.back();
    }

    /**
     * Return window.history.length
     *
     * @returns {Number}
     */
    historyLength() {
        return window.history.length;
    }

    /**
     * Generate a link to a particular note.
     *
     * @param {Object} options
     * @param {Object} (options.filterArgs) - filter parameters
     * @param {Object} (options.model) - note model
     * @param {String} (options.id) - ID of a note
     * @returns {String}
     */
    getNoteLink(options) {
        const url = this.getNotesLink(options);
        const id = options.model ? options.model.id : options.id;

        return id ? `${url}/show/${id}` : url;
    }

    /**
     * Generate a link to notes list from filter parameters.
     *
     * @param {Object} options
     * @param {Object} (options.filterArgs) - filter parameters
     * @returns {String}
     */
    getNotesLink(options) {
        const filterArgs = options.filterArgs || {};
        let url = '/notes';

        __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.each(this.noteFilters, (value, filter) => {
            if (__WEBPACK_IMPORTED_MODULE_2_underscore___default.a.has(filterArgs, filter) && filterArgs[filter]) {
                url += `${value}${filterArgs[filter]}`;
            }
        });

        return url;
    }

    /**
     * Generate a link to a file.
     *
     * @param {Object} options
     * @param {Boolean} (options.blob) - true if Object URL should be generated
     * @param {Object} (options.model) - file model
     * @param {String} (options.src)
     * @returns {String}
     */
    getFileLink(options) {
        if (!options.blob) {
            return `#file:${options.model.id}`;
        }

        const url = window.URL || window.webkitURL;
        const src = options.src || options.model.get('src');
        return url.createObjectURL(src);
    }

}
/* unused harmony export default */


// Instantiate automatically
__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.once('App', 'init', () => new Url());

/***/ }),
/* 691 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_debug__);
/**
 * @module utils/Title
 */




const log = __WEBPACK_IMPORTED_MODULE_2_debug___default()('lav:utils/Title');

/**
 * Title util.
 *
 * @class
 * @license MPL-2.0
 */
class Title {

    /**
     * Radio channel (utils/Title)
     *
     * @returns {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.channel('utils/Title');
    }

    /**
     * Title options.
     */
    get options() {
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({}, this.opt, this._opt || {});
    }

    /**
     * Set title options.
     *
     * @param {Object} options
     */
    set options(options) {
        this._opt = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.pick(options, __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.keys(this.opt));
    }

    /**
     * @listens this.channel#setTitle - set the main title
     * @listens this.channel#setSection - set section title
     */
    constructor() {
        /**
         * @prop opt
         * @prop {String} opt.title - the main title
         * @prop {String} opt.section - notebook or tag name, etc...
         * @prop {String} opt.profileId - current database profile ID
         * @prop {String} opt.app - Encryptic
         */
        this.opt = {
            title: '',
            section: '',
            profileId: '',
            app: 'Encryptic'
        };

        this.channel.reply({
            set: this.set
        }, this);
    }

    /**
     * Set title.
     *
     * @param {Object} options = {}
     * @returns {Promise}
     */
    set(options = {}) {
        // Try to set section title
        if (options.filter) {
            return this.setSection(options).then(() => this.setTitle(this.options));
        }

        return Promise.resolve(this.setTitle(options));
    }

    /**
     * Set document title.
     *
     * @param {Object} options
     * @param {String} (options.title)
     * @param {String} (options.query) - notebook or tag name
     * @param {String} (options.profileId)
     * @returns {Object} this.options
     */
    setTitle(options) {
        log('setTitle', options);
        if (options.title && !options.section) {
            this.options = { title: options.title };
        } else {
            this.options = options;
        }

        // Prepare an array of titles removing empty ones
        let title = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.compact(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.values(this.options));
        title = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.cleanXSS(title.join(' - '));

        // Set document title
        document.title = title;
        return this.options;
    }

    /**
     * Set section title.
     *
     * @param {Object} options
     * @returns {Promise}
     */
    setSection(options) {
        let promise;
        this.options = options;

        if (options.query && this[`${options.filter}Title`]) {
            promise = this[`${options.filter}Title`](options);
        } else {
            promise = Promise.resolve(this.getTitleFromFilter(options));
        }

        return promise.then(title => this.options = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({ section: title }, options));
    }

    /**
     * Get title from filter arguments.
     *
     * @param {Object} options
     * @returns {String}
     */
    getTitleFromFilter(options) {
        // eslint-disable-line complexity
        let title;

        // Use "query" as title if it's search or tag filter
        if (options.query && __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.indexOf(['search', 'tag'], options.filter) > -1) {
            title = options.query;
        }
        // Or use filter name as title
        else {
                const { filter } = options;
                title = !filter || filter !== 'active' ? options.filter : 'All notes';
                title = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n(title);
            }

        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.capitalize(title);
    }

    /**
     * Use notebook name as title instead of ID.
     *
     * @param {Object} options
     * @param {String} options.query - notebook ID
     * @returns {Promise} resolves with the notebook name
     */
    notebookTitle(options) {
        const opt = { id: options.query, profileId: options.profileId };

        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('collections/Notebooks', 'findModel', opt).then(model => __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.capitalize(model.get('name')));
    }

}
/* unused harmony export default */


__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', () => new Title());

/***/ }),
/* 692 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_mousetrap__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_mousetrap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_mousetrap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_mousetrap_plugins_pause_mousetrap_pause__ = __webpack_require__(693);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_mousetrap_plugins_pause_mousetrap_pause___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_mousetrap_plugins_pause_mousetrap_pause__);
/**
 * @module utils/Keybindings
 */





/**
 * Keybindings helper.
 *
 * @class
 * @license MPL-2.0
 */
class Keybindings {

    /**
     * Radio channel.
     *
     * @returns {Object} utils/Keybindings
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.channel('utils/Keybindings');
    }

    /**
     * Links used with jump keybindings.
     *
     * @returns {Object}
     */
    get jumpLinks() {
        return {
            jumpInbox: '/notes',
            jumpFavorite: '/notes/f/favorite',
            jumpRemoved: '/notes/f/trashed',
            jumpOpenTasks: '/notes/f/task',
            jumpNotebook: '/notebooks'
        };
    }

    constructor() {
        this.channel.reply({
            toggle: this.toggle
        }, this);
    }

    /**
     * Pause or unpause Mousetrap.
     */
    toggle() {
        __WEBPACK_IMPORTED_MODULE_2_mousetrap___default.a[this.paused ? 'unpause' : 'pause']();
        this.paused = !this.paused;
    }

    /**
     * Bind shortcuts.
     *
     * @returns {Promise}
     */
    bind() {
        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('collections/Configs', 'find').then(collection => this.collection = collection).then(() => this.bindApp()).then(() => this.bindJump());
    }

    /**
     * Bind application shortcuts.
     */
    bindApp() {
        const models = this.collection.appShortcuts();

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(models, model => {
            __WEBPACK_IMPORTED_MODULE_2_mousetrap___default.a.bind(model.get('value'), () => {
                this.channel.trigger(model.get('name'));
                return false;
            });
        });
    }

    /**
     * Bind jump shortcuts.
     */
    bindJump() {
        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(this.jumpLinks, (link, name) => {
            const model = this.collection.get(name);
            __WEBPACK_IMPORTED_MODULE_2_mousetrap___default.a.bind(model.get('value'), () => this.navigate(link));
        });
    }

    /**
     * Navigate to a page.
     *
     * @param {String} url
     */
    navigate(url) {
        __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('utils/Url', 'navigate', { url });
    }

}
/* unused harmony export default */


/**
 * Initializer.
 *
 * @returns {Promise}
 */
__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'start', () => {
    return new Keybindings().bind();
});

/***/ }),
/* 693 */
/***/ (function(module, exports) {

/**
 * adds a pause and unpause method to Mousetrap
 * this allows you to enable or disable keyboard shortcuts
 * without having to reset Mousetrap and rebind everything
 */
/* global Mousetrap:true */
(function(Mousetrap) {
    var _originalStopCallback = Mousetrap.prototype.stopCallback;

    Mousetrap.prototype.stopCallback = function(e, element, combo) {
        var self = this;

        if (self.paused) {
            return true;
        }

        return _originalStopCallback.call(self, e, element, combo);
    };

    Mousetrap.prototype.pause = function() {
        var self = this;
        self.paused = true;
    };

    Mousetrap.prototype.unpause = function() {
        var self = this;
        self.paused = false;
    };

    Mousetrap.init();
}) (Mousetrap);


/***/ }),
/* 694 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_debug__);
/**
 * @module utils/Notify
 */



const log = __WEBPACK_IMPORTED_MODULE_1_debug___default()('lav:utils/Notify');

/**
 * Notification util.
 *
 * @class
 * @license MPL-2.0
 */
class Notify {

    /**
     * Notification channel (utils/Notify)
     *
     * @returns {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.channel('utils/Notify');
    }

    constructor() {
        if (this.isSupported()) {
            this.channel.reply({
                show: this.show
            }, this);
        }
    }

    /**
     * Check whether the browser supports desktop notifications.
     *
     * @returns {Boolean}
     */
    isSupported() {
        return 'Notification' in window && !window.cordova;
    }

    /**
     * Request the notification permission.
     *
     * @returns {Promise}
     */
    init() {
        if (!this.isSupported()) {
            log('Your browser does not support notifications!');
            return Promise.resolve();
        }

        return new Promise((resolve, reject) => {
            Notification.requestPermission(permission => {
                if (permission === 'granted') {
                    return resolve();
                } else {
                    reject('Please allow us to show notifications!');
                }
            });
        });
    }

    /**
     * Show a notification.
     *
     * @param {String} {title
     * @param {String} body}
     */
    show({ title, body }) {
        log('showing a notification');
        return new Notification(title, { body });
    }

}
/* unused harmony export default */


__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', () => {
    __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('utils/Initializer', 'add', {
        name: 'App:utils',
        callback: () => new Notify().init()
    });
});

/***/ }),
/* 695 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/**
 * @module utils/electronListener
 * @license MPL-2.0
 */


/**
 * Listen to events sent by the main Electron process.
 */
function electronListener() {
    // Do nothing if it isn't Electron environment
    if (!window.electron) {
        return false;
    }

    const urlChannel = __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.channel('utils/Url');
    const { ipcRenderer } = window.electron;

    ipcRenderer.on('lav:settings', () => {
        urlChannel.request('navigate', { url: '/settings' });
    });

    ipcRenderer.on('lav:newNote', () => {
        urlChannel.request('navigate', { url: '/notes/add' });
    });

    ipcRenderer.on('lav:about', () => {
        __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('components/help', 'showAbout');
    });

    ipcRenderer.on('lav:import:evernote', (e, data) => {
        __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('components/importExport', 'importEvernote', data);
    });

    ipcRenderer.on('lav:backup:key', () => {
        __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('components/importExport', 'export', { exportKey: true });
    });

    ipcRenderer.on('lav:backup:data', () => {
        __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('components/importExport', 'export');
    });

    return true;
}

__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', () => {
    __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('utils/Initializer', 'add', {
        name: 'App:utils',
        callback: electronListener
    });
});

/* unused harmony default export */ var _unused_webpack_default_export = (electronListener);

/***/ }),
/* 696 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Profiles__ = __webpack_require__(697);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Configs__ = __webpack_require__(703);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Users__ = __webpack_require__(706);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Files__ = __webpack_require__(709);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Notebooks__ = __webpack_require__(712);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Notes__ = __webpack_require__(715);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Tags__ = __webpack_require__(718);
/**
 * @file instantiate all collection modules
 * @license MPL-2.0
 */









// import Shadows from './Shadows';
// import Edits from './Edits';

/**
 * Instantiate all collection modules
 *
 * @returns {Promise}
 */
function initializer() {
    // Instantiate all collection modules to start listening to requests
    new __WEBPACK_IMPORTED_MODULE_1__Profiles__["a" /* default */]();
    new __WEBPACK_IMPORTED_MODULE_2__Configs__["a" /* default */]();
    new __WEBPACK_IMPORTED_MODULE_3__Users__["a" /* default */]();
    new __WEBPACK_IMPORTED_MODULE_4__Files__["a" /* default */]();
    new __WEBPACK_IMPORTED_MODULE_5__Notebooks__["a" /* default */]();
    new __WEBPACK_IMPORTED_MODULE_6__Notes__["a" /* default */]();
    new __WEBPACK_IMPORTED_MODULE_7__Tags__["a" /* default */]();
    //new Shadows();
    //new Edits();

    // Find or create configs
    return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('collections/Profiles', 'find');
}

// Add a new initializer
__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', () => {
    __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('utils/Initializer', 'add', {
        name: 'App:core',
        callback: initializer
    });
});

/* unused harmony default export */ var _unused_webpack_default_export = (initializer);

/***/ }),
/* 697 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Module__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__collections_Profiles__ = __webpack_require__(698);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/**
 * @module collections/modules/Profiles
 */




/**
 * Profiles collection module
 *
 * @class
 * @extends module:collections/modules/Module
 * @license MPL-2.0
 */
class Profiles extends __WEBPACK_IMPORTED_MODULE_0__Module__["a" /* default */] {

    /**
     * Profiles collection.
     *
     * @see module:collections/Profiles
     * @returns {Object}
     */
    get Collection() {
        return __WEBPACK_IMPORTED_MODULE_1__collections_Profiles__["a" /* default */];
    }

    get encryptChannel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('components/Encryption');
    }

    constructor() {
        super();

        this.channel.reply({
            createProfile: this.createProfile,
            findProfiles: this.findProfiles,
            setUser: this.setUser,
            getUser: this.getUser,
            getProfile: this.getProfile,
            changePassphrase: this.changePassphrase,
            destroyProfile: this.destroyProfile
        }, this);
    }

    /**
     * Create a new profile.
     *
     * @public
     * @param {String} username
     * @param {String} privateKey
     * @param {String} publicKey
     * @returns {Promise}
     */
    createProfile({ username, privateKey, publicKey }) {
        this.profile = new this.Model({ username, privateKey, publicKey });
        return this.saveModel({ model: this.profile });
    }

    // This destroys a user's profile outright.
    destroyProfile(opt) {
        console.log('destroyProfile(): calling destroyUser()');
        this.collection.destroyUser(opt);
    }

    /**
     * Return profile collection.
     *
     * @public
     * @returns {Object} Backbone collection
     */
    findProfiles() {
        return this.collection;
    }

    /**
     * Set the profile model.
     *
     * @public
     * @param {String} {username}
     */
    setUser({ username }) {
        this.profile = this.collection.get({ username });
    }

    /**
     * Return the profile model.
     *
     * @public
     * @returns {Object} Backbone model
     */
    getUser() {
        if (!this.profile) {
            return null;
        }

        return this.profile;
    }

    /**
     * Return the user name.
     *
     * @public
     * @returns {String}
     */
    getProfile() {
        return this.getUser().get('username');
    }

    /**
     * Change the private key's passphrase.
     *
     * @public
     * @param {Object} options
     * @param {Object} options.model - "profile" model
     * @param {String} options.oldPassphrase
     * @param {String} options.newPassphrase
     * @returns {Promise}
     */
    async changePassphrase(options) {
        if (options.oldPassphrase === options.newPassphrase) {
            return Promise.reject('New and old passphrase are the same');
        } else if (!options.oldPassphrase.length || !options.newPassphrase.length) {
            return Promise.reject('You did not provide old or new passphrase');
        }

        const { model } = options;

        const privateKey = await this.encryptChannel.request('changePassphrase', options);
        return this.saveModel({ model, data: { privateKey } });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Profiles;


/***/ }),
/* 698 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseCollection__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_Profile__ = __webpack_require__(702);
/**
 * @module collections/Profiles
 */



/**
 * Profiles collection.
 *
 * @class
 * @extends module:collections/Collection
 * @license MPL-2.0
 */
class Profiles extends __WEBPACK_IMPORTED_MODULE_0__BaseCollection__["a" /* default */] {

    /**
     * Profile model.
     *
     * @returns {Object}
     */
    get model() {
        return __WEBPACK_IMPORTED_MODULE_1__models_Profile__["a" /* default */];
    }

    destroyUser(opt) {
        console.log('destroyUser(): calling destroyDb()');
        this.sync('destroyDb', opt, {});
    }

    constructor(models) {
        // Change the profileId to "default"
        super(models, { profileId: 'default' });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Profiles;


/***/ }),
/* 699 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_localforage__ = __webpack_require__(196);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_localforage___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_localforage__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_uuid__ = __webpack_require__(297);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_uuid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_uuid__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__workers_Module__ = __webpack_require__(300);
/**
 * @module components/Db
 */






/**
 * LocalForage Adapter.
 *
 * @class
 * @license MPL-2.0
 * @extends module:workers/Module
 */
/**
 * Some non-obvious terminology is at work here.
 * 
 * - profileId 
 * The highest object under the website.  Example "db-notes", "lav-brad",
 * or "lav-default"
 * 
 * - storeName
 * The second highest object under the website.  Example "configs", "notebooks",
 * or "notes"
 * 
 * - id (or idAttribute)
 * A single key residing under any storeName.  Ours are frequently uuids
 * 
 * - data
 * The value corresponding to a given id (as defined above).
 * 
 * 
 */
class Db extends __WEBPACK_IMPORTED_MODULE_3__workers_Module__["a" /* default */] {

    get fileName() {
        return 'components/Db';
    }

    constructor() {
        super();

        // Store database instances in this property
        this.dbs = {};
    }

    /**
     * Return a localforage instance. Create one if it doesn't exist.
     *
     * @param {Object} options
     * @param {String} options.profileId - database name
     * @param {String} options.storeName - storage name {notes|tags|notebooks}
     * @returns {Object} localforage instance
     */
    getDb(options) {
        const { storeName } = options;
        let profileId = options.profileId;
        const id = `${profileId}/${storeName}`;

        /* Add the prefix only if it's not "notes-db" profile to
           be compatible with old backups */
        if (profileId !== 'notes-db') {
            profileId = `lav-${profileId}`;
        }
        console.log('attempting db creation');
        this.dbs[id] = this.dbs[id] || __WEBPACK_IMPORTED_MODULE_0_localforage___default.a.createInstance({
            storeName,
            name: profileId
        });
        // console.log(this.dbs[id]);
        return this.dbs[id];
    }

    /**
     * Destroy a localforage instance.
     *
     * @param {Object} options
     * @param {String} options.profile - database name
     * @param {String} options.storeName - storage name {notes|tags|notebooks}
     * @returns {Object} localforage instance
     */
    dropDb(id) {
        console.log('start dropDb()');
        console.log(`Profile id: ${id}`);
        // remove the keys from the profile
        const profileId = 'default';
        const storeName = 'profiles';

        console.log(`attempting getDb(${profileId}, ${storeName}, ${id})`);
        this.getDb({ profileId: 'default', storeName: 'profiles' }).removeItem(id);
        /* Add the prefix only if it's not "notes-db" profile to
           be compatible with old backups */

        if (id !== 'notes-db') {
            id = `lav-${id}`;
        }
        console.log(`dropInstance(${id})`);
        this.getDb({}).dropInstance({
            // storeName,
            name: id
        }).then(console.log('removing profile key'));
        console.log('Booooooooom!!!!');
    }

    /**
     * Find an item by id.
     *
     * @param {Object} options
     * @param {String} options.profileId - used for setting database name
     * @param {String} options.storeName - notes, tags, notebooks, etc
     * @param {String} options.id - ID of an item.
     * @returns {Promise}
     */
    findItem(options) {
        return this.getDb(options).getItem(options.id);
    }

    /**
     * Find several items.
     *
     * @param {Object} options
     * @param {String} options.profileId - used for setting database name
     * @param {String} options.storeName - notes, tags, notebooks, etc
     * @param {Object} [options.conditions] - conditions which should be met.
     * It will filter items by those conditions.
     * @returns {Promise}
     */
    async find(options) {
        const { conditions } = options;
        const models = [];

        await this.getDb(options).iterate(value => {
            if (value && (!conditions || __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.isMatch(value, conditions))) {
                models.push(value);
            }
        });
        return models;
    }

    /**
     * Save an item.
     *
     * @param {Object} options
     * @param {String} options.profileId - used for setting database name
     * @param {String} options.storeName - notes, tags, notebooks, etc
     * @param {String} options.id - id of an item
     * @param {Object} options.data - data that should be saved
     * @returns {Promise}
     */
    async save(options) {
        const { data } = options;
        const idAttribute = options.idAttribute || 'id';

        // Generate a new ID if it wasn't provided
        data[idAttribute] = data[idAttribute] || options.id || __WEBPACK_IMPORTED_MODULE_2_uuid___default.a.v1();

        await this.getDb(options).setItem(data[idAttribute], data);
        return data;
    }

    /**
     * Save an item.
     *
     * @param {Object} options
     * @param {String} options.profileId - used for setting database name
     * @param {String} options.storeName - notes, tags, notebooks, etc
     * @param {String} options.id - id of an item
     * @param {String} [options.idAttribute]
     * @returns {Promise}
     */
    removeItem(options) {
        console.log(`removeItem: ${options.profileId}/${options.storeName}: ${options.data[idAttribute]}`);
        const idAttribute = options.idAttribute || 'id';
        const key = options.data[idAttribute] || options[idAttribute];
        return this.getDb(options).removeItem(key);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Db;


/***/ }),
/* 700 */,
/* 701 */,
/* 702 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseModel__ = __webpack_require__(86);
/**
 * @module models/Profile
 */


/**
 * Profile model.
 *
 * @class
 * @extends module:models/BaseModel
 * @license MPL-2.0
 */
class Profile extends __WEBPACK_IMPORTED_MODULE_0__BaseModel__["a" /* default */] {

    get storeName() {
        return 'profiles';
    }

    /**
     * Use username as ID.
     *
     * @returns {String}
     */
    get idAttribute() {
        return 'username';
    }

    /**
     * Default values.
     *
     * @prop {String} username
     * @prop {String} privateKey - private key
     * @prop {String} publicKey - public key
     * @returns {Object}
     */
    get defaults() {
        return {
            username: '',
            privateKey: '',
            publicKey: ''
        };
    }

    get validateAttributes() {
        return ['username'];
    }

    get escapeAttributes() {
        return ['username'];
    }

    constructor(options) {
        super(options, { profileId: 'default' });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Profile;


/***/ }),
/* 703 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Module__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__collections_Configs__ = __webpack_require__(704);
/**
 * @module collections/modules/Configs
 */





/**
 * Configs collection module
 *
 * @class
 * @extends module:collections/modules/Module
 * @license MPL-2.0
 */
class Configs extends __WEBPACK_IMPORTED_MODULE_2__Module__["a" /* default */] {

    /**
     * Configs collection.
     *
     * @see module:collections/Configs
     * @returns {Object}
     */
    get Collection() {
        return __WEBPACK_IMPORTED_MODULE_3__collections_Configs__["a" /* default */];
    }

    constructor() {
        super();

        this.channel.reply({
            findConfig: this.findConfig,
            findConfigs: this.findConfigs,
            saveConfig: this.saveConfig,
            saveConfigs: this.saveConfigs,
            createDeviceId: this.createDeviceId,
            updatePeer: this.updatePeer
        }, this);
    }

    /**
     * Find a config model by its name.
     *
     * @param {Object} options
     * @param {String} options.name
     * @param {String} options.profileId
     * @returns {Promise}
     */
    findModel(options) {
        return super.findModel(options).catch(err => {
            // Return the default values
            if (err === 'not found') {
                const collection = new this.Collection(null, options);
                return collection.getDefault(options.name);
            }

            return Promise.reject(err);
        });
    }

    /**
     * Find all configs. It overrides the default method to:
     * 1. Create the default configs if necessary
     *
     * @param {Object} options
     * @param {String} options.profileId
     * @returns {Promise}
     */
    async find(options) {
        // Use the cached collection
        if (this.collection && this.collection.length) {
            return this.collection;
        }

        await super.find(options);
        return this.checkOrCreate();
    }

    saveModel(options) {
        // Do nothing if it isn't encryption setting change
        if (options.model.get('name') !== 'encrypt' || options.noBackup) {
            return super.saveModel(options);
        }

        return Promise.all([super.saveModel(options), this.backupEncrypt(options)]);
    }

    /**
     * Backup encryption setting (to be able to decrypt/encrypt after restart).
     *
     * @param {Object} {data} - new values
     * @returns {Promise}
     */
    backupEncrypt({ model }) {
        const changed = model.changedAttributes();
        if (!changed || __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.isUndefined(changed.value)) {
            return Promise.resolve();
        }

        const backup = this.collection.get('encryptBackup');
        const value = { encrypt: Number(changed.value) ? 0 : 1 };
        return this.saveModel({ model: backup, data: { value } });
    }

    /**
     * If the collection is empty or there are new available configs, create and
     * save them to database.
     *
     * @returns {Promise} resolves with collection
     */
    async checkOrCreate() {
        if (!this.collection.hasNewConfigs()) {
            return this.collection;
        }

        // The collection is empty. Probably the first start
        if (this.collection.length === 0) {
            this.channel.trigger('collection:empty');
        }

        // Create default configs
        await this.collection.createDefault();
        return super.find({ profileId: this.collection.profileId });
    }

    /**
     * Return the value of a specific config.
     *
     * @param {Object} options
     * @param {String} options.name - the name of a config
     * @param {String} [options.default] - return this if the config does not exist
     */
    findConfig(options) {
        if (!this.collection) {
            return null;
        }

        const model = this.collection.get(options.name);
        return !model ? options.default : model.get('value');
    }

    /**
     * Return all configs as key=>value object.
     *
     * @returns {Object}
     */
    findConfigs() {
        return this.collection ? this.collection.getConfigs() : null;
    }

    saveFromArray(options) {
        // Generate a new deviceId for each new device
        const values = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.filter(options.values, val => {
            return val.name !== 'deviceId';
        });

        return super.saveFromArray({ values, profileId: options.profileId });
    }

    /**
     * Save config object to the database.
     *
     * @param {Object} options
     * @param {Object} options.config - config object with name and value
     * @param {String} options.profileId
     * @returns {Promise}
     */
    async saveConfig(options) {
        const { config } = options;

        const model = await this.findModel(__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend({}, options, { name: config.name }));
        if (!model) {
            return;
        }

        const opt = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend({}, options, { model, data: config });
        return this.saveModel(opt);
    }

    /**
     * Save several config objects.
     *
     * @param {Object} options
     * @param {Array} options.configs - an array of config objects
     * @param {String} options.profileId
     * @returns {Promise}
     */
    saveConfigs(options) {
        const promises = [];
        let { configs } = options;

        // Convert the array to a key=>value object
        configs = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.isArray(configs) ? __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.indexBy(configs, 'name') : configs;

        // Save each config
        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(configs, config => {
            promises.push(this.saveConfig(__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend({ config }, options)));
        });

        return Promise.all(promises);
    }

    /**
     * Generate the device ID.
     *
     * @returns {Promise}
     */
    async createDeviceId() {
        const rand = await __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/Encryption', 'random', { number: 6 });
        return this.saveConfig({ config: { name: 'deviceId', value: rand } });
    }

    /**
     * Add a new peer to the array of peers or update the date when
     * they connected the last time.
     *
     * @param {String} username
     * @param {String} deviceId
     * @returns {Promise}
     */
    async updatePeer({ username, deviceId }) {
        if (!username || !deviceId) {
            return;
        }

        const model = await this.findModel({ name: 'peers' });
        const value = model.get('value');
        const peer = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.findWhere(value, { username, deviceId });

        if (peer) {
            peer.lastSeen = Date.now();
        } else {
            value.push({ username, deviceId, lastSeen: Date.now() });
        }

        return this.saveModel({ model, data: { value } });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Configs;


/***/ }),
/* 704 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BaseCollection__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__models_Config__ = __webpack_require__(705);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__configNames__ = __webpack_require__(301);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_backbone_radio__);
/**
 * @module collections/Configs
 */






/**
 * Config collection.
 *
 * @class
 * @extends module:collections/Collection
 * @license MPL-2.0
 */

class Configs extends __WEBPACK_IMPORTED_MODULE_1__BaseCollection__["a" /* default */] {

    /**
     * Config model.
     *
     * @returns {Object}
     */
    get model() {
        return __WEBPACK_IMPORTED_MODULE_2__models_Config__["a" /* default */];
    }

    /**
     * Default config names and values.
     *
     * @returns {Object}
     */
    /*
    get configNames() {
        return flattenConfigs();
    }
    */
    /**
     * If current length of models is not equal to the length of
     * keys in configs property, there are new configs.
     *
     * @returns {Boolean} true if there are new configs
     */
    hasNewConfigs() {
        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.keys(__WEBPACK_IMPORTED_MODULE_3__configNames__["a" /* configNames */]).length !== this.length;
    }

    /**
     * Create default set of configs.
     *
     * @returns {Promise} - fulfilled after all new configs are saved
     */
    createDefault() {
        const promises = [];

        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(__WEBPACK_IMPORTED_MODULE_3__configNames__["a" /* configNames */], (value, name) => {
            // If a model exists, do not override it with default values
            if (typeof this.get(name) !== 'undefined') {
                return;
            }

            // Create a new config and save it
            const model = new this.model({ name, value }, { profileId: this.profileId });
            this.add(model);
            promises.push(model.save());
        });

        return Promise.all(promises);
    }

    /**
     * Return an array of configs which are allowed to be exported.
     *
     * @returns {Array}
     */
    getExportData() {
        const excludeNames = ['dropboxAccessToken', 'deviceId'];
        let coll = this.models;
        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(excludeNames, name => coll = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.without(coll, this.findWhere({ name })));

        return coll;
    }

    /**
     * Transform models to key=value structure.
     *
     * @returns {Object}
     */
    getConfigs() {
        const data = {};

        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(this.models, model => {
            data[model.get('name')] = model.get('value');
        });

        if (typeof data.appProfiles === 'string') {
            data.appProfiles = JSON.parse(data.appProfiles);
        }
        // We set theme here because there's surprisingly few places we see the full config.
        const theme = data.theme;
        __WEBPACK_IMPORTED_MODULE_4_backbone_radio___default.a.trigger('components/settings', 'changeTheme', { theme });
        // console.log(this.models);
        return data;
    }

    /**
     * Return a model with the default values.
     *
     * @param {String} name
     * @returns {Object} Backbone.model
     */
    getDefault(name) {
        const value = __WEBPACK_IMPORTED_MODULE_3__configNames__["a" /* configNames */][name];
        return new this.model({ name, value });
    }

    /**
     * Reset the collection with the values from key=value object.
     *
     * @param {Object} configs - key=value object
     * @returns {Object} this
     */
    // Commented out.  Will remove if nothing breaks  08-26 -BA
    /*
    resetFromObject(configs) {
        const models = [];
         _.each(configs, (value, name) => models.push({name, value}));
        this.reset(models);
         return this;
    }
    */

    /**
     * Filter the collection to have only keybinding related models.
     *
     * @returns {Array} - an array of keybinding related models
     */
    keybindings() {
        const names = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.keys(__WEBPACK_IMPORTED_MODULE_3__configNames__["a" /* configNames */].keybindings);
        return this.filter(model => __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.indexOf(names, model.get('name')) > -1);
    }

    /**
     * Filter to have only keybindings that are available globally.
     *
     * @returns {Array}
     */
    appShortcuts() {
        const names = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.filter(__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.keys(__WEBPACK_IMPORTED_MODULE_3__configNames__["a" /* configNames */].keybindings), name => {
            return (/^app/.test(name)
            );
        });

        return this.filter(model => __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.contains(names, model.get('name')));
    }

    /**
     * Filter to have only configs that contain in their names `str`.
     *
     * @param {String} str - key word
     * @returns {Array}
     */
    filterByName(str) {
        return this.filter(model => model.get('name').search(str) > -1);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Configs;


/***/ }),
/* 705 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseModel__ = __webpack_require__(86);
/**
 * @module models/Config
 */


/**
 * Config model.  This is the underlying structure for a single config 
 * name->value pair.  For the entire config look at collections/Config.
 * 
 * I really think it's strange to have a model for a single key-value pair.
 * Then again, I think it's strange to have a collection for a single
 * instance of a "Config" object.  I'm not sure what to do about this. I
 * think it needs to exist as a model/collection in order to make it into
 * the database, so I think it's a necessary evil.  I'm just not sure 
 * if there's a better way of doing it.
 *
 * @class
 * @extends module:models/Model
 * @license MPL-2.0
 */
class Config extends __WEBPACK_IMPORTED_MODULE_0__BaseModel__["a" /* default */] {

    /**
     * Use name as ID.
     *
     * @returns {String}
     */
    get idAttribute() {
        return 'name';
    }

    /**
     * Default values.
     *
     * @returns {Object}
     */
    get defaults() {
        return {
            name: '',
            value: ''
        };
    }

    /**
     * Store name.
     *
     * @returns {String}
     */
    get storeName() {
        return 'configs';
    }

    get validateAttributes() {
        return ['name'];
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Config;


/***/ }),
/* 706 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Module__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__collections_Users__ = __webpack_require__(707);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_openpgp__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_openpgp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_openpgp__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_debug__);
/**
 * @module collections/modules/Users
 */







const log = __WEBPACK_IMPORTED_MODULE_5_debug___default()('lav:collections/Modules/Users');

/**
 * User collection module
 *
 * @class
 * @extends module:collections/modules/Module
 * @license MPL-2.0
 */
class Users extends __WEBPACK_IMPORTED_MODULE_2__Module__["a" /* default */] {

    /**
     * User collection.
     *
     * @see module:collections/Users
     * @prop {Object}
     */
    get Collection() {
        return __WEBPACK_IMPORTED_MODULE_3__collections_Users__["a" /* default */];
    }

    /**
     * The user's profile data.
     *
     * @prop {Object}
     */
    get user() {
        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('collections/Profiles', 'getUser').attributes;
    }

    constructor() {
        super();

        // Add new replies
        this.channel.reply({
            acceptInvite: this.acceptInvite,
            acceptIfPending: this.acceptIfPending,
            rejectInvite: this.rejectInvite,
            invite: this.invite,
            saveInvite: this.saveInvite
        }, this);
    }

    async find(...args) {
        if (this.collection) {
            return this.collection;
        }

        await super.find(...args);
        return this.collection;
    }

    async saveModel(options) {
        const privKey = __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('collections/Configs', 'findConfig', {
            name: 'privateKey'
        });

        await super.saveModel(options);

        // Add a users key to the array of public keys if the user's private key exists
        if (privKey && privKey.length) {
            // console.log("saveModel()");
            // console.log(options);
            __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('components/Encryption', 'readUserKey', { model: options.model });
        }

        return options.model;
    }

    /**
     * Remove a user from the database.
     *
     * @public
     * @param {Object} options
     * @param {Object} [options.model] - Backbone.model
     * @param {Object} [options.username]
     * @fires channel#destroy:model
     * @returns {Promise}
     */
    async remove(options) {
        const idAttr = this.idAttribute;
        const data = { [idAttr]: options[idAttr] || options.model.get(idAttr) };
        const model = new this.Model(data, { profileId: options.profileId });

        await model.destroy();
        return this.collection.remove(model);
    }

    /**
     * Mark an invite as accepted.
     *
     * @public
     * @param {Object} model
     * @returns {Promise}
     */
    async acceptInvite({ model }) {
        this.removeServerInvite(model);
        const data = { pendingAccept: false, pendingInvite: false };

        await this.saveModel({ model, data });
        __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('models/Peer', 'sendOfferTo', { user: model.attributes });
    }

    /**
     * Mark an invite that you sent as accepted.
     *
     * @param {String} {username}
     */
    async acceptIfPending({ username }) {
        const model = await this.findModel({ username });
        if (model.get('pendingInvite')) {
            return this.acceptInvite({ model });
        }
    }

    /**
     * Reject the invite by removing the model from database.
     *
     * @todo notify the server
     * @public
     * @param {Object} model
     * @returns {Promise}
     */
    rejectInvite({ model }) {
        this.removeServerInvite(model);
        return this.remove({ model });
    }

    /**
     * Remove a pending invite from the signaling server.
     *
     * @protected
     * @param {Object} model - user model
     */
    removeServerInvite(model) {
        __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('models/Signal', 'removeInvite', {
            username: model.get('username')
        });
    }

    /**
     * Add a new user to trust.
     *
     * @protected
     * @param {Object} options
     * @param {String} options.profileId
     * @param {Object} options.user
     * @param {String} options.user.username
     * @param {String} options.user.fingerprint
     * @param {String} options.user.publicKey
     * @param {Object} pendingData
     * @returns {Promise}
     */
    addUser(options, pendingData) {
        const { user, profileId } = options;

        // Create a new model
        const model = new this.Model({}, { profileId });
        const data = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.pick(user, 'username', 'fingerprint', 'publicKey');

        // Save the new model and send an invite
        return this.saveModel({ model, data: __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend(pendingData, data) });
    }

    /**
     * Check if a public key fingerprint is correct.
     *
     * @protected
     * @param {String} publicKey
     * @param {String} fingerprint
     * @returns {Boolean}
     */
    checkKey(publicKey, fingerprint) {
        const { keys, err } = __WEBPACK_IMPORTED_MODULE_4_openpgp__["key"].readArmored(publicKey);
        return !err && keys[0].primaryKey.fingerprint === fingerprint;
    }

    /**
     * Invite a new user to collaborate:
     * 1. Save the user to pending
     * 2. Send the invite
     *
     * @public
     * @see addUser()
     * @param {Object} options
     * @returns {Promise}
     */
    async invite(options) {
        if (!this.checkKey(options.user.publicKey, options.user.fingerprint)) {
            log('wrong user fingerprint', options.user);
            return false;
        }

        log('saving and sending the invite...');
        await this.addUser(options, { pendingInvite: true });
        await __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('models/Signal', 'sendInvite', options.user);
        return true;
    }

    /**
     * Another user invited to share documents and collaborate:
     * 1. Check the invite signature
     * 2. Save their username, fingerprint, and publicKey if signature is correct
     * 3. Don't accept connections until the offer is accepted
     *
     * @see addUser()
     * @public
     * @param {Object} options
     * @param {String} options.username
     * @param {String} options.fingerprint
     * @param {String} options.publicKey
     * @param {String} options.signature - invite signature
     * @returns {Promise}
     */
    saveInvite(options) {
        const { keys, err } = __WEBPACK_IMPORTED_MODULE_4_openpgp__["key"].readArmored(options.publicKey);

        // Wrong fingerprint
        if (err || keys[0].primaryKey.fingerprint !== options.fingerprint) {
            log('Ignore invite - wrong fingerprint');
            return Promise.resolve(false);
        }

        // If the user exists in the DB, automatically accept the invite
        return this.findModel({ username: options.username }).then(model => {
            // Remove the invite from the server if the invite was already accepted
            if (!model.get('pendingAccept') && !model.get('pendingInvite')) {
                return this.removeServerInvite(model);
            }

            return this.autoAcceptInvite(options, keys, model);
        }).catch(err => {
            if (err !== 'not found') {
                throw new Error(err);
            }

            // Add a new user
            return this.saveNewInvite(options, keys);
        }).then(() => true);
    }

    /**
     * Automatically accept an invite if both users sent invites to each other.
     *
     * @protected
     * @param {Object} options
     * @param {Array}  keys
     * @param {Object} model
     * @returns {Promise}
     */
    async autoAcceptInvite(options, keys, model) {
        const res = await this.checkInviteSignature(options, keys);

        if (res && model.get('fingerprint') === options.fingerprint && model.get('pendingInvite')) {
            return this.acceptInvite({ model });
        }
    }

    /**
     * Save an invite from another user.
     *
     * @protected
     * @param {Object} options
     * @param {Array} keys
     * @returns {Promise}
     */
    async saveNewInvite(options, keys) {
        const res = await this.checkInviteSignature(options, keys);
        if (!res) {
            log('Ignore invite - incorrect signature');
            return false;
        }

        await this.addUser({ user: options }, { pendingAccept: true });
        return true;
    }

    /**
     * Check if the invite signature is correct.
     *
     * @todo check if the signature contains the correct fingerprint
     * @protected
     * @param {Object} options
     * @param {String} options.username
     * @param {Array} keys - an array which contains the user's public key
     * @returns {Promise} resolves with true if the signature is correct
     */
    async checkInviteSignature(options, keys) {
        const res = await __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('components/Encryption', 'verify', {
            message: options.signature,
            publicKeys: keys
        });
        const data = JSON.parse(res.data);

        return res.signatures[0].valid && data.from === options.username && data.to === this.user.username;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Users;


/***/ }),
/* 707 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__models_User__ = __webpack_require__(708);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BaseCollection__ = __webpack_require__(113);
/**
 * @module collections/Users
 */



/**
 * User collection.
 *
 * @class
 * @extends module:collections/Collection
 * @license MPL-2.0
 */
class Users extends __WEBPACK_IMPORTED_MODULE_1__BaseCollection__["a" /* default */] {

  /**
   * User model.
   *
   * @returns {Object}
   */
  get model() {
    return __WEBPACK_IMPORTED_MODULE_0__models_User__["a" /* default */];
  }

  /**
   * Return an array of users who are waiting for your approval.
   *
   * @returns {Array}
   */
  getPending() {
    return this.filter(model => model.get('pendingAccept'));
  }

  /**
   * Return an array of users whom you trust.
   *
   * @returns {Array}
   */
  getTrusted() {
    return this.filter(model => !model.get('pendingAccept'));
  }

  /**
   * Return an array of users whom you trust and who accepted your invite.
   * Those are the users with whom it is safe to try to establish connection.
   *
   * @returns {Array}
   */
  getActive() {
    return this.filter(model => {
      return !model.get('pendingAccept') && !model.get('pendingInvite');
    });
  }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Users;


/***/ }),
/* 708 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseModel__ = __webpack_require__(86);
/**
 * @module models/User
 */


/**
 * User model.
 * Stores information about users with whom you want to connect.
 *
 * @class
 * @extends module:models/BaseModel
 * @license MPL-2.0
 */
class User extends __WEBPACK_IMPORTED_MODULE_0__BaseModel__["a" /* default */] {

    get storeName() {
        return 'users';
    }

    /**
     * Use username as ID attribute.
     *
     * @prop {String}
     */
    get idAttribute() {
        return 'username';
    }

    /**
     * Default values.
     *
     * @prop {String} type - equal to users
     * @prop {String} username
     * @prop {String} fingerprint
     * @prop {String} publicKey
     * @prop {Boolean} pendingInvite - true if the user was invited by you
     * and you're waiting for their answer
     * @prop {Boolean} pendingAccept - true if you have been invited by this
     * user and they're waiting for your answer
     * @returns {Object}
     */
    get defaults() {
        return {
            type: 'users',
            username: '',
            fingerprint: '',
            publicKey: '',
            pendingAccept: false,
            pendingInvite: false
        };
    }

    get validateAttributes() {
        return ['username', 'publicKey', 'fingerprint'];
    }

    get escapeAttributes() {
        return ['username', 'publicKey', 'fingerprint'];
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = User;


/***/ }),
/* 709 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_blueimp_canvas_to_blob__ = __webpack_require__(302);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_blueimp_canvas_to_blob___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_blueimp_canvas_to_blob__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Module__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__collections_Files__ = __webpack_require__(710);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_js_md5__ = __webpack_require__(197);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_js_md5___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_js_md5__);
/**
 * @module collections/modules/Files
 */






/**
 * Files collection module.
 *
 * @class
 * @extends module:collections/modules/Module
 * @license MPL-2.0
 */
class Files extends __WEBPACK_IMPORTED_MODULE_2__Module__["a" /* default */] {

    /**
     * File collection.
     *
     * @see module:collections/Files
     * @returns {Object}
     */
    get Collection() {
        return __WEBPACK_IMPORTED_MODULE_3__collections_Files__["a" /* default */];
    }

    constructor() {
        super();

        this.channel.reply({
            findFiles: this.findFiles,
            addFiles: this.addFiles,
            createUrls: this.createUrls
        }, this);
    }

    saveModel(options) {
        const { model, data } = options;

        // Use md5 sum of the file as an ID to avoid duplicates
        if (!model.get('id') && !data.id) {
            const src = data.src || model.get('src');
            const id = __WEBPACK_IMPORTED_MODULE_4_js_md5___default.a.create().update(src).hex(); // eslint-disable-line
            model.set({ id });
        }

        return super.saveModel(options);
    }

    /**
     * Find all files with the specified IDs.
     *
     * @param {Object} options
     * @param {Array} options.ids - an array of file IDs
     * @param {String} options.profileId
     * @returns {Promise}
     */
    findFiles(options) {
        const { ids, profileId } = options;
        const promises = [];

        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(ids, id => {
            promises.push(this.findModel({ profileId, id }));
        });

        return Promise.all(promises).then((...args) => args[0]);
    }

    /**
     * Save several files.
     *
     * @param {Object} options
     * @param {Array} files - an array with objects
     * @param {String} profileId
     * @returns {Promise}
     */
    addFiles(options) {
        const { files, profileId } = options;
        const models = [];
        const promises = [];

        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(files, data => {
            const model = new this.Model(null, { profileId });
            models.push(model);
            promises.push(this.saveModel({ model, data }));
        });

        return Promise.all(promises).then(() => models);
    }

    /**
     * Create object URLs.
     *
     * @param {Array} models
     * @returns {Array}
     */
    createUrls({ models }) {
        const url = URL || window.webkitURL;

        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.map(models, model => {
            const src = __WEBPACK_IMPORTED_MODULE_1_blueimp_canvas_to_blob___default()(model.get('src'));
            return {
                id: model.id,
                url: url.createObjectURL(src)
            };
        });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Files;


/***/ }),
/* 710 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__models_File__ = __webpack_require__(711);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BaseCollection__ = __webpack_require__(113);
/**
 * @module collections/Files
 */



/**
 * File collection.
 *
 * @class
 * @extends module:collections/Collection
 * @license MPL-2.0
 */
class Files extends __WEBPACK_IMPORTED_MODULE_1__BaseCollection__["a" /* default */] {

  /**
   * File model.
   *
   * @returns {Object}
   */
  get model() {
    return __WEBPACK_IMPORTED_MODULE_0__models_File__["a" /* default */];
  }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Files;


/***/ }),
/* 711 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseModel__ = __webpack_require__(86);
/**
 * @module models/File
 */


/**
 * File model.
 *
 * @class
 * @extends module:models/Model
 * @license MPL-2.0
 */
class File extends __WEBPACK_IMPORTED_MODULE_0__BaseModel__["a" /* default */] {

    /**
     * Store name.
     *
     * @returns {String}
     */
    get storeName() {
        return 'files';
    }

    /**
     * Default values.
     *
     * @property {String} type - type of data stored in this model
     * @property {(String|Undefined)} id - undefined for default
     * @property {String} name - name of the stored file
     * @property {String} src - file data (blob?)
     * @property {String} fileType - (jpg|png|pdf|...)
     * @property {Number} trash - 1 if the model is in trash
     * @property {Date.now()} created - the date when the model was created
     * @property {Date.now()} update - the date when the model was updated
     * the last time
     */
    get defaults() {
        return {
            type: 'files',
            id: undefined,
            name: '',
            src: '',
            fileType: '',
            trash: 0,
            created: 0,
            updated: 0
        };
    }

    get validateAttributes() {
        return ['src', 'fileType'];
    }

    get escapeAttributes() {
        return ['name'];
    }

    /**
     * @todo implement a proper check
     */
    isSharedWith() {
        return true;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = File;


/***/ }),
/* 712 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Module__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__collections_Notebooks__ = __webpack_require__(713);
/**
 * @module collections/modules/Notebooks
 */





/**
 * Notebook collection module.
 *
 * @class
 * @extends module:collections/modules/Module
 * @license MPL-2.0
 */
class Notebooks extends __WEBPACK_IMPORTED_MODULE_2__Module__["a" /* default */] {

    /**
     * Notebooks collection.
     *
     * @see module:collections/Notebooks
     * @returns {Object}
     */
    get Collection() {
        return __WEBPACK_IMPORTED_MODULE_3__collections_Notebooks__["a" /* default */];
    }

    /**
     * Remove a notebook. Before removing a notebook, it does the following:
     * 1. Moves child notebook models to a higher level by changing parentId.
     * 2. Removes notes attached to the notebook or changes their notebookId to 0.
     *
     * @param {Object} options
     * @param {Object} options.model - notebook model
     * @param {Boolean} (options.removeNotes) - true if attached notes should be
     * removed too
     * @returns {Promise}
     */
    async remove(options) {
        await this.updateChildren(options.model);
        await __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Notes', 'changeNotebookId', options);

        return super.remove(options);
    }

    /**
     * Move child notebooks to a higher level.
     *
     * @param {Object} model - notebook model
     * @returns {Promise}
     */
    async updateChildren(model) {
        const profileId = model.profileId;
        const collection = await this.getChildren({ parentId: model.id, profileId });

        const promises = [];
        const data = { parentId: model.get('parentId') };

        collection.each(notebook => {
            promises.push(this.saveModel({ data, model: notebook }));
        });

        return Promise.all(promises);
    }

    /**
     * Find child notebooks.
     *
     * @param {Object} options - Promise
     * @param {String} options.parentId - ID of the parent notebook
     * @param {String} options.profileId - profile name
     */
    getChildren(options) {
        const { parentId, profileId } = options;

        // Filter an existing collection
        if (this.collection && this.collection.length) {
            const collection = this.collection.clone();
            collection.reset(collection.getChildren(parentId));
            return Promise.resolve(collection);
        }

        return this.find({ profileId, conditions: { parentId } });
    }

    /**
     * Find notebooks. It overrides the parent method to build a tree
     * structure after fetching models.
     *
     * @param {Object} options
     * @returns {Promise}
     */
    async find(options) {
        const sortField = __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('collections/Configs').request('findConfig', { name: 'sortnotebooks' });
        const opt = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend({ sortField }, options);
        const collection = await super.find(opt);

        collection.models = collection.getTree();
        return collection;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Notebooks;


/***/ }),
/* 713 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Pageable__ = __webpack_require__(198);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__models_Notebook__ = __webpack_require__(714);
/**
 * @module collections/Notebooks
 * @license MPL-2.0
 */




/**
 * Notebooks collection.
 *
 * @class
 * @extends module:collections/Pageable
 * @license MPL-2.0
 */
class Notebooks extends __WEBPACK_IMPORTED_MODULE_1__Pageable__["a" /* default */] {

    get model() {
        return __WEBPACK_IMPORTED_MODULE_2__models_Notebook__["a" /* default */];
    }

    /**
     * Conditions by which notebooks will be filtered.
     *
     * @returns {Object}
     */
    get conditions() {
        return {
            active: { trash: 0 }
        };
    }

    /**
     * Sort notebooks by the these fields.
     *
     * @returns {Object} field => asc|desc
     */
    get comparators() {
        const { sortField, sortDirection } = this.options;
        return {
            [sortField || 'name']: sortDirection || 'desc'
        };
    }

    constructor(...args) {
        super(...args);

        // Disable pagination
        this.pagination = { perPage: 0 };
    }

    startListening() {
        this.listenTo(this, 'change:parentId', this.updateTree);

        return super.startListening();
    }

    /**
     * Re-sort the collection by parent IDs.
     */
    updateTree() {
        this.reset(this.getTree());
    }

    /**
     * Build a tree structure.
     *
     * @param {Array} parents = this.getRoots()
     * @param {Array} tree = []
     * @param {Number} level = 1
     */
    getTree(parents = this.getRoots(), tree = [], level = 1) {
        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(parents, model => {
            model.set('level', level);
            tree.push(model);

            // Every child notebook can have its own children
            const children = this.getChildren(model.id);
            if (children.length > 0) {
                this.getTree(children, tree, level + 1);
            }
        });

        return tree;
    }

    /**
     * Filter to parent notebooks.
     *
     * @returns {Array} only parent notebooks.
     */
    getRoots() {
        return this.where({ parentId: '0' });
    }

    /**
     * Find all child notebooks of a notebook.
     *
     * @param {String} parentId - parent notebook ID
     * @returns {Array}
     */
    getChildren(parentId) {
        return this.where({ parentId });
    }

    /**
     * Return only notebooks that are not related to a specified notebook.
     *
     * @param {String} id - a notebook ID
     * @returns {Array}
     */
    rejectTree(id) {
        const ids = [id];

        return this.filter(model => {
            const { id, parentId } = model.attributes;

            if (__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.indexOf(ids, id) > -1 || __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.indexOf(ids, parentId) > -1) {
                /*
                 * Save the ID of a notebook because it might have
                 * its own nested notebooks.
                 */
                ids.push(model.id);
                return false;
            }

            return true;
        });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Notebooks;


/***/ }),
/* 714 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseModel__ = __webpack_require__(86);
/**
 * @module models/Notebook
 */


/**
 * Notebook model.
 *
 * @class
 * @extends module:models/BaseModel
 * @license MPL-2.0
 */
class Notebook extends __WEBPACK_IMPORTED_MODULE_0__BaseModel__["a" /* default */] {

    get storeName() {
        return 'notebooks';
    }

    /**
     * Default values.
     *
     * @property {String} type - type of data stored in this model
     * @property {(String|undefined)} id - undefined for default
     * @property {String} encryptedData
     * @property {String} parentId
     * @property {String} name - the name of a notebook
     * @property {Number} count - the number of notes attached to the notebook
     * @property {Number} trash - trash status:
     * 0 - it's not in trash, 1 - it's in trash, 2 - it was removed completely
     * @property {Date.now()} created - date when it's created
     * @property {Date.now()} updated - date when it's updated
     * @returns {Object}
     */
    get defaults() {
        return {
            type: 'notebooks',
            id: undefined,
            encryptedData: '',
            parentId: '0',
            name: '',
            count: 0,
            trash: 0,
            created: 0,
            updated: 0
        };
    }

    /**
     * Attributes that need to be encrypted.
     *
     * @returns {Array}
     */
    get encryptKeys() {
        return ['name'];
    }

    get validateAttributes() {
        return ['name'];
    }

    get escapeAttributes() {
        return ['name'];
    }

    /**
     * Validate a notebook.
     *
     * @param {Object} attrs
     * @returns {(Array|Undefined)}
     */
    validate(attrs) {
        const errors = super.validate(attrs) || [];

        // It cannot have itself as a parent
        if (attrs.parentId === this.id) {
            errors.push('parentId');
        }

        if (errors.length) {
            return errors;
        }
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Notebook;


/***/ }),
/* 715 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Module__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__collections_Notes__ = __webpack_require__(716);
/**
 * @module module:collections/modules/Notes
 */





/**
 * Notes collection module.
 *
 * @class
 * @extends module:collections/modules/Module
 * @license MPL-2.0
 */
class Notes extends __WEBPACK_IMPORTED_MODULE_2__Module__["a" /* default */] {

    /**
     * Notes collection.
     *
     * @see module:collections/Notes
     * @returns {Object}
     */
    get Collection() {
        return __WEBPACK_IMPORTED_MODULE_3__collections_Notes__["a" /* default */];
    }

    constructor() {
        super();

        this.channel.reply({
            restore: this.restore,
            changeNotebookId: this.changeNotebookId
        }, this);
    }

    /**
     * Save a note model. Override the parent method to create/save tags
     * before saving the note model.
     *
     * @param {Object} options
     * @param {Object} options.model - note model
     * @param {Object} (options.data) - new data
     * @param {Boolean} (options.saveTags) - true if tags should be extracted
     * from the content and saved.
     * @returns {Promise}
     */
    async saveModel(options) {
        if (__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.isUndefined(options.saveTags) || !options.saveTags) {
            return super.saveModel(options);
        }

        const data = options.data || options.model.attributes;

        await __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Tags', 'addTags', {
            tags: data.tags,
            profileId: options.model.profileId
        });

        return super.saveModel(options);
    }

    /**
     * Remove a note or put it to trash.
     *
     * @param {Object} options
     * @param {Object} (options.model) - Backbone.model
     * @param {Object} (options.id) - ID of a model
     * @fires collections/Notes#destroy:model
     * @returns {Promise}
     */
    async remove(options) {
        const model = await this.findOrFetch(options);
        // If the model is already in trash, remove it
        if (Number(model.get('trash')) === 1) {
            return super.remove(options);
        }

        // Otherwise, just change its 'trash' attribute to 1
        await this.saveModel({ model, data: { trash: 1 } });
        this.channel.trigger('destroy:model', { model });
    }

    /**
     * If model isn't in options, fetch it from the database.
     *
     * @param {Object} options
     * @param {Object} (options.model)
     * @param {String} (options.id)
     * @returns {Promise}
     */
    findOrFetch(options) {
        if (options.model) {
            return Promise.resolve(options.model);
        }

        // If the model wasn't provided, fetch it
        return this.findModel(options);
    }

    /**
     * Restore a model from trash.
     *
     * @param {Object} options
     * @param {Object} (options.model) - note model
     * @param {String} (options.id) - id of a note
     * @returns {Promise}
     */
    async restore(options) {
        const model = await this.findOrFetch(options);
        await this.saveModel({ model, data: { trash: 0 } });
        this.channel.trigger('restore:model', { model });
    }

    /**
     * Change notebookId of notes attached to a notebook or move them to trash.
     *
     * @param {Object} options
     * @param {Object} options.model - notebook model
     * @param {Boolean} (options.removeNotes) - true if attached notes should be
     * moved to trash
     * @returns {Promise}
     */
    async changeNotebookId(options) {
        const { model } = options;
        const data = { notebookId: 0 };

        // Change trash status
        if (options.removeNotes) {
            data.trash = 1;
        }

        const notes = await this.find({
            profileId: model.profileId,
            conditions: { notebookId: model.id }
        });
        const collection = notes.fullCollection || notes;
        return this.save({ collection, data });
    }

    /**
     * Find notes. Override the parent method to filter the collection
     * immediately after fetching.
     *
     * @param {Object} options
     * @returns {Promise}
     */
    find(options) {
        const sortField = __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('collections/Configs').request('findConfig', { name: 'sortnotes' });
        const opt = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend({ sortField }, options);

        return super.find(opt);
    }

    /**
     * Find a note model by its ID.
     *
     * @param {Object} options
     * @param {Object} options.id
     * @param {Object} options.profileId
     * @param {Boolean} (options.findAttachments) - true if attached notebooks
     * and files should be fetched too
     * @returns {Promise}
     */
    async findModel(options) {
        const model = await super.findModel(options);
        if (options.findAttachments) {
            return this.findAttachments({ model });
        }

        return model;
    }

    /**
     * Find a model's attachments (notebooks, files).
     * Create two properties:
     * 1. model.notebook - a notebook model
     * 2. model.fileModels - all file models attached to the note
     *
     * @todo render markdown content
     * @param {Object} options
     * @param {Object} options.model
     * @returns {Promise} - resolves with the model
     */
    findAttachments(options) {
        const { model } = options;
        const promises = [];

        // Fetch the notebook
        if (model.get('notebookId') !== '0') {
            promises.push(this.findNotebook(model));
        }

        // Fetch files
        if (!__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.isEmpty(model.get('files'))) {
            promises.push(this.findFiles(model));
        }

        return Promise.all(promises).then(() => __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/markdown', 'render', model.attributes)).then(content => model.htmlContent = content).then(() => model);
    }

    /**
     * Find a notebook attached to a note model.
     *
     * @param {Object} model
     * @returns {Promise}
     */
    async findNotebook(model) {
        const notebook = await __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Notebooks', 'findModel', {
            profileId: model.profileId,
            id: model.get('notebookId')
        });
        model.set('notebook', notebook);
    }

    /**
     * Find file models attached to a note model.
     *
     * @param {Object} model
     * @returns {Promise}
     */
    async findFiles(model) {
        const files = await __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Files', 'findFiles', {
            profileId: model.profileId,
            ids: model.get('files')
        });
        model.set('fileModels', files);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Notes;


/***/ }),
/* 716 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_fuse_js__ = __webpack_require__(304);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_fuse_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_fuse_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Pageable__ = __webpack_require__(198);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__models_Note__ = __webpack_require__(717);
/**
 * @module collections/Notes
 */





/**
 * Notes collection.
 *
 * @class
 * @extends module:collections/Pageable
 * @license MPL-2.0
 */
class Notes extends __WEBPACK_IMPORTED_MODULE_2__Pageable__["a" /* default */] {

    get model() {
        return __WEBPACK_IMPORTED_MODULE_3__models_Note__["a" /* default */];
    }

    /**
     * Conditions by which notes can be filtered.
     *
     * @returns {Object}
     */
    get conditions() {
        return {
            active: { trash: 0 },
            favorite: { isFavorite: 1, trash: 0 },
            trashed: { trash: 1 },
            notebook: options => {
                return { notebookId: options.query, trash: 0 };
            }
        };
    }

    /**
     * Fields by which models will be sorted.
     *
     * @returns {Object}
     */
    get comparators() {
        const { sortField, sortDirection } = this.options;
        return {
            [sortField || 'created']: sortDirection || 'desc',
            isFavorite: 'desc'
        };
    }

    constructor(...args) {
        super(...args);

        // Change the number of models shown per page
        this.pagination.perPage = this.options.perPage || 10;
    }

    /**
     * Find notes that have unfinished tasks.
     *
     * @returns {Array}
     */
    taskFilter() {
        return this.filter(model => {
            return model.get('taskCompleted') < model.get('taskAll');
        });
    }

    /**
     * Find models associated with a tag.
     *
     * @param {String} tagName - the name of a tag
     * @returns {Array}
     */
    tagFilter(tagName) {
        return this.filter(model => {
            return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.indexOf(model.get('tags', []), tagName) !== -1 && model.get('trash') === 0;
        });
    }

    /**
     * Find all models that contain `text`.
     *
     * @param {String} text
     * @returns {Array}
     */
    searchFilter(text) {
        if (!text || text === '') {
            return this;
        }

        const pattern = new RegExp(text, 'gim');

        return this.filter(model => {
            pattern.lastIndex = 0;
            return pattern.test(model.get('title')) || pattern.test(model.get('content'));
        });
    }

    /**
     * Find all models that contain `text` in their title.
     * The difference between this and searchFilter is in using
     * fuzzy search algorithm.
     *
     * @param {String} text
     * @returns {Array}
     */
    fuzzySearch(text) {
        const fuse = new __WEBPACK_IMPORTED_MODULE_1_fuse_js___default.a(this.fullCollection.models, {
            keys: ['title'],
            getFn: (obj, path) => obj.get(path)
        });

        return fuse.search(text);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Notes;


/***/ }),
/* 717 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseModel__ = __webpack_require__(86);
/**
 * @module models/Note
 */


/**
 * Note model.
 *
 * @class
 * @extends module:models/BaseModel
 * @license MPL-2.0
 */
class Note extends __WEBPACK_IMPORTED_MODULE_0__BaseModel__["a" /* default */] {

    get storeName() {
        return 'notes';
    }

    /**
     * Default values.
     *
     * @property {String} type - equal to notes
     * @property {(String|Undefined)} id - undefined for default
     * @property {String} encryptedData
     * @property {String} title
     * @property {String} content
     * @property {Number} taskAll - the number of tasks in a note
     * @property {Number} taskCompleted - the number of completed tasks
     * @property {Date.now()} created
     * @property {Date.now()} updated
     * @property {String} notebookId - ID of a notebook
     * @property {Array} tags - an array of tag names
     * @property {Number} isFavorite - equal to 1 if the note is favorite
     * @property {Number} trash
     * @property {Array} files - array of file IDs
     * @property {Array} sharedWith - an array of users with whome the note
     * is shared
     * @property {String} sharedBy - the author of the note
     * @returns {Object}
     */
    get defaults() {
        return {
            type: 'notes',
            id: undefined,
            encryptedData: '',
            title: '',
            content: '',
            taskAll: 0,
            taskCompleted: 0,
            created: 0,
            updated: 0,
            notebookId: '0',
            tags: [],
            isFavorite: 0,
            trash: 0,
            files: [],
            sharedWith: [],
            sharedBy: ''
        };
    }

    /**
     * Attributes which need to be encrypted.
     *
     * @returns {Array}
     */
    get encryptKeys() {
        return ['title', 'content', 'tags', 'tasks'];
    }

    get validateAttributes() {
        return ['title'];
    }

    get escapeAttributes() {
        return ['title', 'content', 'sharedBy'];
    }

    /**
     * Toggle favorite status.
     *
     * @returns {Object} this
     */
    toggleFavorite() {
        const isFavorite = this.get('isFavorite') === 1 ? 0 : 1;
        this.set('isFavorite', isFavorite);
        return this;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Note;


/***/ }),
/* 718 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Module__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__collections_Tags__ = __webpack_require__(719);
/**
 * @module collections/modules/Tags
 */





/**
 * Tag collection module
 *
 * @class
 * @extends module:collections/modules/Module
 * @license MPL-2.0
 */
class Tags extends __WEBPACK_IMPORTED_MODULE_2__Module__["a" /* default */] {

    /**
     * Tag collection.
     *
     * @see module:collections/Tags
     * @returns {Object}
     */
    get Collection() {
        return __WEBPACK_IMPORTED_MODULE_3__collections_Tags__["a" /* default */];
    }

    constructor() {
        super();

        // Add new replies
        this.channel.reply({
            addTags: this.addTags
        }, this);
    }

    /**
     * Add several tags.
     *
     * @param {Object} options
     * @param {String} options.profileId
     * @param {Array} options.tags
     * @returns {Promise}
     */
    addTags(options) {
        const promise = Promise.resolve();

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(options.tags || [], name => {
            promise.then(() => this.addTag(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({ name }, options)));
        });

        return promise;
    }

    /**
     * Add a new tag if it does not exist.
     *
     * @param {Object} options
     * @param {String} options.name - name of the tag
     * @param {String} options.profileId
     * @returns {Promise}
     */
    async addTag(options) {
        const opt = options;
        const id = await this.getId({ data: opt });
        const model = new this.Model({ id });

        model.setEscape(opt);
        return super.saveModel({ model });
    }

    /**
     * Save a tag model.
     *
     * @param {Object} options
     * @param {Object} options.model
     * @returns {Promise}
     */
    async saveModel(options) {
        // eslint-disable-line complexity
        const { model, data } = options;

        // If the tag is about to be removed, don't generate a new ID
        if (data && Number(data.trash) === 2) {
            return super.saveModel(options);
        }

        const id = await this.getId(options);

        // If it is not a new model and its ID has changed, remove it
        if (model.id && model.id !== id) {
            await this.remove({ model });
        }

        model.set({ id });
        return super.saveModel(options);
    }

    /**
     * Every tag has a unique ID generated by using sha256 function on their names.
     *
     * @param {Object} options
     * @param {Object} [options.data]
     * @param {Object} [options.model]
     * @returns {Promise}
     */
    async getId(options) {
        const name = (options.data || {}).name || options.model.get('name');
        const sha = await __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('components/Encryption', 'sha256', { text: name });

        return sha.join('');
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Tags;


/***/ }),
/* 719 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Pageable__ = __webpack_require__(198);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_Tag__ = __webpack_require__(720);
/**
 * @module collections/Tags
 */



/**
 * Tags collection.
 *
 * @class
 * @extends module:collections/Pageable
 * @license MPL-2.0
 */
class Tags extends __WEBPACK_IMPORTED_MODULE_0__Pageable__["a" /* default */] {

    get model() {
        return __WEBPACK_IMPORTED_MODULE_1__models_Tag__["a" /* default */];
    }

    /**
     * Fields by which models will be sorted.
     *
     * @returns {Object}
     */
    get comparators() {
        return {
            created: 'desc'
        };
    }

    /**
     * Filter conditions.
     *
     * @returns {Object}
     */
    get conditions() {
        return {
            active: { trash: 0 }
        };
    }

    constructor(...args) {
        super(...args);

        // Change the number of tags shown per page
        this.pagination.perPage = this.options.perPage || 20;
    }

    /**
     * Get models for a page number.
     * It uses infinite pagination.
     *
     * @param {Number} page - page number
     * @returns {Array} models
     */
    getPage(page) {
        const end = this.pagination.perPage * (page || 1);

        // Save the current page number
        this.pagination.current = page;

        // Slice the models
        return this.fullCollection.models.slice(0, end);
    }

    /**
     * This collection is never going to have a previous page
     * because it uses inifinite pagination.
     *
     * @returns {Boolean} always false
     */
    hasPreviousPage() {
        return false;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Tags;


/***/ }),
/* 720 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseModel__ = __webpack_require__(86);
/**
 * @module models/Tag
 */


/**
 * Tag model.
 *
 * @class
 * @extends module:models/BaseModel
 * @license MPL-2.0
 */
class Tag extends __WEBPACK_IMPORTED_MODULE_0__BaseModel__["a" /* default */] {

    get storeName() {
        return 'tags';
    }

    /**
     * Default values.
     *
     * @property {String} type - type of data stored in this model
     * @property {(String|Undefined)} id - undefined for default
     * @property {String} encryptedData
     * @property {String} name - the name of a tag
     * @property {Number} count - the number of notes attached to a tag
     * @property {Number} trash
     * @property {Date.now()} created
     * @property {Date.now()} updated
     * @returns {Object}
     */
    get defaults() {
        return {
            type: 'tags',
            id: undefined,
            encryptedData: '',
            name: '',
            count: 0,
            trash: 0,
            created: 0,
            updated: 0
        };
    }

    /**
     * Attributes that need to be encrypted.
     *
     * @returns {Array}
     */
    get encryptKeys() {
        return ['name'];
    }

    get validateAttributes() {
        return ['name'];
    }

    get escapeAttributes() {
        return ['name'];
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Tag;


/***/ }),
/* 721 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Controller__ = __webpack_require__(722);
/**
 * @module components/setup/main
 * @license MPL-2.0
 */



function initialize() {
    // On "start" request show the "setup" form
    __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.reply('components/setup', 'start', opt => new __WEBPACK_IMPORTED_MODULE_1__Controller__["a" /* default */](opt).init());

    // Add a new initializer to show the "setup" form on start
    __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('utils/Initializer', 'add', {
        name: 'App:components',
        callback: () => new __WEBPACK_IMPORTED_MODULE_1__Controller__["a" /* default */]().init()
    });
}

__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', initialize);

/***/ }),
/* 722 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_openpgp__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_openpgp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_openpgp__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_fileSaver__ = __webpack_require__(305);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__View__ = __webpack_require__(724);
/**
 * @module components/setup/Controller
 */









const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:components/setup/Controller');

/**
 * Show registration form on the first start.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Configs radio channel.
     *
     * @prop {Object}
     */
    get configsChannel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('collections/Configs');
    }

    /**
     * Profiles.
     *
     * @prop {Object} Backbone collection with profile model.
     */
    get profiles() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'findProfiles');
    }

    initialize() {
        this.fileSaver = __WEBPACK_IMPORTED_MODULE_5__utils_fileSaver__["a" /* default */];
    }

    onDestroy() {
        log('destroyed');
    }

    /**
     * @returns {Promise}
     */
    init() {
        // If it's not the first start, do nothing
        if (!this.isFirstStart() && !this.options.newIdentity) {
            return Promise.resolve(this.destroy());
        }

        log('this is the first start!');
        return new Promise((resolve, reject) => {
            this.promise = { resolve, reject };
            this.show();
            this.listenToEvents();
        });
    }

    /**
     * Check if it is the first start.
     * It is the first if either username, privateKey, or publicKey is empty.
     *
     * @returns {Boolean}
     */
    isFirstStart() {
        return !this.profiles.length;
    }

    /**
     * Render the view.
     */
    show() {
        this.view = new __WEBPACK_IMPORTED_MODULE_6__View__["a" /* default */](this.options);
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'show', { region: 'brand', view: this.view });
        this.view.triggerMethod('ready');
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        this.listenTo(this.view, 'destroy', this.onViewDestroy);
        this.listenTo(this.view, 'import', this.import);
        this.listenTo(this.view, 'export', this.export);
        this.listenTo(this.view, 'read:key', this.readKey);

        // Child view events
        this.listenTo(this.view, 'childview:check:user', this.checkUser);
        this.listenTo(this.view, 'childview:save', this.save);
    }

    /**
     * Resolve the promise and destroy itself.
     */
    onViewDestroy() {
        this.promise.resolve();
        this.destroy();
    }

    /**
     * Check if a username is taken.
     *
     * @fires view#name:taken
     * @param {String} username
     * @param {String} signalServer
     * @returns {Promise}
     */
    async checkUser({ username, signalServer }) {
        // Set the new signal server address
        this.options.signalServer = signalServer;
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('models/Signal', 'changeServer', { signal: signalServer });

        const view = this.view.getChildView('content');
        const profile = this.profiles.findWhere({ username });

        if (profile) {
            return Promise.resolve(view.triggerMethod('name:taken', { user: profile }));
        }

        let user;
        /*
         *  Removed 2018-09-21 because end users shouldn't have to install mongodb for features that don't 
         *   even exist.  This will get put back in when I (or someone) gets the chance to make the p2p
         *   stuff actually work.  Even then, it will probably not resemble what it does today.
         *   -BA
         *
          try {
            user = await Radio.request('models/Signal', 'findUser', {username});
        }
        catch (err) {
            view.triggerMethod('signalServer:error', {err});
            throw new Error(err);
        }
        */

        // Show the registration form if user does not exist on the server
        if (__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.isEmpty(user)) {
            this.options.username = username;
            return this.view.showRegister({ username });
        }

        log('the username is taken!!!', user);
        view.triggerMethod('name:taken', { user });
    }

    /**
     * Read a key.
     *
     * @fires view#key:error
     * @fires view#ready:key
     * @param {Object} {file}
     * @returns {Promise}
     */
    async readKey({ file }) {
        const armorKey = await new Promise(resolve => {
            const reader = new FileReader();
            reader.onload = evt => resolve(evt.target.result);
            reader.readAsText(file);
        });
        const { keys, err } = await __WEBPACK_IMPORTED_MODULE_3_openpgp__["key"].readArmored(armorKey);

        // Accept only a private key
        if (err || keys[0].isPublic()) {
            return this.view.getChildView('content').triggerMethod('key:error', {
                err: 'You need to upload your private key!'
            });
        }

        log('key is', keys[0]);
        this.view.getChildView('content').triggerMethod('ready:key', {
            key: keys[0]
        });
    }

    /**
     * Save OpenPGP key pair and username.
     *
     * @param {String} username
     * @param {Object} [keyData]
     * @param {Object} [keys]
     * @param {Boolean} register - true if a new account should be registered
     * @fires view#save:before
     * @fires view#save:after
     * @returns {Promise}
     */
    async save({ username, keyData, keys, register }) {

        // Break registration for now  
        register = false;

        const view = this.view.getChildView('content');
        view.triggerMethod('save:before');

        log('save keys are', keys);
        try {
            this.keys = keys ? keys : await this.generateKeyPair(keyData);
            await this.register({ username, register });
            await this.saveConfigs({ username });
            this.view.triggerMethod('save:after', { username });
        } catch (err) {
            log('save error', err);
            view.triggerMethod('save:error', { err });
        }
    }

    /**
     * Generate a new OpenPGP key pair.
     *
     * @param {String} passphrase
     * @param {String} username
     * @returns {Promise}
     */
    generateKeyPair({ passphrase, username }) {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/Encryption', 'generateKeys', {
            passphrase,
            userIds: [{ name: username }]
        });
    }

    /**
     * Claim the username on the signaling server.
     *
     * @param {String} username
     * @param {Boolean} register
     * @returns {Promise}
     */
    register({ username, register }) {
        if (!register) {
            return Promise.resolve();
        } else if (this.keys.publicKey.search('PGP PRIVATE KEY') !== -1) {
            throw new Error('Your private key will not be uploaded');
        }

        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('models/Signal', 'register', {
            username,
            publicKey: this.keys.publicKey
        });
    }

    /**
     * Save the username and key pair configs.
     *
     * @param {String} username
     * @returns {Promise}
     */
    async saveConfigs({ username }) {
        const configs = [{ name: 'encrypt', value: 1 }, { name: 'signalServer', value: this.options.signalServer }];
        const profile = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({}, this.keys, { username });

        // Create the profile and its configs
        await this.profiles.channel.request('createProfile', profile);
        await this.configsChannel.request('find', { profileId: username });
        return this.configsChannel.request('saveConfigs', {
            configs,
            noBackup: true,
            profileId: username
        });
    }

    /**
     * Save synchronization settings.
     *
     * @returns {Promise}
     */
    saveSync() {
        const value = this.view.getChildView('content').ui.sync.val().trim();
        return this.configsChannel.request('saveConfig', {
            config: { value, name: 'cloudStorage' },
            profileId: this.options.username
        });
    }

    /**
     * Download the private key.
     *
     * @returns {Promise}
     */
    async export() {
        await this.saveSync();
        const blob = new Blob([this.keys.privateKey], { type: 'text/plain' });
        this.fileSaver(blob, `Encryptic-key-${this.options.username}.asc`);
        this.view.destroy();
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 723 */,
/* 724 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__username_View__ = __webpack_require__(725);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__register_View__ = __webpack_require__(727);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__export_View__ = __webpack_require__(729);
/**
 * @module components/setup/View
 */



// Content views




/**
 * First start help view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(731);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'container text-center -auth';
    }

    regions() {
        return {
            content: '#welcome--content'
        };
    }

    /**
     * 1. Trigger "import" if the button is clicked.
     * 2. Trigger "export" if the last button is clicked.
     *
     * @prop {Object}
     */
    triggers() {
        return {
            'click #welcome--import': 'import',
            'click #welcome--last': 'export'
        };
    }

    events() {
        return {
            'click .btn--import': 'clickInput',
            'change #import--key': 'checkFile'
        };
    }

    childViewEvents() {
        return {
            'show:username': 'showUsername',
            'go:auth': 'destroy'
        };
    }

    /**
     * Show "username" view.
     */
    onRender() {
        this.showUsername();
    }

    /**
     * Show the view that checks if a username exists.
     */
    showUsername() {
        this.showChildView('content', new __WEBPACK_IMPORTED_MODULE_2__username_View__["a" /* default */](this.options));
    }

    /**
     * Show the view where a user can enter their passphrase or
     * upload their key pair to register a new account.
     */
    showRegister(data = {}) {
        this.showChildView('content', new __WEBPACK_IMPORTED_MODULE_3__register_View__["a" /* default */](data));
    }

    /**
     * Click on file input to show a dialog where a user
     * can choose their key pair.
     *
     * @param {Object} e
     */
    clickInput(e) {
        const id = this.$(e.currentTarget).attr('data-file');
        this.$(id).click();
    }

    /**
     * If a file is selected, trigger read:key event.
     *
     * @param {Object} e
     */
    checkFile(e) {
        const { files } = e.target;
        if (files.length) {
            this.trigger('read:key', { file: files[0] });
        }
    }

    /**
     * Warn a user that they need to keep their private key in a safe place.
     *
     * @param {Object} data
     */
    onSaveAfter(data) {
        this.showChildView('content', new __WEBPACK_IMPORTED_MODULE_4__export_View__["a" /* default */](data));
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 725 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ContentView__ = __webpack_require__(307);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__collections_configNames__ = __webpack_require__(301);
/**
 * @module components/setup/username/View
 */





/**
 * Ask for a user name.
 *
 * @class
 * @extends module:components/setup/ContentView
 * @license MPL-2.0
 */
class Username extends __WEBPACK_IMPORTED_MODULE_2__ContentView__["a" /* default */] {

    get template() {
        const tmpl = __webpack_require__(726);
        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.template(tmpl);
    }

    get importChannel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/importExport');
    }

    ui() {
        return {
            username: 'input[name=username]',
            signalServer: 'input[name=signalServer]',
            next: '#welcome--next',
            alert: '.alert',
            importInput: '#import--data',
            btnImport: '.btn--import'
        };
    }

    events() {
        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend(super.events(), {
            'click #welcome--import': 'triggerImport',
            'change #import--data': 'importData'
        });
    }

    triggers() {
        return {
            'click #welcome--auth': 'go:auth'
        };
    }

    serializeData() {
        return {
            newIdentity: this.options.newIdentity,
            signalServer: __WEBPACK_IMPORTED_MODULE_3__collections_configNames__["a" /* configNames */].signalServer
        };
    }

    initialize() {
        this.listenTo(this.importChannel, 'completed', this.showImportMessage);
    }

    /**
     * Show file dialog.
     *
     * @param {Object} e
     */
    triggerImport(e) {
        e.preventDefault();
        this.ui.importInput.click();
    }

    /**
     * Import everything from the previous device.
     *
     * @param {Object} e
     */
    importData(e) {
        const { files } = e.target;
        if (!files.length) {
            return;
        }

        this.importChannel.request('import', {
            files,
            signalServer: this.ui.signalServer.val().trim(),
            username: this.ui.username.val().trim()
        });
    }

    /**
     * Show a message with the import result.
     *
     * @param {Object} data={}
     */
    showImportMessage(data = {}) {
        this.showWarning(data.msg);
    }

    /**
     * Disable "next" button if username is empty.
     */
    onInputChange() {
        this.ui.next.attr('disabled', !this.ui.username.val().length);
    }

    /**
     * Check if a username is free.
     */
    onClickNext() {
        this.triggerMethod('check:user', {
            username: this.ui.username.val().trim(),
            signalServer: this.ui.signalServer.val().trim()
        });
    }

    /**
     * There was an error when trying to connect to the signaling server.
     *
     * @param {Object} {err} - error
     */
    onSignalServerError({ err }) {
        this.showWarning(`Signal server error #${err.status}`);
    }

    /**
     * If the username isn't free, enable all button and
     * show key pair upload button.
     */
    onNameTaken({ user }) {
        this.options.user = user;
        this.ui.btnImport.removeClass('hidden');
        this.showWarning('Signal server: username is taken');
    }

    /**
     * Before saving the key, check if the fingerprint matches
     * the fingerprint on the signaling server.
     *
     * @param {Object} {key}
     */
    onReadyKey({ key }) {
        const isEqual = this.options.user.fingerprint === key.primaryKey.fingerprint;

        if (isEqual) {
            return super.onReadyKey({ key });
        }

        return this.showWarning('Setup: wrong key');
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Username;


/***/ }),
/* 726 */
/***/ (function(module, exports) {

module.exports = "<% if (newIdentity) { %>\n<div class=\"col-xs-12\">\n    <button id=\"welcome--auth\" class=\"btn btn-lg btn-block btn-default\">\n        {{_.i18n('Back to auth')}}\n    </button>\n    <br/>\n</div>\n<% } %>\n\n<div class=\"col-xs-12 form-group text-left text--brand\">\n    <p>{{_.i18n('You opened Encryptic for the first time on this device.')}}</p>\n    <ul>\n        <li>{{_.i18n('Please enter your username.')}}</li>\n        <li>{{_.i18n('Or import your data from the previous device.')}}</li>\n    </ul>\n</div>\n\n<div class=\"col-xs-12 form-group\">\n    <input class=\"form-control col-xs-12 input-lg input--brand\" type=\"text\" name=\"username\" placeholder=\"{{_.i18n('Username')}}\" title=\"{{_.i18n('Username')}}\" />\n</div>\n\n<!--\n    Removed 2018-09-21 because end users shouldn't have to install mongodb for features that don't \n    even exist.  This will get put back in when I (or someone) gets the chance to make the p2p\n    stuff actually work.  Even then, it will probably not resemble what it does today.\n      -BA\n-->\n<div hidden class=\"col-xs-12 form-group\">\n    <input class=\"form-control col-xs-12 input-lg input--brand\" type=\"text\" name=\"signalServer\" value=\"{{signalServer}}\" placeholder=\"{{_.i18n('Signaling server')}}\" title=\"{{_.i18n('Signaling server')}}\" />\n</div>\n\n\n<div class=\"col-xs-12\" style=\"margin-bottom:10px\">\n    <div class=\"alert alert-warning hidden\"></div>\n\n    <input id=\"import--key\" class=\"hide\" type=\"file\">\n    <button data-file=\"#import--key\" type=\"button\" class=\"btn btn-default btn-block btn--import hidden\">\n        <i class=\"icon-key\"></i> {{_.i18n('Upload key pair')}}\n    </button>\n</div>\n\n<div class=\"col-xs-6\">\n    <input id=\"import--data\" class=\"hide\" type=\"file\"/>\n    <button id=\"welcome--import\" type=\"button\" class=\"btn btn-lg btn-block btn-warning pull-right\">\n        {{_.i18n('Import')}}\n    </button>\n</div>\n<div class=\"col-xs-6\">\n    <button id=\"welcome--next\" class=\"btn btn-lg btn-block btn-success pull-left\" disabled=\"disabled\">\n        {{_.i18n('Next')}}\n    </button>\n</div>\n"

/***/ }),
/* 727 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ContentView__ = __webpack_require__(307);
/**
 * @module components/setup/register/View
 */



/**
 * Register a new user on the signal server.
 *
 * @class
 * @extends module:components/setup/ContentView
 * @license MPL-2.0
 */
class Register extends __WEBPACK_IMPORTED_MODULE_1__ContentView__["a" /* default */] {

    get template() {
        const tmpl = __webpack_require__(728);
        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.template(tmpl);
    }

    /**
     * Register a new account.
     *
     * @prop {Boolean}
     */
    get register() {
        return true;
    }

    ui() {
        return {
            next: '#welcome--next',
            name: 'input[name=name]',
            password: 'input[name=password]',
            passwordRe: 'input[name=passwordRe]',
            alert: '.alert',
            form: '.form--register'
        };
    }

    triggers() {
        return {
            'click #welcome--previous': 'show:username'
        };
    }

    /**
     * Check if password and name fields aren't empty.
     * If they aren't, enable the "next" button.
     */
    onInputChange() {
        const isEmpty = !(this.ui.name.val().trim().length && this.checkPassword());
        this.ui.next.attr('disabled', isEmpty);
    }

    /**
     * Return true if password is not empty.
     *
     * @returns {Boolean}
     */
    checkPassword() {
        const password = this.ui.password.val().trim();
        return password === this.ui.passwordRe.val() && password.length !== 0;
    }

    /**
     * Claim the username if "next" button is clicked.
     */
    onClickNext() {
        this.triggerMethod('save', {
            username: this.options.username,
            register: true,
            keyData: {
                username: this.ui.name.val().trim(),
                passphrase: this.ui.password.val().trim()
            }
        });
    }

    /**
     * Hide the form and show "wait" block.
     */
    onSaveBefore() {
        this.ui.form.addClass('hidden');
        this.toggleWait();
    }

    onSaveError(data) {
        super.onSaveError(data);
        this.ui.form.removeClass('hidden');
        this.toggleWait();
    }

    /**
     * Show either the form or wait block.
     */
    toggleWait() {
        this.$('.welcome--wait').toggleClass('hidden');
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Register;


/***/ }),
/* 728 */
/***/ (function(module, exports) {

module.exports = "<div class=\"form--register\">\n    <div class=\"col-xs-12 text-left text--brand\">\n        <p>{{_.i18n('You are about to register a new Encryptic account. To continue,')}}</p>\n    </div>\n\n    <div class=\"col-xs-12\">\n        <div class=\"alert alert-danger hidden\"></div>\n    </div>\n\n    <div class=\"col-xs-12\">\n        <input id=\"import--data\" class=\"hide\" type=\"file\">\n        <button data-file=\"#import--data\" type=\"button\" class=\"btn btn-default btn-block btn-success btn--import -small\">\n            <i class=\"icon-key\"></i> {{ _.i18n('Upload existing OpenPGP key') }}\n        </button>\n        <br />\n    </div>\n\n    <div class=\"col-xs-12 text-left text--brand\">\n        <p>{{_.i18n('Or enter your details below')}}:</p>\n    </div>\n\n    <div class=\"col-xs-12 form-group\">\n        <input type=\"name\" name=\"name\" value=\"{{username}}\" placeholder=\"{{_.i18n('Your name')}}\" value=\"\" class=\"form-control col-xs-12 input-lg input--brand\" />\n    </div>\n\n    <div class=\"col-xs-12 form-group\">\n        <input type=\"password\" placeholder=\"{{_.i18n('Passphrase')}}\" class=\"form-control col-xs-12 input-lg input--brand\" name=\"password\"/>\n    </div>\n\n    <div class=\"col-xs-12 form-group\">\n        <input type=\"password\" placeholder=\"{{_.i18n('Re-enter the passphrase')}}\" class=\"form-control col-xs-12 input-lg input--brand\" name=\"passwordRe\"/>\n    </div>\n\n    <div class=\"col-xs-12 form-group text-left text--brand\">\n        <p>{{_.i18n('Choose a strong and hard to guess passphrase')}}.</p>\n        <p><b>{{_.i18n('Please make sure you remember the passphrase you have set')}}.</b></p>\n    </div>\n\n    <div class=\"col-xs-6\">\n        <button id=\"welcome--previous\" class=\"btn btn-lg btn-block btn-success pull-right\">\n            {{_.i18n('Previous')}}\n        </button>\n    </div>\n    <div class=\"col-xs-6\">\n        <button id=\"welcome--next\" class=\"btn btn-lg btn-block btn-success pull-left\" disabled=\"disabled\">\n            {{_.i18n('Next')}}\n        </button>\n    </div>\n</div>\n\n<div class=\"welcome--wait hidden\">\n    <p class=\"text-center loader\" style=\"font-size:3em\">\n        <i class=\"icon icon-arrows animate-spin\"></i>\n    </p>\n    <h3 class=\"text-center\">{{_.i18n('Please wait')}}...</h3>\n    <p class=\"text-center welcome--text\">\n        {{_.i18n('We are generating your encryption key and registering a new account.')}}\n    </p>\n</div>\n"

/***/ }),
/* 729 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/setup/export/View
 */



/**
 * Export the generated key.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Export extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(730);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    ui() {
        return {
            sync: '[name=sync]'
        };
    }

    className() {
        return 'row';
    }

    serializeData() {
        return this.options;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Export;


/***/ }),
/* 730 */
/***/ (function(module, exports) {

module.exports = "<div class=\"form--register\">\n    <div class=\"col-xs-12 text-left text--brand\">\n        <p>{{_.i18n('You successfuly claimed username')}} <mark>{{username}}</mark>.</p>\n        <p>{{_.i18n('To keep your notes available on every device, choose one of the synchronization options')}}:</p>\n    </div>\n\n    <div class=\"col-xs-12 form-group\">\n        <select class=\"form-control col-xs-12 input-lg input--brand\" name=\"sync\">\n            <!-- <option value=\"p2p\">Peer to peer</option> -->\n            <option value=\"p2p\">None</option>\n            <option value=\"dropbox\">Dropbox</option>\n            <option value=\"remotestorage\">RemoteStorage</option>\n        </select>\n    </div>\n\n    <div class=\"col-xs-12 text-left text--brand\">\n        <p><b>{{_.i18n('Please download your private key and keep it in a safe place. If you lose your private key, you will lose your data and your username.')}}</b></p>\n    </div>\n\n    <div class=\"col-xs-12\">\n        <button id=\"welcome--last\" class=\"btn btn-lg btn-block btn-success\">\n            <i class=\"icon-lock\"></i>\n            {{_.i18n('Download my key')}}\n        </button>\n    </div>\n</div>\n"

/***/ }),
/* 731 */
/***/ (function(module, exports) {

module.exports = "<header>\n    <h1 class=\"header--brand\">{{_.i18n('Encryptic')}}</h1>\n</header>\n<div class=\"container-fluid container--white\" id=\"welcome--content\"></div>\n"

/***/ }),
/* 732 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Encryption__ = __webpack_require__(733);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__auth_Controller__ = __webpack_require__(816);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__encrypt_Controller__ = __webpack_require__(819);
/**
 * @module components/encryption/main
 */





function initialize() {
    // Instantiate encryption model
    new __WEBPACK_IMPORTED_MODULE_0__components_Encryption__["a" /* default */]();

    // Don't start the app until auth is successful
    __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('utils/Initializer', 'add', {
        name: 'App:auth',
        callback: () => new __WEBPACK_IMPORTED_MODULE_2__auth_Controller__["a" /* default */]().init()
    });

    // In case if a user enabled/disabled encryption, encrypt/decrypt data
    __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('utils/Initializer', 'add', {
        name: 'App:auth',
        callback: () => new __WEBPACK_IMPORTED_MODULE_3__encrypt_Controller__["a" /* default */]().init()
    });
}

__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.once('App', 'init', initialize);

/***/ }),
/* 733 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_openpgp__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_openpgp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_openpgp__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sjcl__ = __webpack_require__(199);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sjcl___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_sjcl__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/**
 * @module components/Encryption
 */







const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:components/Encryption');

/**
 * Encryption class.
 * Almost every method in this class can be requested with Radio requests.
 *
 * @class
 * @extends module:workers/Module
 * @license MPL-2.0
 */
class Encryption {

    /**
     * Radio channel (components/Encryption).
     *
     * @prop {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('components/Encryption');
    }

    /**
     * App configs.
     *
     * @prop {Object}
     */
    get configs() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Configs', 'findConfigs');
    }

    /**
     * A user's profile.
     *
     * @prop {Object}
     */
    get user() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'getUser').attributes;
    }

    constructor(options = {}) {
        this.options = options;
        this.openpgp = __WEBPACK_IMPORTED_MODULE_0_openpgp__;

        // Disable compression for performance
        this.openpgp.config.compression = 0;

        // Don't use native crypto to use WebWorkers
        this.openpgp.config.use_native = false; // eslint-disable-line
        this.openpgp.initWorker({ path: 'scripts/openpgp.worker.js' });

        // Reply to core requests
        this.channel.reply({
            // Core methods
            sha256: this.sha256,
            random: this.random,
            readKeys: this.readKeys,
            readUserKey: this.readUserKey,
            generateKeys: this.generateKeys,
            changePassphrase: this.changePassphrase,
            sign: this.sign,
            verify: this.verify,
            encrypt: this.encrypt,
            decrypt: this.decrypt,
            // Backbone related methods
            encryptModel: this.encryptModel,
            decryptModel: this.decryptModel,
            encryptCollection: this.encryptCollection,
            decryptCollection: this.decryptCollection,
            saveKeys: this.saveKeys,
            getUserKeys: this.getUserKeys
        }, this);
    }

    /**
     * Calculate sha256 hash of the string set.
     *
     * @public
     * @param {Object} options={}
     * @param {String} options.text
     * @returns {Promise}
     */
    sha256(options = {}) {
        return Promise.resolve(__WEBPACK_IMPORTED_MODULE_1_sjcl___default.a.hash.sha256.hash(options.text));
    }

    /**
     * Generate random characters.
     *
     * @public
     * @param {Object} options
     * @param {Number} options.number
     * @returns {Promise} resolve with string
     */
    random(options = {}) {
        const random = __WEBPACK_IMPORTED_MODULE_1_sjcl___default.a.random.randomWords(options.number || 4, 0);
        return Promise.resolve(__WEBPACK_IMPORTED_MODULE_1_sjcl___default.a.codec.hex.fromBits(random));
    }

    /**
     * Read the user's key pairs and other users' public keys.
     *
     * @public
     * @param {Object} options=this.options
     * @param {String} options.privateKey
     * @param {String} options.passphrase
     * @returns {Object}
     */
    readKeys(options = this.options) {
        // console.log('Encryption.js: readKeys() start');
        const success = (async () => {
            this.options = __WEBPACK_IMPORTED_MODULE_3_underscore___default.a.extend(this.options, options);
            let privateKey = this.options.privateKey || this.user.privateKey;
            privateKey = (await this.openpgp.key.readArmored(privateKey)).keys[0];
            /**
             * A user's key pairs.
             *
             * @prop {Object}
             * @prop {Object} publicKeys
             * @prop {Object} privateKey - the private key
             */
            this.keys = {
                privateKey,
                privateKeys: [privateKey],
                publicKeys: {}
            };

            // Try to decrypt the private key
            if ((await this.keys.privateKey.decrypt(options.passphrase)) === false) {
                return Promise.reject('Cannot decrypt the private key');
            }

            // My public key
            this.keys.publicKeys[this.user.username] = this.keys.privateKeys[0].toPublic();

            return this.readPublicKeys().then(() => {
                return this.keys;
            });
        })().then(successmessage => {
            // console.log("successmessage: ");
            // console.log(successmessage);
            __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/Encryption', 'saveKeys', successmessage);
            return successmessage;
        });
        // console.log('Encryption.js: readKeys() end');
        return success;
    }

    saveKeys(keys) {
        this.keys = keys;
    }

    /**
     * Read public keys of the trusted users.
     *
     * @protected
     * @todo user profileId when fetching users?
     * @param {Object} options
     * @returns {Promise}
     */
    readPublicKeys() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Users', 'find').then(collection => {
            // console.log("readPublicKeys():");
            collection.each(model => {
                if (!model.get('pendingAccept')) {
                    // console.log({model});
                    this.readUserKey({ model });
                }
            });
        });
    }

    /**
     * Read a user's public key and save it to this.keys.publicKeys
     *
     * @public
     * @param {Object} model - user model
     * @returns {Object} key
     */
    readUserKey({ model }) {
        // console.log("readUserKey()");
        // console.log(model.attributes);
        const pubkey = model.attributes.publicKey;
        (async () => {
            const key = await this.openpgp.key.readArmored(pubkey).keys[0];
            this.keys.publicKeys[model.get('username')] = key;
            return key;
        })();
    }

    /**
     * Generate new key pair.
     *
     * @public
     * @param {Object} options
     * @param {Array} options.userIds
     * @param {String} options.passphrase
     * @returns {Promise} - resolves with an object {privateKey, publicKey}
     */
    generateKeys(options) {
        const opt = __WEBPACK_IMPORTED_MODULE_3_underscore___default.a.extend({
            numBits: 2048
        }, options);

        log('generating new key pair...');
        return this.openpgp.generateKey(opt).then(key => {
            return {
                privateKey: key.privateKeyArmored,
                publicKey: key.publicKeyArmored
            };
        });
    }

    /**
     * Change the passphrase of a private key.
     *
     * @public
     * @param {Object} options
     * @param {String} options.newPassphrase
     * @param {String} options.oldPassphrase
     * @returns {Promise} resolves with the new private key
     */
    changePassphrase(options) {
        const privateKey = this.openpgp.key.readArmored(this.user.privateKey).keys[0];

        // Try to decrypt the private key
        if (!privateKey.decrypt(options.oldPassphrase)) {
            return Promise.reject('Wrong old passphrase');
        }

        // Encrypt the key with the new passphrase
        let newKeyArmored;
        try {
            const packets = privateKey.getAllKeyPackets();
            for (let i = 0; i < packets.length; i++) {
                packets[i].encrypt(options.newPassphrase);
            }

            newKeyArmored = privateKey.armor();
        } catch (e) {
            return Promise.reject('Setting new passphrase failed');
        }

        return Promise.resolve(newKeyArmored);
    }

    /**
     * Sign a message using the user's private key.
     *
     * @public
     * @param {String} data
     * @returns {Promise}
     */
    sign({ data }) {
        // console.log("Before data:");
        // console.log(data)
        const message = this.openpgp.message.fromText(data);
        // console.log('after data: ');
        // console.log(message);
        return this.openpgp.sign({ message, privateKeys: this.keys.privateKey }).then(sign => sign.data);
    }

    /**
     * Verify a signature.
     *
     * @public
     * @param {Object} options
     * @param {String} options.message
     * @param {Array}  [options.publicKeys]
     * @param {String} [options.username] - the name of the user who signed
     * the message
     * @returns {Promise}
     */
    verify(options) {
        const message = this.openpgp.cleartext.readArmored(options.message);
        const keys = options.publicKeys || this.getUserKeys(options.username);
        return this.openpgp.verify({ message, publicKeys: keys.publicKeys || keys });
    }

    /**
     * Return an object that contains a user's public key.  This was originally marked protected, but
     * in components/settings/show/encryption/View.js we then go out of our way to obtain the private
     * key in a way that's neither maintainable nor compatible with the current version (4.0.1) of
     * openpgpjs.  As such (and since anyone can get the private key by looking in localstorage anyway),
     * I'm going to be practical here.
     *
     * @public
     * @param {String} [username]
     * @return {Object} - {privateKeys, publicKeys}
     */
    getUserKeys(username) {
        const publicKeys = [this.keys.publicKeys[this.user.username]];

        if (username && this.keys.publicKeys[username] && username !== this.user.username) {
            publicKeys.push(this.keys.publicKeys[username]);
        }

        return {
            publicKeys,
            privateKey: this.keys.privateKey,
            privateKeys: this.keys.privateKeys
        };
    }

    /**
     * Encrypt string data with PGP keys.
     * If keys aren't provided, it will use the keys from this.user property.
     *
     * @public
     * @param {Object} options
     * @param {String} options.data - data that should be encrypted
     * @param {String} [options.username] - the name of the user for whom
     * it should be encrypted
     * @returns {Promise} - resolves with an encrypted string
     */
    async encrypt(options) {
        const keys = this.getUserKeys(options.username);
        /*  Old.  Trying the bottome one first.
        options.message = this.openpgp.message.fromText(options.data);
        const crypt  = this.openpgp.encrypt(_.extend(options, keys))
        .then(enc => {
            return enc.data;    
        });
        return crypt;
        */

        // console.log("encrypt(): unmodified options");
        // console.log(options);
        // openpgp 4 needs a 'message', not 'data'
        options.message = this.openpgp.message.fromText(options.data);
        options.publicKeys = keys.publicKeys;
        options.privateKeys = keys.privateKeys;
        // console.log("encrypt(): modified options");
        // console.log(options);
        // console.log('running openpgp.encrypt()');
        const enc = await this.openpgp.encrypt(options);
        // console.log("enc");
        // console.log(enc.data);
        return enc.data;
    }

    /**
     * Decrypt armored data with PGP keys.
     * If keys aren't provided, it will use the keys from this.user property.
     *
     * @public
     * @param {Object} options
     * @param {String} options.message  - message which should be decrypted
     * @param {String} [options.username] - the name of the user who encrypted
     * the message
     * @returns {Promise}
     */
    async decrypt(options) {
        const t0 = performance.now();
        const keys = this.getUserKeys(options.username);
        // console.log('Encryption.js: readArmored() start');
        const t3 = performance.now();
        const data = __WEBPACK_IMPORTED_MODULE_3_underscore___default.a.extend({}, keys, options, {
            message: await this.openpgp.message.readArmored(options.message)
        });
        const t4 = performance.now();
        console.log(`Encryption.js: readArmored() end +${(t4 - t3).toString()}`);
        // console.log(data);
        const plaintext = this.openpgp.decrypt(data).then(plaintext => {
            // console.log('Encryption.js: this.openpgp.decrypt (first then()):');
            // console.log(plaintext.data);
            return plaintext.data;
        });
        const t1 = performance.now();
        console.log(`Encryption.js: decrypt() end +${(t1 - t0).toString()}`);
        return plaintext;
    }

    /**
     * Encrypt a model.
     *
     * @public
     * @param {Object} model
     * @param {String} [username]
     * @returns {Promise} resolve with the model
     */
    async encryptModel({ model, username }) {
        // Don't encrypt if encryption is disabled
        if (!Number(this.configs.encrypt)) {
            log('do not encrypt');
            return Promise.resolve(model);
        }

        const data = __WEBPACK_IMPORTED_MODULE_3_underscore___default.a.pick(model.attributes, model.encryptKeys);

        // console.log("model");
        // console.log(model);
        const encryptedData = await this.encrypt({ username, data: JSON.stringify(data) });
        model.set({ encryptedData });
        return model;
    }

    /**
     * Decrypt a model.
     *
     * @public
     * @param {Object} model
     * @param {String} [username]
     * @returns {Promise} resolves with the model
     */
    async decryptModel({ model, username }) {
        const message = model.attributes.encryptedData;

        if (!message.length) {
            return model;
        }

        const decrypted = this.decrypt({ message, username }).then(msg => {
            // console.log("decryptModel: this.decrypt returned: ");
            // console.log(msg);
            model.set(JSON.parse(msg));
            return model;
        });
    }

    /**
     * Encrypt every model in a collection.
     *
     * @public
     * @param {Object} collection
     * @param {String} [username]
     * @returns {Promise}
     */
    encryptCollection({ collection, username }) {
        // Don't decrypt if the collection is empty or encryption is disabled
        if (!collection.length || !Number(this.configs.encrypt)) {
            return Promise.resolve(collection);
        }

        const promises = [];
        collection.each(model => {
            promises.push(this.encryptModel({ model, username }));
        });

        return Promise.all(promises).then(() => collection);
    }

    /**
     * Decrypt every model in a collection.
     *
     * @public
     * @param {Object} collection
     * @param {String} [username]
     * @returns {Promise}
     */
    decryptCollection({ collection, username }) {
        if (!collection.length) {
            return Promise.resolve(collection);
        }

        const promises = [];
        collection.each(model => {
            promises.push(this.decryptModel({ model, username }));
        });

        return Promise.all(promises).then(() => collection);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Encryption;


/***/ }),
/* 734 */,
/* 735 */,
/* 736 */,
/* 737 */,
/* 738 */,
/* 739 */,
/* 740 */,
/* 741 */,
/* 742 */,
/* 743 */,
/* 744 */,
/* 745 */,
/* 746 */,
/* 747 */,
/* 748 */,
/* 749 */,
/* 750 */,
/* 751 */,
/* 752 */,
/* 753 */,
/* 754 */,
/* 755 */,
/* 756 */,
/* 757 */,
/* 758 */,
/* 759 */,
/* 760 */,
/* 761 */,
/* 762 */,
/* 763 */,
/* 764 */,
/* 765 */,
/* 766 */,
/* 767 */,
/* 768 */,
/* 769 */,
/* 770 */,
/* 771 */,
/* 772 */,
/* 773 */,
/* 774 */,
/* 775 */,
/* 776 */,
/* 777 */,
/* 778 */,
/* 779 */,
/* 780 */,
/* 781 */,
/* 782 */,
/* 783 */,
/* 784 */,
/* 785 */,
/* 786 */,
/* 787 */,
/* 788 */,
/* 789 */,
/* 790 */,
/* 791 */,
/* 792 */,
/* 793 */,
/* 794 */,
/* 795 */,
/* 796 */,
/* 797 */,
/* 798 */,
/* 799 */,
/* 800 */,
/* 801 */,
/* 802 */,
/* 803 */,
/* 804 */,
/* 805 */,
/* 806 */,
/* 807 */,
/* 808 */,
/* 809 */,
/* 810 */,
/* 811 */,
/* 812 */,
/* 813 */,
/* 814 */,
/* 815 */,
/* 816 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__View__ = __webpack_require__(817);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_debug__);
/**
 * @module components/encryption/auth/Controller
 */





const log = __WEBPACK_IMPORTED_MODULE_3_debug___default()('lav:components/encryption/auth/Controller');

/**
 * Auth controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * App settings.
     *
     * @prop {Object}
     */
    get configs() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Configs', 'findConfigs');
    }

    onDestroy() {
        log('destroy');
    }

    /**
     * Ask a user for their encryption password.
     *
     * @returns {Promise} resolved once auth is successful
     */
    init() {
        return new Promise((resolve, reject) => {
            this.promise = { resolve, reject };
            // why?  -ba
            this.fetchShow();
        });
    }

    /**
     * Fetch profiles and show the auth view.
     *
     * @returns {Promise}
     */
    fetchShow() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Profiles', 'find').then(profiles => {
            this.profiles = profiles;
            this.show();
        }).catch(err => log('error', err));
    }

    /**
     * Render the view.
     */
    show() {
        // this is insane.  No.  -ba
        // log('profiles', this.profiles);
        this.view = new __WEBPACK_IMPORTED_MODULE_2__View__["a" /* default */]({ profiles: this.profiles });
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'show', {
            region: 'brand',
            view: this.view
        });

        this.view.triggerMethod('ready');
        this.listenToEvents();
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        this.listenTo(this.view, 'destroy', this.onViewDestroy);
        this.listenTo(this.view, 'submit', this.onSubmit);
        this.listenTo(this.view, 'setup', this.onSetup);
    }

    /**
     * Stop listening to view events.
     */
    onViewDestroy() {
        this.stopListening(this.view);
    }

    /**
     * Try to read the keys and decrypt the private key.
     *
     * @returns {Promise}
     */
    onSubmit() {
        const passphrase = this.view.ui.password.val().trim();
        const username = this.view.ui.username.val().trim();

        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Profiles', 'setUser', { username });
        //Radio.request('components/Encryption', 'readKeys', {passphrase})
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/Encryption', 'readKeys', { passphrase })
        // Fetch a user's configs
        .then(() => {
            // console.log("find()");
            __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Configs', 'find', { profileId: username });
        }).then(() => {
            this.onSuccess();
        }).catch(error => {
            log('readKeys error', error);
            this.view.triggerMethod('auth:error', { error });
            return error;
        });
    }

    /**
     * Show the setup form to register a new account.
     *
     * @returns {Promise}
     */
    async onSetup() {
        await __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/setup', 'start', { newIdentity: true });
        this.fetchShow();
    }

    /**
     * Resolve the promise and destroy the view.
     */
    onSuccess() {
        this.promise.resolve();
        this.view.destroy();
        return true;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 817 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/encryption/auth/View
 */



/**
 * Auth view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(818);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    ui() {
        return {
            password: 'input[name=password]',
            username: 'select[name=username]',
            btn: '.btn[type=submit]'
        };
    }

    triggers() {
        return {
            'submit .form-wrapper': 'submit',
            'click .btn--setup': 'setup'
        };
    }

    serializeData() {
        return {
            profiles: this.options.profiles.toJSON()
        };
    }

    /**
     * Focus on password input.
     */
    onReady() {
        this.ui.btn.css('position', 'relative');
        this.ui.password.focus();
    }

    /**
     * Password is wrong.
     */
    onAuthError() {
        this.ui.password.val('').focus();

        // Shake the button 2 times
        this.animateBtn().animateBtn();
    }

    /**
     * Shake the submit button to indicate that the password is incorrect.
     *
     * @returns {Object} this
     */
    animateBtn() {
        this.ui.btn.animate({ left: -10 }, 60).animate({ left: 10 }, 60).animate({ left: 0 }, 60);

        return this;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 818 */
/***/ (function(module, exports) {

module.exports = "<div class=\"container text-center -auth\">\n    <form action=\"#\" class=\"form-wrapper\" role=\"form\" method=\"post\">\n\n        <table>\n            <tr>\n                <td style=\"width:50%\"><img src=\"../../../../images/Encryptic-web2.0-transparent.png\" class=\"logo-lock\"></h1></td>\n                <td style=\"width:50%\"><div class=\"form-group form--icon\">\n                    <!-- <input name=\"username\" class=\"form-control input-lg input--brand\"\n                    placeholder=\"{{ _.i18n('Username') }}\" required=\"\" /> -->\n                    <select name=\"username\" class=\"form-control input-lg input--brand\">\n                    <% _.each(profiles, function(profile) { %>\n                        <option value=\"{{profile.username}}\">{{profile.username}}</option>\n                    <% }) %>\n                    </select>\n                    </div> \n                </td>\n            </tr>\n            <tr>\n                <td><h1 class=\"header--brand\">Encryptic</h1>\n                    The open source note-taking app</td>\n                <td>\n                    <div class=\"form-group form--icon\">\n                        <input class=\"form-control input-lg input--brand\" type=\"password\" name=\"password\"\n                        placeholder=\"{{ _.i18n('Encryption Password') }}\" required=\"\" />\n                        <div class=\"form-group\">\n                                <button class=\"btn btn-lg btn-block btn--brand\" type=\"submit\">\n                                    {{ _.i18n('Unlock') }}\n                                </button>\n                        </div>\n                    </div> \n                </td>\n            </tr>\n       </table>\n        <div class=\"form-group\">\n            <button class=\"btn btn-lg btn-block btn--brand btn--setup\" type=\"button\" style=\"border:0\">\n                {{ _.i18n('Create a new identity') }}\n            </button>\n        </div>\n    </form>\n</div>\n"

/***/ }),
/* 819 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__View__ = __webpack_require__(820);
/**
 * @module components/encryption/encrypt/Controller
 */






const log = __WEBPACK_IMPORTED_MODULE_3_debug___default()('lav:components/encryption/encrypt/Controller');

/**
 * Decrypts or encrypts data after disabling or enabling encryption.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * App settings.
     *
     * @prop {Object}
     */
    get configs() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Configs', 'findConfigs');
    }

    /**
     * Collections which use encryption.
     *
     * @prop {Array}
     */
    get collectionNames() {
        return ['Notes', 'Notebooks', 'Tags', 'Edits', 'Shadows'];
    }

    onDestroy() {
        log('destroy');
        if (this.promise) {
            this.view.destroy();
            this.promise.resolve();
        }
    }

    init() {
        // Do nothing if encryption backup is empty
        if (__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.isEmpty(this.configs.encryptBackup)) {
            return Promise.resolve(this.destroy());
        }

        return new Promise((resolve, reject) => {
            this.promise = { resolve, reject };
            this.show();
            this.listenToEvents();
        });
    }

    /**
     * Show the view.
     */
    show() {
        this.view = new __WEBPACK_IMPORTED_MODULE_4__View__["a" /* default */]({ configs: this.configs });
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'show', {
            region: 'brand',
            view: this.view
        });
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        log('listening to events');
        this.listenTo(this.view, 'proceed', this.proceed);
    }

    /**
     * Empty encryption backups.
     *
     * @returns {Promise}
     */
    resetBackup() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Configs', 'saveConfig', {
            config: { name: 'encryptBackup', value: {} }
        });
    }

    /**
     * Start encrypting/decrypting everything.
     *
     * @returns {Promise}
     */
    proceed() {
        log('proceed');

        let promise = Promise.resolve();
        this.view.showProgress();

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(this.collectionNames, (name, i) => {
            promise = promise.then(() => {
                return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request(`collections/${name}`, 'find', { perPage: 0 });
            }).then(collection => this.saveCollection(collection, i + 1));
        });

        return promise.then(() => this.resetBackup())
        // Destroy the view after 350ms to show progress
        .then(() => {
            setTimeout(() => this.destroy(), 350);
        }).catch(err => {
            log('error', err);
            this.promise.reject(err);
        });
    }

    /**
     * Save a collection.
     *
     * @param {Object} collection
     * @param {Number} count
     * @returns {Promise}
     */
    saveCollection(collection, count) {
        const encrypt = Number(this.configs.encrypt);
        const promises = [];

        collection.each(model => {
            // Prevent it from saving encryptedData if encryption is disabled
            if (!encrypt) {
                model.set('encryptedData', '');
            }

            promises.push(model.channel.request('saveModel', { model }));
        });

        return Promise.all(promises).then(() => {
            this.view.changeProgress({ count, max: this.collectionNames.length });
        });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 820 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/encryption/encrypt/View
 */



/**
 * Shows encryption/decryption process.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(821);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'container text-center -auth';
    }

    triggers() {
        return {
            'click #btn--proceed': 'proceed'
        };
    }

    ui() {
        return {
            proceed: '#container--encryption--proceed',
            progress: '#container--encryption--progress',
            progressBar: '#progress'
        };
    }

    serializeData() {
        const encrypt = Number(this.options.configs.encrypt);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({}, this.options.configs, {
            title: __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n(encrypt ? 'Encrypting' : 'Decrypting')
        });
    }

    /**
     * Show the progress bar and hide the proceed button.
     */
    showProgress() {
        this.ui.proceed.addClass('hide');
        this.ui.progress.removeClass('hide');
    }

    /**
     * Change progress bar status.
     *
     * @param {Number} count
     * @param {Number} max
     */
    changeProgress({ count, max }) {
        const width = Math.floor(count * 100 / max);
        this.ui.progressBar.css('width', `${width}%`);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 821 */
/***/ (function(module, exports) {

module.exports = "<header>\n    <h1 class=\"header--brand\"><img src=\"../../../../images/Encryptic-web2.0-transparent.png\" class=\"logo-lock\"></h1>\n    <h1 class=\"header--brand\">{{title}}</h1>\n</header>\n\n<div class=\"container-fluid container--white\" id=\"container--encryption--proceed\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 text-left text--brand\">\n        <% if (!encrypt) { %>\n            <p>{{_.i18n('Data decryption after disabling encryption')}}</p>\n        <% } else { %>\n            <p>{{_.i18n('Data encryption after enabling encryption')}}</p>\n        <% } %>\n        </div>\n\n        <div class=\"col-xs-12\">\n            <button type=\"button\" class=\"btn btn-lg btn-block btn-warning pull-left\" id=\"btn--proceed\">\n                {{_.i18n('Proceed')}}\n            </button>\n        </div>\n    </div>\n</div>\n\n<div class=\"container-fluid hide\" id=\"container--encryption--progress\">\n    <div class=\"progress progress-striped active\">\n        <div class=\"progress-bar progress-bar-success\" id=\"progress\"\n            aria-valuenow=\"2\" aria-valuemin=\"0\" aria-valuemax=\"\"\n            role=\"progressbar\" style=\"width: 0%\"></div>\n    </div>\n\n    <h4 class=\"text-center\">{{ _.i18n('Please wait') }}...</h4>\n</div>\n"

/***/ }),
/* 822 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__View__ = __webpack_require__(823);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/**
 * @module components/confirm/Controller
 */






const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:components/confirm/Controller');

/**
 * Confirm controller.
 * The component can be used to show confirmation dialogs.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Radio channel (components/confirm)
     *
     * @returns {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/confirm');
    }

    /**
     * @listens this.channel#show - calls this.init method
     */
    constructor() {
        super();

        this.channel.reply({
            show: this.init
        }, this);
    }

    /**
     * Initialize a new confirmation dialog.
     *
     * @param {Object} options
     * @param {String} options.content - content of the confirm dialog
     * @param {String} [options.title] - title of the confirm dialog
     * @param {Array} [options.buttons]  - confirmation buttons
     * @param {String} options.buttons.name
     * @param {String} options.buttons.event - event fired after the
     * button is clicked
     * @param {String} [options.buttons.class] - CSS class of the button
     * @returns {Promise}
     */
    init(options) {
        return new Promise((resolve, reject) => {
            this.show(options, { resolve, reject });
        });
    }

    /**
     * Show a confirmation dialog.
     *
     * @fires components/markdown#render
     * @param {Object} options
     * @param {Object} promise
     */
    show(options, promise) {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/markdown', 'render', {
            content: options.content
        }).then(content => {
            const view = new __WEBPACK_IMPORTED_MODULE_3__View__["a" /* default */](__WEBPACK_IMPORTED_MODULE_2_underscore___default.a.extend({}, options, { content }));
            __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'show', {
                view,
                region: 'modal'
            });

            return this.listenToView({ view, promise });
        }).catch(err => log('error', err));
    }

    /**
     * Listen to view events.
     *
     * @param {Object} data
     * @param {Object} data.view
     * @param {Object} data.promise
     */
    listenToView(data) {
        this.listenTo(data.view, 'answer', e => this.onAnswer(e, data));
        this.listenTo(data.view, 'destroy', () => this.onViewDestroy(data));
    }

    /**
     * A user answered to the confirmation dialog.
     *
     * @param {Object} e
     * @param {String} e.answer
     * @param {Object} data
     */
    onAnswer(e, data) {
        data.promise.resolved = true; // eslint-disable-line
        data.promise.resolve(e.answer);
        data.view.destroy();
    }

    /**
     * Stop listening to view events.
     *
     * @param {Object} data
     */
    onViewDestroy(data) {
        // Resolve the promise with reject if it wasn't resolved
        if (!data.promise.resolved) {
            data.promise.resolve('reject');
        }

        this.stopListening(data.view);
    }

}
/* unused harmony export default */


__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.once('App', 'init', () => new Controller());

/***/ }),
/* 823 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_mousetrap__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_mousetrap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_mousetrap__);
/**
 * @module components/confirm/View
 */




/**
 * Confirm view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(824);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'modal fade';
    }

    /**
     * Events.
     *
     * @returns {Object}
     */
    events() {
        return {
            'click .modal-footer .btn': 'onBtnClick'
        };
    }

    /**
     * Bind tab key to switch between buttons.
     */
    initialize() {
        __WEBPACK_IMPORTED_MODULE_2_mousetrap___default.a.bind('tab', () => this.focusNextBtn());
    }

    /**
     * Unbind tab key.
     */
    onBeforeDestroy() {
        __WEBPACK_IMPORTED_MODULE_2_mousetrap___default.a.unbind(['tab']);
    }

    /**
     * Modal window is shown. Make the last button active.
     */
    onShownModal() {
        this.$('.btn:last').focus();
    }

    /**
     * Trigger an event if a button is clicked.
     *
     * @param {Object} e
     */
    onBtnClick(e) {
        const $btn = this.$(e.currentTarget);
        this.trigger('answer', { answer: $btn.attr('data-event') });
        return false;
    }

    /**
     * Focus on the button located next to the currently focused button.
     */
    focusNextBtn() {
        // If the next button does not exist, use the first button
        let $btn = this.$('.modal-footer .btn:focus').next();
        $btn = $btn.length ? $btn : this.$('.modal-footer .btn:first');

        $btn.focus();
        return false;
    }

    serializeData() {
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({
            buttons: [{ event: 'reject', name: 'Cancel' }, { event: 'confirm', name: 'OK', class: 'btn-success' }]
        }, this.options);
    }

    templateContext() {
        return {
            getTitle() {
                return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n(this.title || 'Are you sure?');
            }
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 824 */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal-dialog modal-mini\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h3 class=\"modal-title\">{{ getTitle() }}</h3>\n        </div>\n        <div class=\"modal-body\">\n            <p>{= _.cleanXSS(content) }</p>\n        </div>\n        <div class=\"modal-footer\">\n            <% _.each(buttons, function(btn) { %>\n            <button type=\"button\" class=\"btn {{btn.class || 'btn-default'}}\" data-event=\"{{btn.event}}\">\n                {{ _.i18n(btn.name) }}\n            </button>\n            <% }) %>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 825 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__View__ = __webpack_require__(826);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/**
 * @module components/navbar/Controller
 */






const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:components/navbar/Controller');

/**
 * Navbar controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Radio channel (components/navbar)
     *
     * @returns {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('components/navbar');
    }

    /**
     * App configs.
     *
     * @returns {Object}
     */
    get configs() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Configs', 'findConfigs');
    }

    /**
     * @listens this.channel#show
     */
    constructor(...args) {
        super(...args);

        this.channel.reply({
            show: this.onShowRequest
        }, this);
    }

    onDestroy() {
        this.notebooks.removeEvents();
    }

    /**
     * Either instantiate the view or just change navbar title.
     *
     * @param {Object} options = {}
     * @returns {Promise}
     */
    onShowRequest(options = {}) {
        if (this.view && this.view._isRendered) {
            return this.changeTitle(options);
        }

        return this.init(options);
    }

    /**
     * Change document and navbar title. View must be rendered before calling
     * this method.
     *
     * @param {Object} options
     * @returns {Promise}
     */
    async changeTitle(options) {
        const titleOptions = await this.changeDocumentTitle(options);
        this.view.triggerMethod('change:title', { titleOptions });
    }

    /**
     * Fetch data and show the left navbar.
     *
     * @param {Object} options
     * @returns {Promise}
     */
    async init(options) {
        this.options = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({}, options);

        try {
            await this.fetch();
            this.show();
            this.listenToEvents();
        } catch (e) {
            log('error', e);
        }
    }

    /**
     * Fetch configs, notebooks...
     *
     * @returns {Promise}
     */
    async fetch() {
        const options = { conditions: { trash: 0 } };

        this.notebooks = await __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Notebooks', 'find', options);
        this.options.titleOptions = await this.changeDocumentTitle(this.options);
    }

    /**
     * Change document title.
     *
     * @param {Object} options = this.options
     * @fires this.view#change:title
     * @returns {Promise}
     */
    changeDocumentTitle(options = this.options) {
        log('change documentTitle', options);
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Title', 'set', options);
    }

    /**
     * Render the left navbar.
     */
    show() {
        this.view = new __WEBPACK_IMPORTED_MODULE_3__View__["a" /* default */]({
            args: this.options,
            configs: this.configs,
            notebooks: this.notebooks
        });

        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'show', {
            region: 'sidebarNavbar',
            view: this.view
        });
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        this.notebooks.startListening();
        this.listenTo(this.view, 'submit:search', this.navigateSearch);
    }

    /**
     * Navigate to the search page.
     *
     * @param {Object} data
     * @param {String} data.query - search query text
     */
    navigateSearch(data) {
        const filterArgs = { query: data.query, filter: 'search' };
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'navigate', { filterArgs });
    }

}
/* unused harmony export default */


// Instantiate the controller on app init
__WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.once('App', 'init', () => new Controller());

/***/ }),
/* 826 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__behaviors_Sidemenu__ = __webpack_require__(827);
/**
 * 
 * @module components/navbar/View
 */





/**
 * Navbar view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(828);
        return __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.template(tmpl);
    }

    /**
    * Radio channel (components/navbar.)
    *
    * @returns {Object}
    */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/navbar');
    }

    /**
    * Behaviors.
    *
    * @see module:behaviors/Sidemenu
    * @returns {Array}
    */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_3__behaviors_Sidemenu__["a" /* default */]];
    }

    ui() {
        return {
            navbar: '#sidebar--nav',
            search: '#header--search--input',
            title: '#header--title',
            icon: '#header--icon',
            sync: '#header--sync--icon'
        };
    }

    events() {
        return {
            'click #header--add--notebook': 'navigateAddNotebook',
            'click #header--add--tag': 'navigateAddTag',
            'click #header--about': 'showAbout',
            'click #header--sync': 'triggerSync',
            'click #header--sbtn': 'showSearch',
            'blur @ui.search': 'hideSearch',
            'keyup @ui.search': 'onSearchKeyup',
            'submit #header--search': 'onSearchSubmit'
        };
    }

    initialize() {
        this.listenTo(__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('utils/Keybindings'), 'appSearch', this.showSearch);

        // Show synchronization status
        this.listenTo(__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/sync'), 'start', this.onSyncStart);
        this.listenTo(__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/sync'), 'stop', this.onSyncStop);

        // Re-render the view if notebooks collection has changed
        this.listenTo(this.options.notebooks, 'change add remove', this.render);
    }

    onDestroy() {
        this.channel.trigger('hidden:search');
    }

    /**
    * Show a form to either create a note/notebook.
    *
    * @fires components/navbar#show:form
    */
    navigateAdd() {
        // this.channel.trigger('show:form');
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/notes', 'showForm', {});
    }

    /**
    * Show a form to create a notebook.
    *
    * @fires components/navbar#show:form
    */
    navigateAddNotebook() {
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/notebooks', 'notebookForm', {});
    }

    /**
    * Show a form to either create a note/notebook.
    *
    * @fires components/navbar#show:form
    */
    navigateAddTag() {
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/notebooks', 'tagForm', {});
    }

    /**
    * Show about page.
    *
    * @fires components/help#show:about
    */
    showAbout() {
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/help', 'showAbout');
        return false;
    }

    /**
    * Start synchronizing.
    *
    * @fires components/sync#start
    */
    triggerSync() {
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/sync', 'start');
    }

    /**
    * Show search form.
    *
    * @fires components/navbar#shown:search
    */
    showSearch() {
        this.ui.navbar.addClass('-search');
        this.ui.search.focus().select();
        this.channel.trigger('shown:search');
    }

    /**
    * Hide the search form.
    */
    hideSearch() {
        this.ui.navbar.removeClass('-search');
    }

    /**
    * Listen to keyup event that occurs on search input.
    *
    * @param {Object} e
    * @fires components/navbar#hidden:search - after hiding the search form
    * @fires components/navbar#change:search - on every key input
    */
    onSearchKeyup(e) {
        // Hide the search bar if it's Esc key
        if (e.which === 27) {
            this.channel.trigger('hidden:search');
            return this.hideSearch();
        }

        this.channel.trigger('change:search', { query: this.ui.search.val().trim() });
    }

    /**
    * Show search form.
    *
    * @fires this#submit:search
    */
    onSearchSubmit() {
        const query = this.ui.search.val().trim();
        this.hideSearch();

        if (query.length) {
            this.trigger('submit:search', { query });
        }

        this.channel.trigger('hidden:search');
        return false;
    }

    /**
    * Start spinning the synchronization icon.
    */
    onSyncStart() {
        this.ui.sync.toggleClass('animate-spin', true);
    }

    /**
    * Stop spinning the synchronization icon.
    */
    onSyncStop() {
        this.ui.sync.toggleClass('animate-spin', false);
    }

    /**
    * Change navbar title.
    *
    * @param {Object} options
    * @param {Object} options.titleOptions
    * @param {String} options.titleOptions.section
    */
    onChangeTitle(options) {
        this.options.args = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.extend(this.options.args, options);
        this.ui.title.text(options.titleOptions.section);
    }

    serializeData() {
        const maxNotebooks = Number(this.options.configs.navbarNotebooksMax);

        return __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.extend({}, this.options, {
            title: this.options.args.titleOptions.section,
            notebooks: __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.first(this.options.notebooks.toJSON(), maxNotebooks)
        });
    }

    templateContext() {
        return {
            /**
            * Return true if dropbox synchronization is enabled.
            *
            * @returns {Boolean}
            */
            isSyncEnabled() {
                return ['dropbox', 'p2p'].indexOf(this.configs.cloudStorage) !== -1;
            }
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 827 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_hammerjs__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_hammerjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_hammerjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_mousetrap__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_mousetrap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_mousetrap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_backbone_radio__);
/**
 * @module behaviors/Sidemenu
 */







/**
 * Hamburger menu behavior.
 *
 * @class
 * @extends Marionette.Behavior
 * @license MPL-2.0
 */
class Sidemenu extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Behavior {

    ui() {
        return {
            sidemenu: '.sidemenu'
        };
    }

    events() {
        return {
            'click .sidemenu--open': 'showMenu',
            'click .sidemenu--close': 'hideMenu',
            'click .sidemenu a': 'hideMenu'
        };
    }

    initialize() {
        /**
         * Hammer events. If the view has smenuHammerEvents property,
         * it will override the behavior's.
         *
         * @prop {Object}
         * @prop {String} swiperight - show the menu
         * @prop {String} swipeleft - hide the menu
         */
        this.hammerEvents = this.view.smenuHammerEvents || {
            swiperight: 'showMenu',
            swipeleft: 'hideMenu'
        };

        this.listenTo(this.view.channel, 'show:sidemenu', this.showMenu);
        this.listenTo(__WEBPACK_IMPORTED_MODULE_5_backbone_radio___default.a.channel('utils/Keybindings'), 'appShowSidemenu', this.showMenu);
    }

    onDestroy() {
        if (this.hammer) {
            this.hammer.destroy();
            this.hammer2.destroy();
        }
    }

    onRender() {
        this.$backdrop = __WEBPACK_IMPORTED_MODULE_2_jquery___default()('#layout--backdrop');
        this.listenToHammer();
    }

    /**
     * Listen to hammerjs events.
     */
    listenToHammer() {
        // To avoid bugginess, add hammer events to the backdrop el too
        this.hammer = new __WEBPACK_IMPORTED_MODULE_3_hammerjs___default.a(this.$backdrop[0]);
        this.hammer2 = new __WEBPACK_IMPORTED_MODULE_3_hammerjs___default.a(this.$el[0]);

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(this.hammerEvents, (method, evt) => {
            const func = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.bind(this.view[method] || this[method], this);
            this.hammer.on(evt, func);
            this.hammer2.on(evt, func);
        });
    }

    /**
     * Show the menu.
     */
    showMenu() {
        // Show the menu and backdrop
        this.ui.sidemenu.addClass('-show');
        this.$backdrop.addClass('-show');

        // Reset the scroll position
        this.ui.sidemenu.scrollTop(0);

        // Hide the menu if Escape is pressed
        __WEBPACK_IMPORTED_MODULE_4_mousetrap___default.a.bind('esc', () => this.hideMenu());

        this.$backdrop.on('click', () => this.onBackdropClick());
        return false;
    }

    /**
     * Hide the menu if the backdrop is clicked.
     */
    onBackdropClick() {
        this.hideMenu();
        this.$backdrop.off('click');
    }

    /**
     * Hide the menu.
     */
    hideMenu(e) {
        // Don't prevent the default behavior if a link is clicked
        if (e && !__WEBPACK_IMPORTED_MODULE_2_jquery___default()(e.currentTarget).hasClass('sidemenu--item')) {
            e.preventDefault();
        }
        this.ui.sidemenu.removeClass('-show');
        this.$backdrop.removeClass('-show');
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Sidemenu;


/***/ }),
/* 828 */
/***/ (function(module, exports) {

module.exports = "<nav class=\"header navbar navbar-default navbar-static-top -left\" id=\"sidebar--nav\">\n<div class=\"container-fluid header--container -left\">\n\n    <ul class=\"nav navbar-nav navbar-left header--col--left\">\n        <li class=\"header--col--left--drawer\">\n            <a href=\"#\" class=\"btn-link header--title sidemenu--open -text-elipsis\">\n                <i class=\"icon-menu header--icon\"></i>\n                <span id=\"header--title\" class=\"hidden-xs hidden-sm hidden-md\">{{title}}</span>\n            </a>\n        </li>\n\n        <li class=\"header--col--left--search\">\n            <button id=\"header--sbtn\" class=\"btn navbar-btn header--sbtn\" title=\"{{_.i18n('Search')}}\">\n                <i class=\"icon-search\"></i>\n            </button>\n        </li>\n    </ul>\n\n    <form id=\"header--search\" class=\"header--search\" role=\"search\">\n        <input id=\"header--search--input\" class=\"header--search--input form-control\"\n            type=\"text\" placeholder=\"{{_.i18n('Search')}}\" value=\"{{args.query}}\" />\n    </form>\n\n    <div class=\"navbar-right header--right navbar-btn\">\n        <% if (isSyncEnabled()) { %>\n        <button class=\"btn header--sbtn\" id=\"header--sync\">\n            <span id=\"header--sync--icon\"  class=\"icon-arrows\"></span>\n        </button>\n        <% } %>\n        <button id=\"header--add--tag\" class=\"header--add btn btn-secondary\">\n            <span class=\"icon-tag\"></span>\n        </button>\n        <button id=\"header--add--notebook\" class=\"header--add btn btn-secondary\">\n            <span class=\"icon-notebook\"></span>\n        </button>\n        <a class=\"btn-secondary btn btn-success\" href=\"#notes/add\">\n            <i class=\"icon-doc-new\"></i>\n        </a>\n    </div>\n\n</div>\n</nav>\n\n<div class=\"sidemenu\">\n    <div class=\"list-group\">\n        <div class=\"list-group-item sidemenu--item -disabled sidemenu--close\">\n            <i class=\"icon-left-open-big\"></i>\n            {{_.i18n('Menu')}}\n            <button type=\"button\" class=\"close\" aria-hidden=\"true\">\n                &times;\n            </button>\n        </div>\n\n        <div class=\"list-group-item sidemenu--item -disabled\">{{_.i18n('General')}}</div>\n\n        <a class=\"list-group-item sidemenu--item\" href=\"#notes\">\n            <i class=\"icon-note\"></i> {{_.i18n('All Notes')}}\n        </a>\n        <a class=\"list-group-item sidemenu--item\" href=\"#notes/f/favorite\">\n            <i class=\"icon-favorite\"></i> {{_.i18n('Favorites')}}\n        </a>\n        <a class=\"list-group-item sidemenu--item\" href=\"#notes/f/trashed\">\n            <i class=\"icon-trashed\"></i> {{_.i18n('Trash')}}\n        </a>\n        <a class=\"list-group-item sidemenu--item\" href=\"#notebooks\">\n            <i class=\"icon-notebook\"></i> {{_.i18n('Notebooks & tags')}}\n        </a>\n        <a class=\"list-group-item sidemenu--item\" href=\"#notes/f/task\">\n            <i class=\"icon-ok\"></i> {{ _.i18n('Open Tasks') }}\n        </a>\n\n        <% if (notebooks !== null && notebooks.length) { %>\n        <div class=\"list-group-item sidemenu--item -disabled\">{{_.i18n('Notebooks')}}</div>\n        <% notebooks.forEach(function(notebook) { %>\n        <a class=\"list-group-item sidemenu--item\" href=\"#notes/f/notebook/q/{{notebook.id}}\">\n            <i class=\"icon-notebook\"></i>  {=_.cleanXSS(notebook.name)}\n        </a>\n        <% }); } %>\n\n        <div class=\"list-group-item sidemenu--item -disabled\">{{_.i18n('Other')}}</div>\n        <a class=\"list-group-item sidemenu--item\" href=\"#settings\">\n            <i class=\"icon-cog\"></i>  {{_.i18n('Settings')}}\n        </a>\n        <a id=\"header--about\" class=\"list-group-item sidemenu--item\" href=\"#\">\n            <i class=\"icon-help-circled\"></i>  {{_.i18n('About')}}\n        </a>\n        <a href=\"/\" class=\"btn -note btn-default logout\">\n            <span>{{_.i18n('Logout')}}</span>\n        </a>\n    </div>\n</div>\n"

/***/ }),
/* 829 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__about_Controller__ = __webpack_require__(830);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__keybindings_Controller__ = __webpack_require__(833);
/**
 * @module components/help/main
 * @license MPL-2.0
 */





let controller;
/* unused harmony default export */ var _unused_webpack_default_export = (controller = {

    /**
     * @returns {Promise}
     */
    init() {
        __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.reply('components/help', {
            showAbout: this.showAbout,
            showKeybindings: this.showKeybindings
        }, this);

        // Show keybinding help if "?" key is pressed
        __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.on('utils/Keybindings', 'appKeyboardHelp', () => this.showKeybindings());
    },

    /**
     * Show information about the app.
     */
    showAbout(...args) {
        return new __WEBPACK_IMPORTED_MODULE_1__about_Controller__["a" /* default */](...args).init();
    },

    /**
     * Shows keybinding help.
     */
    showKeybindings(...args) {
        return new __WEBPACK_IMPORTED_MODULE_2__keybindings_Controller__["a" /* default */](...args).init();
    }

});

__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', () => controller.init());

/***/ }),
/* 830 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constants__ = __webpack_require__(344);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__View__ = __webpack_require__(831);
/**
 * @module components/help/about/Controller
 */






/**
 * Controller that shows information about the app.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    init() {
        this.show();
    }

    /**
     * Render the view.
     */
    show() {
        this.view = new __WEBPACK_IMPORTED_MODULE_3__View__["a" /* default */]({
            constants: __WEBPACK_IMPORTED_MODULE_2__constants__["a" /* default */]
        });

        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'show', {
            region: 'modal',
            view: this.view
        });

        // Destroy itself if the view is destroyed
        this.listenTo(this.view, 'destroy', this.destroy);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 831 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/help/about/View
 */



/**
 * About view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(832);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'modal fade';
    }

    serializeData() {
        return this.options;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 832 */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h2 class=\"modal-title\">\n                Encryptic <small>v{{constants.version}}</small>\n            </h2>\n        </div>\n        <div class=\"modal-body\">\n            <h3>{{ _.i18n('About') }}:</h3>\n            <ul class=\"list-unstyled\">\n                <li><a target=\"_blank\" href=\"https://github.com/daed/Encryptic\">{{ _.i18n('Github Page') }}</a></li>\n                <li><a target=\"_blank\" href=\"https://www.mozilla.org/en-US/MPL/2.0/\">MPL-2.0 {{ _.i18n('License') }}</a></li>\n                <li><a target=\"_blank\" href=\"https://github.com/daed/Encryptic/issues\">{{ _.i18n('Report bugs and issues here') }}</a></li>\n                <li><a href=\"mailto:brad.arnett@gmail.com\">{{ _.i18n('Report bugs through email') }}</a></li>\n            </ul>\n            <hr/>\n            <h3>{{ _.i18n('Donate') }}</h3>\n            <div class=\"btn-toolbar\">\n                <div class=\"btn-group\">\n                    <a class=\"btn btn-success\" target=\"_blank\" href=\"https://www.bountysource.com/teams/Encryptic\">\n                        Bountysource\n                    </a>\n                </div>\n                <div class=\"btn-group\">\n                    <a class=\"btn btn-warning\" href=\"\">\n                        Bitcoin (coming soon)\n                    </a>\n                </div>\n                <div class=\"btn-group\">\n                    <a class=\"btn btn-default\" href=\"\">\n                        Litecoin (coming soon)\n                    </a>\n                </div>\n            </div>\n            <hr/>\n            <h3>{{ _.i18n('Credits') }}:</h3>\n            <ul class=\"list-unstyled\">\n                <li><a target=\"_blank\" href=\"https://github.com/daed/Encryptic/graphs/contributors\">{{ _.i18n('List of contributors') }}</a></li>\n                <li><a target=\"_blank\" href=\"https://github.com/daed/Encryptic/blob/master/bower.json\">{{ _.i18n('List of all used libraries') }}</a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 833 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__View__ = __webpack_require__(834);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_debug__);
/**
 * @module components/help/keybindings/Controller
 */






const log = __WEBPACK_IMPORTED_MODULE_3_debug___default()('lav:components/help/keybindings/Controller');

/**
 * Controller that shows keybinding help.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Fetch configs collection and render the view.
     *
     * @returns {Promise}
     */
    init() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Configs', 'find').then(configs => this.show(configs)).catch(err => log('error', err));
    }

    /**
     * Render the view in modal region.
     *
     * @param {Object} configs - config collection
     */
    show(configs) {
        const collection = configs.clone();
        collection.reset(collection.keybindings());

        this.view = new __WEBPACK_IMPORTED_MODULE_2__View__["a" /* default */]({
            collection
        });

        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'show', {
            region: 'modal',
            view: this.view
        });

        // Destroy itself if the view destroyed
        this.listenTo(this.view, 'destroy', this.destroy);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 834 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/help/keybindings/View
 */



/**
 * View that shows keybinding help.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(835);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'modal fade';
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 835 */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h3 class=\"modal-title\">\n                {{ _.i18n('Keybindings') }}\n                <a href=\"#/settings/keybindings\" title=\"{{ _.i18n('Change keybindings') }}\">\n                    <small class=\"icon-cog\"></small>\n                </a>\n            </h3>\n        </div>\n        <div class=\"modal-body\">\n            <table class=\"table table-striped table-hover\">\n                <thead>\n                    <tr>\n                        <th>{{_.i18n('Action')}}</th>\n                        <th>{{_.i18n('Keybindings')}}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <% _.forEach(items, function(conf) { %>\n                    <tr>\n                        <td>{{ _.i18n(conf.name) }}</td>\n                        <td><kbd>{{ conf.value }}</kbd></td>\n                    </tr>\n                    <% }); %>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 836 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Markdown__ = __webpack_require__(837);
/**
 * @module components/markdown/main
 * @license MPL-2.0
 */



__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', () => new __WEBPACK_IMPORTED_MODULE_1__Markdown__["a" /* default */]());

/***/ }),
/* 837 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_markdown_it__ = __webpack_require__(345);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_markdown_it___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_markdown_it__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__workers_Module__ = __webpack_require__(300);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_markdown_it_hashtag__ = __webpack_require__(355);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_markdown_it_hashtag___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_markdown_it_hashtag__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_markdown_it_math__ = __webpack_require__(356);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_markdown_it_math___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_markdown_it_math__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_markdown_it_sanitizer__ = __webpack_require__(382);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_markdown_it_sanitizer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_markdown_it_sanitizer__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_prismjs__ = __webpack_require__(383);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_prismjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_prismjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__task__ = __webpack_require__(1014);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__file__ = __webpack_require__(1015);
/**
 * @module components/markdown/Markdown
 */





// Plugins

// import imsize from 'markdown-it-imsize';






// Import Prismjs components (http://prismjs.com/download.html?themes=prism&languages=)
// eslint-disable-next-line
const languages = `markup+css+clike+javascript+abap+actionscript+apacheconf+apl+applescript+aspnet+autoit+autohotkey+bash+basic+batch+c+brainfuck+bison+csharp+cpp+coffeescript+ruby+css-extras+d+dart+diff+docker+eiffel+elixir+erlang+fsharp+fortran+gherkin+git+glsl+go+groovy+handlebars+haskell+haxe+http+icon+inform7+ini+j+java+julia+keyman+kotlin+latex+less+lolcode+lua+makefile+markdown+matlab+mel+mizar+monkey+nasm+nginx+nim+nix+nsis+objectivec+ocaml+oz+parigp+parser+pascal+perl+php+php-extras+powershell+processing+prolog+pug+puppet+pure+python+q+qore+r+jsx+rest+rip+roboconf+crystal+rust+sas+sass+scss+scala+scheme+smalltalk+smarty+sql+stylus+swift+tcl+textile+twig+typescript+verilog+vhdl+vim+wiki+yaml`;
__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(languages.split('+'), lang => {
    __webpack_require__(1016)(`./prism-${lang}.min.js`);
});

/**
 * Markdown-it adapter.
 *
 * @class
 * @extends module:workers/Module
 * @license MPL-2.0
 */
class Markdown extends __WEBPACK_IMPORTED_MODULE_3__workers_Module__["a" /* default */] {

    get fileName() {
        return 'components/markdown';
    }

    /**
     * Replies to render, parse, and toggleTask Radio requests.
     *
     * @returns {Object}
     */
    get radioRequests() {
        return {
            render: 'render',
            parse: 'parse',
            toggleTask: 'toggleTask'
        };
    }

    constructor(...args) {
        super(...args);

        /**
         * Markdown-it instance.
         *
         * @prop {Object}
         */
        this.md = new __WEBPACK_IMPORTED_MODULE_2_markdown_it___default.a({
            html: true,
            xhtmlOut: true,
            breaks: true,
            linkify: true,
            highlight: this.highlight
        });

        this.init();
    }

    processRequest(method, args) {
        const data = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.omit(args[0], 'notebook');

        // Do nothing if content is empty
        if (!data.content || !data.content.length) {
            return Promise.resolve('');
        }

        // Create object URLs for attachments
        data.clonedFiles = __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Files', 'createUrls', {
            models: data.fileModels
        });
        data.fileModels = null;

        return super.processRequest(method, [data]);
    }

    /**
     * Enable plugins and configure them.
     */
    init() {
        return this.enablePlugins().configure();
    }

    /**
     * Enable markdown-it plugins.
     *
     * @returns {Object} this
     */
    enablePlugins() {
        this.md.use(__WEBPACK_IMPORTED_MODULE_6_markdown_it_sanitizer___default.a)
        // .use(imsize)
        .use(__WEBPACK_IMPORTED_MODULE_5_markdown_it_math___default.a, {
            inlineOpen: '$',
            inlineClose: '$',
            blockOpen: '$$',
            blockClose: '$$',
            renderingOptions: {},
            inlineRenderer: this.mathInlineRenderer,
            blockRenderer: this.mathBlockRenderer
        }).use(__WEBPACK_IMPORTED_MODULE_4_markdown_it_hashtag___default.a, {
            hashtagRegExp: '[\\u0021-\\uFFFF\\w\\-]+|<3',
            preceding: '^|\\s'
        }).use(__WEBPACK_IMPORTED_MODULE_8__task__["a" /* default */].init).use(__WEBPACK_IMPORTED_MODULE_9__file__["a" /* default */].init);

        return this;
    }

    /**
     * Configure markdown-it.
     *
     * @returns {Object} this
     */
    configure() {
        /* eslint-disable */
        // Make tables responsive
        this.md.renderer.rules.table_open = () => {
            return '<div class="table-responsive"><table>';
        };
        this.md.renderer.rules.table_close = () => '</table></div>';

        // Change hashtag styles
        this.md.renderer.rules.hashtag_open = (tokens, idx, f, env) => {
            const tagName = tokens[idx].content.toLowerCase();

            if (env) {
                env.tags = env.tags || [];
                env.tags.push(tagName);
            }

            return `<a href="#/notes/f/tag/q/${tagName}" class="label label-default">`;
        };
        /* eslint-enable */
        return this;
    }

    /**
     * Convert Markdown to HTML.
     *
     * @param {Object} data
     * @param {String} data.content
     * @returns {Promise}
     */
    render(data) {
        // const content = data.content;
        const content = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.unescape(data.content);
        const env = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend({}, data);

        // Revoke file object URLs that aren't in use
        if (data.id) {
            __WEBPACK_IMPORTED_MODULE_9__file__["a" /* default */].revoke(data);
        }

        return Promise.resolve(this.md.render(content, env));
    }

    /**
     * Toggle a task's status
     *
     * @param {Object} data
     * @param {String} data.taskId
     * @param {String} data.content
     * @returns {Promise}
     */
    toggleTask(data) {
        let content = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.unescape(data.content);
        content = __WEBPACK_IMPORTED_MODULE_8__task__["a" /* default */].toggle(data);
        return this.parse({ content });
    }

    /**
     * Parse Markdown text for tags, task, etc...
     *
     * @param {Object} data
     * @param {String} data.content
     * @returns {Promise} - resolves with an object that contains tags and tasks
     */
    parse(data) {
        const text = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.unescape(data.content);
        const env = {};

        return Promise.resolve(this.md.render(text, env)).then(htmlContent => {
            return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend(env, {
                htmlContent,
                content: data.content,
                tags: env.tags ? __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.uniq(env.tags) : [],
                files: env.files ? __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.uniq(env.files) : [],
                taskAll: env.tasks ? env.tasks.length : 0
            });
        });
    }

    /**
     * Use Prismjs to highlight code blocks.
     *
     * @param {String} code
     * @param {String} lang
     * @returns {String}
     */
    highlight(code, lang) {
        if (!__WEBPACK_IMPORTED_MODULE_7_prismjs___default.a.languages[lang]) {
            return '';
        }

        return __WEBPACK_IMPORTED_MODULE_7_prismjs___default.a.highlight(code, __WEBPACK_IMPORTED_MODULE_7_prismjs___default.a.languages[lang]);
    }

    /**
     * Inline math.
     *
     * @param {String} tokens
     * @returns {String}
     */
    mathInlineRenderer(tokens) {
        return `<span class="math inline">$${tokens}$</span>`;
    }

    /**
     * Block math.
     *
     * @param {String} tokens
     * @returns {String}
     */
    mathBlockRenderer(tokens) {
        return `<div class="math block">$$${tokens}$$</div>`;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Markdown;


/***/ }),
/* 838 */,
/* 839 */,
/* 840 */,
/* 841 */,
/* 842 */,
/* 843 */,
/* 844 */,
/* 845 */,
/* 846 */,
/* 847 */,
/* 848 */,
/* 849 */,
/* 850 */,
/* 851 */,
/* 852 */,
/* 853 */,
/* 854 */,
/* 855 */,
/* 856 */,
/* 857 */,
/* 858 */,
/* 859 */,
/* 860 */,
/* 861 */,
/* 862 */,
/* 863 */,
/* 864 */,
/* 865 */,
/* 866 */,
/* 867 */,
/* 868 */,
/* 869 */,
/* 870 */,
/* 871 */,
/* 872 */,
/* 873 */,
/* 874 */,
/* 875 */,
/* 876 */,
/* 877 */,
/* 878 */,
/* 879 */,
/* 880 */,
/* 881 */,
/* 882 */,
/* 883 */,
/* 884 */,
/* 885 */,
/* 886 */,
/* 887 */,
/* 888 */,
/* 889 */,
/* 890 */,
/* 891 */,
/* 892 */,
/* 893 */,
/* 894 */,
/* 895 */,
/* 896 */,
/* 897 */,
/* 898 */,
/* 899 */,
/* 900 */,
/* 901 */,
/* 902 */,
/* 903 */,
/* 904 */,
/* 905 */,
/* 906 */,
/* 907 */,
/* 908 */,
/* 909 */,
/* 910 */,
/* 911 */,
/* 912 */,
/* 913 */,
/* 914 */,
/* 915 */,
/* 916 */,
/* 917 */,
/* 918 */,
/* 919 */,
/* 920 */,
/* 921 */,
/* 922 */,
/* 923 */,
/* 924 */,
/* 925 */,
/* 926 */,
/* 927 */,
/* 928 */,
/* 929 */,
/* 930 */,
/* 931 */,
/* 932 */,
/* 933 */,
/* 934 */,
/* 935 */,
/* 936 */,
/* 937 */,
/* 938 */,
/* 939 */,
/* 940 */,
/* 941 */,
/* 942 */,
/* 943 */,
/* 944 */,
/* 945 */,
/* 946 */,
/* 947 */,
/* 948 */,
/* 949 */,
/* 950 */,
/* 951 */,
/* 952 */,
/* 953 */,
/* 954 */,
/* 955 */,
/* 956 */,
/* 957 */,
/* 958 */,
/* 959 */,
/* 960 */,
/* 961 */,
/* 962 */,
/* 963 */,
/* 964 */,
/* 965 */,
/* 966 */,
/* 967 */,
/* 968 */,
/* 969 */,
/* 970 */,
/* 971 */,
/* 972 */,
/* 973 */,
/* 974 */,
/* 975 */,
/* 976 */,
/* 977 */,
/* 978 */,
/* 979 */,
/* 980 */,
/* 981 */,
/* 982 */,
/* 983 */,
/* 984 */,
/* 985 */,
/* 986 */,
/* 987 */,
/* 988 */,
/* 989 */,
/* 990 */,
/* 991 */,
/* 992 */,
/* 993 */,
/* 994 */,
/* 995 */,
/* 996 */,
/* 997 */,
/* 998 */,
/* 999 */,
/* 1000 */,
/* 1001 */,
/* 1002 */,
/* 1003 */,
/* 1004 */,
/* 1005 */,
/* 1006 */,
/* 1007 */,
/* 1008 */,
/* 1009 */,
/* 1010 */,
/* 1011 */,
/* 1012 */,
/* 1013 */,
/* 1014 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/**
 * Task/checkbox plugin for markdown-it.
 *
 * @module components/markdown/task
 */
/* eslint no-param-reassign: 0 */


/**
 * @exports components/markdown/task
 * @license MPL-2.0
 */
const task = {

    /**
     * Regular expression to search tasks in text.
     *
     * @prop {Object}
     */
    pattern: /\[(X|\s|\_|\-)?\]\s(.*)/i, // eslint-disable-line

    /**
     * Regular expression to search tasks in text.
     * Unlike regex in pattern property, it searches tasks globally.
     *
     * @prop {Object}
     */
    globPattern: /\[(X|\s|\_|\-)?\]\s(.*)/gi, // eslint-disable-line

    /**
     * Initialize markdown it plugin.
     *
     * @param {Object} md - Markdown-it instance
     */
    init(md) {
        task.md = md;
        md.core.ruler.push('task', __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.bind(task.parse, task));
        md.renderer.rules.task_tag = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.bind(task.render, task); // eslint-disable-line
    },

    /**
     * Toggle a Markdown task.
     *
     * @param {Object} data
     * @param {String} data.content - Markdown text
     * @param {Number} data.taskId - ID of a task that needs to be toggled
     * @returns {String}
     */
    toggle(data) {
        const { content } = data;
        let count = 0;

        return content.replace(this.globPattern, (match, checked, value) => {
            count++;

            // If it's not the task we need, do nothing
            if (count !== data.taskId) {
                return match;
            }

            checked = checked === 'x' || checked === 'X' ? ' ' : 'x';
            return `[${checked}] ${value}`;
        });
    },

    /**
     * Parse Markdown text for tasks.
     *
     * @param {Object} state
     */
    parse(state) {
        let count = 0;

        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(state.tokens, token => {
            // Don't parse tokens that aren't inline
            if (token.type !== 'inline') {
                const matches = token.content.match(this.globPattern);

                // If there are any tasks, increase the number of found [x?]
                if (matches) {
                    count += matches.length;
                }

                return;
            }

            // Find child tokens which have tasks
            count = this.parseTokenChildren({ count, state, token });
        });
    },

    /**
     * Find tasks in a token's children.
     *
     * @param {Object} data
     * @param {Object} data.count
     * @param {Object} data.state
     * @param {Object} data.token
     * @returns {Number} the number of found tasks
     */
    parseTokenChildren(data) {
        const { state, token } = data;
        let count = 0 + data.count;

        if (this.pattern.test(token.content)) {
            // Ignore it if it doesn't start with [x?], (1-9). or -
            if (/^[-[1-9]/.test(token.content)) {
                const data = this.replaceWithTasks(token, state.Token, count);
                count = data.count;
                token.children = this.md.utils.arrayReplaceAt([token], 0, data.tokens);
            } else {
                count++;
            }
        }

        return count;
    },

    /**
     * Replace a token with tasks.
     *
     * @param {Object} original - original token
     * @param {Object} Token
     * @param {Number} id
     * @returns {Object}
     */
    replaceWithTasks(original, Token, id) {
        let count = 0 + id;

        // If there is only child, it means there is only one task
        if (original.children.length === 1) {
            count++;
            return { count, tokens: [this.replaceToken(original.content, Token, count)] };
        }

        // Check each paragraph for tasks
        const matches = original.content.split(/[\n|\r]/);
        const tokens = [];

        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(matches, content => {
            if (this.pattern.test(content)) {
                count++;

                if (/^[-[1-9]/.test(content)) {
                    tokens.push(this.replaceToken(content, Token, count));
                } else {
                    this.createParagraph(tokens, Token, content);
                }
            }
            // If it isn't a task, just create a paragraph
            else {
                    this.createParagraph(tokens, Token, content);
                }
        });

        return { count, tokens };
    },

    /**
     * Create a paragraph token.
     *
     * @param {Array} tokens
     * @param {Object} Token
     * @param {String} content - parapgraph's content
     */
    createParagraph(tokens, Token, content) {
        const p = new Token('paragraph_open', 'p', 1);
        p.block = true;
        tokens.push(p);

        const token = new Token('text', '', 0);
        token.content = content;
        token.level = 1;
        tokens.push(token);

        const pC = new Token('paragraph_close', 'p', -1);
        token.block = true;
        tokens.push(pC);
    },

    /**
     * Replace a token with task token.
     *
     * @param {String} content
     * @param {Object} Token - state.Token
     * @param {Number} id - ID of a task
     * @returns {Object}
     */
    replaceToken(content, Token, id) {
        const matches = content.match(this.pattern);
        const [, value, label] = matches;
        const checked = value === 'X' || value === 'x';

        // Create a new token
        const token = new Token('task_tag', '', 0);
        token.meta = { label, checked, id };
        token.children = [];

        return token;
    },

    /**
     * Convert a task to HTML.
     *
     * @returns {String}
     */
    render(tokens, id, f, env) {
        // eslint-disable-line
        const { meta } = tokens[id];

        if (env) {
            env.tasks = env.tasks || [];
            env.tasks.push(meta.label);

            if (meta.checked) {
                env.taskCompleted = (env.taskCompleted || 0) + 1;
            } else {
                env.taskCompleted = env.taskCompleted || 0;
            }
        }

        const checked = meta.checked ? 'checked="checked"' : '';
        meta.label = this.md.renderInline(meta.label);

        /* eslint-disable */
        return `<p><label class="task task--checkbox">
        <input data-task="${meta.id}" type="checkbox" ${checked} class="checkbox--input" />
        <svg class="checkbox--svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
        <path class="checkbox--path" d="M16.667,62.167c3.109,5.55,7.217,10.591,10.926,15.75 c2.614,3.636,5.149,7.519,8.161,10.853c-0.046-0.051,1.959,2.414,2.692,2.343c0.895-0.088,6.958-8.511,6.014-7.3 c5.997-7.695,11.68-15.463,16.931-23.696c6.393-10.025,12.235-20.373,18.104-30.707C82.004,24.988,84.802,20.601,87,16"></path>
        </svg>
        <span class="checkbox--text">${meta.label}</span></label></p>`;
        /* eslint-enable */
    }

};

/* harmony default export */ __webpack_exports__["a"] = (task);

/***/ }),
/* 1015 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/**
 * File plugin for markdown-it.
 *
 * @module components/markdown/file
 */
/* eslint no-param-reassign: 0 */


/**
 * @exports components/markdown/file
 * @license MPL-2.0
 */
const file = {

    /**
     * Regular expression to find file links.
     *
     * @prop {Object}
     */
    pattern: /\#file:([a-z0-9\-])+/, // eslint-disable-line

    /**
     * Object that contains the generated file URLs.
     *
     * @prop {Object}
     */
    urls: {},

    /**
     * Initialize markdown-it plugin.
     *
     * @param {Object} md - markdown-it instance
     */
    init(md) {
        file.md = md;
        /**
         * The original image rule.
         *
         * @prop {Function}
         */
        file.imageRule = file.md.renderer.rules.image;

        // Override link and image rules
        md.renderer.rules.link_open = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.bind(file.linkOpen, file); // eslint-disable-line
        md.renderer.rules.image = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.bind(file.image, file);
    },

    /**
     * Override linkOpen rule with this.
     */
    linkOpen(...args) {
        const self = args[4];
        this.replaceLink(...args);
        return self.renderToken(...args);
    },

    /**
     * Override image rule with this.
     */
    image(...args) {
        this.replaceLink(...args);
        return this.imageRule(...args);
    },

    /**
     * Replace pseudo links that start with "#file:" with ObjectURLs.
     */
    replaceLink(tokens, idx, options, env) {
        // eslint-disable-line
        const token = tokens[idx];
        const type = this.getAttrName(token);
        const attr = token.attrs[token.attrIndex(type)];

        // Do nothing if it isn't a file link
        if (!this.pattern.test(attr[1])) {
            return;
        }

        const id = attr[1].match(this.pattern)[0].replace('#file:', '');

        // Save the ID of a file
        if (env) {
            env.files = env.files || [];
            env.files.push(id);
        }

        // Create object URLs only if file collection exists
        if (env.clonedFiles && env.clonedFiles.length) {
            this.create(attr, id, env);
        }
    },

    /**
     * Determine what attribute needs to be changed.
     *
     * @param {Object} token
     * @returns {String}
     */
    getAttrName(token) {
        return token.type === 'image' ? 'src' : 'href';
    },

    /**
     * Create an object URL.
     *
     * @param {Array} attr
     * @param {String} id - ID of the file
     * @param {Object} env
     */
    create(attr, id, env) {
        const file = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.findWhere(env.clonedFiles, { id });

        if (!file) {
            return;
        }

        // Save the file URL
        this.urls[file.id] = file.url;
        attr[1] = file.url;
    },

    /**
     * Revoke all object URLs which aren't under use.
     *
     * @param {Object} data
     * @param {Array} [data.clonedFiles]
     */
    revoke(data) {
        const fileModels = data.clonedFiles || [];

        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(this.urls, (url, id) => {
            // If the model has the file model, do nothing
            if (__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.findWhere(fileModels, { id })) {
                return;
            }

            // Revoke the URL
            (URL || window.webkitURL).revokeObjectURL(url);
            this.urls[id] = null;
        });
    }

};

/* harmony default export */ __webpack_exports__["a"] = (file);

/***/ }),
/* 1016 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./prism-abap.min.js": 1017,
	"./prism-actionscript.min.js": 1018,
	"./prism-ada.min.js": 1019,
	"./prism-apacheconf.min.js": 1020,
	"./prism-apl.min.js": 1021,
	"./prism-applescript.min.js": 1022,
	"./prism-arduino.min.js": 1023,
	"./prism-arff.min.js": 1024,
	"./prism-asciidoc.min.js": 1025,
	"./prism-asm6502.min.js": 1026,
	"./prism-aspnet.min.js": 1027,
	"./prism-autohotkey.min.js": 1028,
	"./prism-autoit.min.js": 1029,
	"./prism-bash.min.js": 1030,
	"./prism-basic.min.js": 1031,
	"./prism-batch.min.js": 1032,
	"./prism-bison.min.js": 1033,
	"./prism-brainfuck.min.js": 1034,
	"./prism-bro.min.js": 1035,
	"./prism-c.min.js": 1036,
	"./prism-clike.min.js": 1037,
	"./prism-clojure.min.js": 1038,
	"./prism-coffeescript.min.js": 1039,
	"./prism-core.min.js": 1040,
	"./prism-cpp.min.js": 1041,
	"./prism-crystal.min.js": 1042,
	"./prism-csharp.min.js": 1043,
	"./prism-csp.min.js": 1044,
	"./prism-css-extras.min.js": 1045,
	"./prism-css.min.js": 1046,
	"./prism-d.min.js": 1047,
	"./prism-dart.min.js": 1048,
	"./prism-diff.min.js": 1049,
	"./prism-django.min.js": 1050,
	"./prism-docker.min.js": 1051,
	"./prism-eiffel.min.js": 1052,
	"./prism-elixir.min.js": 1053,
	"./prism-elm.min.js": 1054,
	"./prism-erb.min.js": 1055,
	"./prism-erlang.min.js": 1056,
	"./prism-flow.min.js": 1057,
	"./prism-fortran.min.js": 1058,
	"./prism-fsharp.min.js": 1059,
	"./prism-gedcom.min.js": 1060,
	"./prism-gherkin.min.js": 1061,
	"./prism-git.min.js": 1062,
	"./prism-glsl.min.js": 1063,
	"./prism-go.min.js": 1064,
	"./prism-graphql.min.js": 1065,
	"./prism-groovy.min.js": 1066,
	"./prism-haml.min.js": 1067,
	"./prism-handlebars.min.js": 1068,
	"./prism-haskell.min.js": 1069,
	"./prism-haxe.min.js": 1070,
	"./prism-hpkp.min.js": 1071,
	"./prism-hsts.min.js": 1072,
	"./prism-http.min.js": 1073,
	"./prism-ichigojam.min.js": 1074,
	"./prism-icon.min.js": 1075,
	"./prism-inform7.min.js": 1076,
	"./prism-ini.min.js": 1077,
	"./prism-io.min.js": 1078,
	"./prism-j.min.js": 1079,
	"./prism-java.min.js": 1080,
	"./prism-javascript.min.js": 1081,
	"./prism-jolie.min.js": 1082,
	"./prism-json.min.js": 1083,
	"./prism-jsx.min.js": 1084,
	"./prism-julia.min.js": 1085,
	"./prism-keyman.min.js": 1086,
	"./prism-kotlin.min.js": 1087,
	"./prism-latex.min.js": 1088,
	"./prism-less.min.js": 1089,
	"./prism-liquid.min.js": 1090,
	"./prism-lisp.min.js": 1091,
	"./prism-livescript.min.js": 1092,
	"./prism-lolcode.min.js": 1093,
	"./prism-lua.min.js": 1094,
	"./prism-makefile.min.js": 1095,
	"./prism-markdown.min.js": 1096,
	"./prism-markup-templating.min.js": 1097,
	"./prism-markup.min.js": 1098,
	"./prism-matlab.min.js": 1099,
	"./prism-mel.min.js": 1100,
	"./prism-mizar.min.js": 1101,
	"./prism-monkey.min.js": 1102,
	"./prism-n4js.min.js": 1103,
	"./prism-nasm.min.js": 1104,
	"./prism-nginx.min.js": 1105,
	"./prism-nim.min.js": 1106,
	"./prism-nix.min.js": 1107,
	"./prism-nsis.min.js": 1108,
	"./prism-objectivec.min.js": 1109,
	"./prism-ocaml.min.js": 1110,
	"./prism-opencl.min.js": 1111,
	"./prism-oz.min.js": 1112,
	"./prism-parigp.min.js": 1113,
	"./prism-parser.min.js": 1114,
	"./prism-pascal.min.js": 1115,
	"./prism-perl.min.js": 1116,
	"./prism-php-extras.min.js": 1117,
	"./prism-php.min.js": 1118,
	"./prism-plsql.min.js": 1119,
	"./prism-powershell.min.js": 1120,
	"./prism-processing.min.js": 1121,
	"./prism-prolog.min.js": 1122,
	"./prism-properties.min.js": 1123,
	"./prism-protobuf.min.js": 1124,
	"./prism-pug.min.js": 1125,
	"./prism-puppet.min.js": 1126,
	"./prism-pure.min.js": 1127,
	"./prism-python.min.js": 1128,
	"./prism-q.min.js": 1129,
	"./prism-qore.min.js": 1130,
	"./prism-r.min.js": 1131,
	"./prism-reason.min.js": 1132,
	"./prism-renpy.min.js": 1133,
	"./prism-rest.min.js": 1134,
	"./prism-rip.min.js": 1135,
	"./prism-roboconf.min.js": 1136,
	"./prism-ruby.min.js": 1137,
	"./prism-rust.min.js": 1138,
	"./prism-sas.min.js": 1139,
	"./prism-sass.min.js": 1140,
	"./prism-scala.min.js": 1141,
	"./prism-scheme.min.js": 1142,
	"./prism-scss.min.js": 1143,
	"./prism-smalltalk.min.js": 1144,
	"./prism-smarty.min.js": 1145,
	"./prism-soy.min.js": 1146,
	"./prism-sql.min.js": 1147,
	"./prism-stylus.min.js": 1148,
	"./prism-swift.min.js": 1149,
	"./prism-tap.min.js": 1150,
	"./prism-tcl.min.js": 1151,
	"./prism-textile.min.js": 1152,
	"./prism-tsx.min.js": 1153,
	"./prism-tt2.min.js": 1154,
	"./prism-twig.min.js": 1155,
	"./prism-typescript.min.js": 1156,
	"./prism-vbnet.min.js": 1157,
	"./prism-velocity.min.js": 1158,
	"./prism-verilog.min.js": 1159,
	"./prism-vhdl.min.js": 1160,
	"./prism-vim.min.js": 1161,
	"./prism-visual-basic.min.js": 1162,
	"./prism-wasm.min.js": 1163,
	"./prism-wiki.min.js": 1164,
	"./prism-xeora.min.js": 1165,
	"./prism-xojo.min.js": 1166,
	"./prism-xquery.min.js": 1167,
	"./prism-yaml.min.js": 1168
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 1016;

/***/ }),
/* 1017 */
/***/ (function(module, exports) {

Prism.languages.abap={comment:/^\*.*/m,string:/(`|')(?:\\.|(?!\1)[^\\\r\n])*\1/m,"string-template":{pattern:/([|}])(?:\\.|[^\\|{\r\n])*(?=[|{])/,lookbehind:!0,alias:"string"},"eol-comment":{pattern:/(^|\s)".*/m,lookbehind:!0,alias:"comment"},keyword:{pattern:/(\s|\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\/MM\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\/DD\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\/MM\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\/DD\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|SELECTOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\b/i,lookbehind:!0},number:/\b\d+\b/,operator:{pattern:/(\s)(?:\*\*?|<[=>]?|>=?|\?=|[-+\/=])(?=\s)/,lookbehind:!0},"string-operator":{pattern:/(\s)&&?(?=\s)/,lookbehind:!0,alias:"keyword"},"token-operator":[{pattern:/(\w)(?:->?|=>|[~|{}])(?=\w)/,lookbehind:!0,alias:"punctuation"},{pattern:/[|{}]/,alias:"punctuation"}],punctuation:/[,.:()]/};

/***/ }),
/* 1018 */
/***/ (function(module, exports) {

Prism.languages.actionscript=Prism.languages.extend("javascript",{keyword:/\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\b/,operator:/\+\+|--|(?:[+\-*\/%^]|&&?|\|\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/}),Prism.languages.actionscript["class-name"].alias="function",Prism.languages.markup&&Prism.languages.insertBefore("actionscript","string",{xml:{pattern:/(^|[^.])<\/?\w+(?:\s+[^\s>\/=]+=("|')(?:\\[\s\S]|(?!\2)[^\\])*\2)*\s*\/?>/,lookbehind:!0,inside:{rest:Prism.languages.markup}}});

/***/ }),
/* 1019 */
/***/ (function(module, exports) {

Prism.languages.ada={comment:/--.*/,string:/"(?:""|[^"\r\f\n])*"/i,number:[{pattern:/\b\d(?:_?\d)*#[\dA-F](?:_?[\dA-F])*(?:\.[\dA-F](?:_?[\dA-F])*)?#(?:E[+-]?\d(?:_?\d)*)?/i},{pattern:/\b\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:E[+-]?\d(?:_?\d)*)?\b/i}],"attr-name":/\b'\w+/i,keyword:/\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|new|return|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\b/i,"boolean":/\b(?:true|false)\b/i,operator:/<[=>]?|>=?|=>?|:=|\/=?|\*\*?|[&+-]/,punctuation:/\.\.?|[,;():]/,"char":/'.'/,variable:/\b[a-z](?:[_a-z\d])*\b/i};

/***/ }),
/* 1020 */
/***/ (function(module, exports) {

Prism.languages.apacheconf={comment:/#.*/,"directive-inline":{pattern:/^(\s*)\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|AddAlt|AddAltByEncoding|AddAltByType|AddCharset|AddDefaultCharset|AddDescription|AddEncoding|AddHandler|AddIcon|AddIconByEncoding|AddIconByType|AddInputFilter|AddLanguage|AddModuleInfo|AddOutputFilter|AddOutputFilterByType|AddType|Alias|AliasMatch|Allow|AllowCONNECT|AllowEncodedSlashes|AllowMethods|AllowOverride|AllowOverrideList|Anonymous|Anonymous_LogEmail|Anonymous_MustGiveEmail|Anonymous_NoUserID|Anonymous_VerifyEmail|AsyncRequestWorkerFactor|AuthBasicAuthoritative|AuthBasicFake|AuthBasicProvider|AuthBasicUseDigestAlgorithm|AuthDBDUserPWQuery|AuthDBDUserRealmQuery|AuthDBMGroupFile|AuthDBMType|AuthDBMUserFile|AuthDigestAlgorithm|AuthDigestDomain|AuthDigestNonceLifetime|AuthDigestProvider|AuthDigestQop|AuthDigestShmemSize|AuthFormAuthoritative|AuthFormBody|AuthFormDisableNoStore|AuthFormFakeBasicAuth|AuthFormLocation|AuthFormLoginRequiredLocation|AuthFormLoginSuccessLocation|AuthFormLogoutLocation|AuthFormMethod|AuthFormMimetype|AuthFormPassword|AuthFormProvider|AuthFormSitePassphrase|AuthFormSize|AuthFormUsername|AuthGroupFile|AuthLDAPAuthorizePrefix|AuthLDAPBindAuthoritative|AuthLDAPBindDN|AuthLDAPBindPassword|AuthLDAPCharsetConfig|AuthLDAPCompareAsUser|AuthLDAPCompareDNOnServer|AuthLDAPDereferenceAliases|AuthLDAPGroupAttribute|AuthLDAPGroupAttributeIsDN|AuthLDAPInitialBindAsUser|AuthLDAPInitialBindPattern|AuthLDAPMaxSubGroupDepth|AuthLDAPRemoteUserAttribute|AuthLDAPRemoteUserIsDN|AuthLDAPSearchAsUser|AuthLDAPSubGroupAttribute|AuthLDAPSubGroupClass|AuthLDAPUrl|AuthMerging|AuthName|AuthnCacheContext|AuthnCacheEnable|AuthnCacheProvideFor|AuthnCacheSOCache|AuthnCacheTimeout|AuthnzFcgiCheckAuthnProvider|AuthnzFcgiDefineProvider|AuthType|AuthUserFile|AuthzDBDLoginToReferer|AuthzDBDQuery|AuthzDBDRedirectQuery|AuthzDBMType|AuthzSendForbiddenOnFailure|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferedLogs|BufferSize|CacheDefaultExpire|CacheDetailHeader|CacheDirLength|CacheDirLevels|CacheDisable|CacheEnable|CacheFile|CacheHeader|CacheIgnoreCacheControl|CacheIgnoreHeaders|CacheIgnoreNoLastMod|CacheIgnoreQueryString|CacheIgnoreURLSessionIdentifiers|CacheKeyBaseURL|CacheLastModifiedFactor|CacheLock|CacheLockMaxAge|CacheLockPath|CacheMaxExpire|CacheMaxFileSize|CacheMinExpire|CacheMinFileSize|CacheNegotiatedDocs|CacheQuickHandler|CacheReadSize|CacheReadTime|CacheRoot|CacheSocache|CacheSocacheMaxSize|CacheSocacheMaxTime|CacheSocacheMinTime|CacheSocacheReadSize|CacheSocacheReadTime|CacheStaleOnError|CacheStoreExpired|CacheStoreNoStore|CacheStorePrivate|CGIDScriptTimeout|CGIMapExtension|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|DeflateBufferSize|DeflateCompressionLevel|DeflateFilterNote|DeflateInflateLimitRequestBody|DeflateInflateRatioBurst|DeflateInflateRatioLimit|DeflateMemLevel|DeflateWindowSize|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DTracePrivileges|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtendedStatus|ExtFilterDefine|ExtFilterOptions|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|HeartbeatAddress|HeartbeatListen|HeartbeatMaxServers|HeartbeatStorage|HeartbeatStorage|HostnameLookups|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|IndexHeadInsert|IndexIgnore|IndexIgnoreReset|IndexOptions|IndexOrderDefault|IndexStyleSheet|InputSed|ISAPIAppendLogToErrors|ISAPIAppendLogToQuery|ISAPICacheFile|ISAPIFakeAsync|ISAPILogNotSupported|ISAPIReadAheadBuffer|KeepAlive|KeepAliveTimeout|KeptBodySize|LanguagePriority|LDAPCacheEntries|LDAPCacheTTL|LDAPConnectionPoolTTL|LDAPConnectionTimeout|LDAPLibraryDebug|LDAPOpCacheEntries|LDAPOpCacheTTL|LDAPReferralHopLimit|LDAPReferrals|LDAPRetries|LDAPRetryDelay|LDAPSharedCacheFile|LDAPSharedCacheSize|LDAPTimeout|LDAPTrustedClientCert|LDAPTrustedGlobalCert|LDAPTrustedMode|LDAPVerifyServerCert|LimitInternalRecursion|LimitRequestBody|LimitRequestFields|LimitRequestFieldSize|LimitRequestLine|LimitXMLRequestBody|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|LuaHookAccessChecker|LuaHookAuthChecker|LuaHookCheckUserID|LuaHookFixups|LuaHookInsertFilter|LuaHookLog|LuaHookMapToStorage|LuaHookTranslateName|LuaHookTypeChecker|LuaInherit|LuaInputFilter|LuaMapHandler|LuaOutputFilter|LuaPackageCPath|LuaPackagePath|LuaQuickHandler|LuaRoot|LuaScope|MaxConnectionsPerChild|MaxKeepAliveRequests|MaxMemFree|MaxRangeOverlaps|MaxRangeReversals|MaxRanges|MaxRequestWorkers|MaxSpareServers|MaxSpareThreads|MaxThreads|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|MMapFile|ModemStandard|ModMimeUsePathInfo|MultiviewsMatch|Mutex|NameVirtualHost|NoProxy|NWSSLTrustedCerts|NWSSLUpgradeable|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|ProxyAddHeaders|ProxyBadHeader|ProxyBlock|ProxyDomain|ProxyErrorOverride|ProxyExpressDBMFile|ProxyExpressDBMType|ProxyExpressEnable|ProxyFtpDirCharset|ProxyFtpEscapeWildcards|ProxyFtpListOnWildcard|ProxyHTMLBufSize|ProxyHTMLCharsetOut|ProxyHTMLDocType|ProxyHTMLEnable|ProxyHTMLEvents|ProxyHTMLExtended|ProxyHTMLFixups|ProxyHTMLInterp|ProxyHTMLLinks|ProxyHTMLMeta|ProxyHTMLStripComments|ProxyHTMLURLMap|ProxyIOBufferSize|ProxyMaxForwards|ProxyPass|ProxyPassInherit|ProxyPassInterpolateEnv|ProxyPassMatch|ProxyPassReverse|ProxyPassReverseCookieDomain|ProxyPassReverseCookiePath|ProxyPreserveHost|ProxyReceiveBufferSize|ProxyRemote|ProxyRemoteMatch|ProxyRequests|ProxySCGIInternalRedirect|ProxySCGISendfile|ProxySet|ProxySourceAddress|ProxyStatus|ProxyTimeout|ProxyVia|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIPHeader|RemoteIPInternalProxy|RemoteIPInternalProxyList|RemoteIPProxiesHeader|RemoteIPTrustedProxy|RemoteIPTrustedProxyList|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|RewriteBase|RewriteCond|RewriteEngine|RewriteMap|RewriteOptions|RewriteRule|RLimitCPU|RLimitMEM|RLimitNPROC|Satisfy|ScoreBoardFile|Script|ScriptAlias|ScriptAliasMatch|ScriptInterpreterSource|ScriptLog|ScriptLogBuffer|ScriptLogLength|ScriptSock|SecureListen|SeeRequestTail|SendBufferSize|ServerAdmin|ServerAlias|ServerLimit|ServerName|ServerPath|ServerRoot|ServerSignature|ServerTokens|Session|SessionCookieName|SessionCookieName2|SessionCookieRemove|SessionCryptoCipher|SessionCryptoDriver|SessionCryptoPassphrase|SessionCryptoPassphraseFile|SessionDBDCookieName|SessionDBDCookieName2|SessionDBDCookieRemove|SessionDBDDeleteLabel|SessionDBDInsertLabel|SessionDBDPerUser|SessionDBDSelectLabel|SessionDBDUpdateLabel|SessionEnv|SessionExclude|SessionHeader|SessionInclude|SessionMaxAge|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|SSIEndTag|SSIErrorMsg|SSIETag|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSLCACertificateFile|SSLCACertificatePath|SSLCADNRequestFile|SSLCADNRequestPath|SSLCARevocationCheck|SSLCARevocationFile|SSLCARevocationPath|SSLCertificateChainFile|SSLCertificateFile|SSLCertificateKeyFile|SSLCipherSuite|SSLCompression|SSLCryptoDevice|SSLEngine|SSLFIPS|SSLHonorCipherOrder|SSLInsecureRenegotiation|SSLOCSPDefaultResponder|SSLOCSPEnable|SSLOCSPOverrideResponder|SSLOCSPResponderTimeout|SSLOCSPResponseMaxAge|SSLOCSPResponseTimeSkew|SSLOCSPUseRequestNonce|SSLOpenSSLConfCmd|SSLOptions|SSLPassPhraseDialog|SSLProtocol|SSLProxyCACertificateFile|SSLProxyCACertificatePath|SSLProxyCARevocationCheck|SSLProxyCARevocationFile|SSLProxyCARevocationPath|SSLProxyCheckPeerCN|SSLProxyCheckPeerExpire|SSLProxyCheckPeerName|SSLProxyCipherSuite|SSLProxyEngine|SSLProxyMachineCertificateChainFile|SSLProxyMachineCertificateFile|SSLProxyMachineCertificatePath|SSLProxyProtocol|SSLProxyVerify|SSLProxyVerifyDepth|SSLRandomSeed|SSLRenegBufferSize|SSLRequire|SSLRequireSSL|SSLSessionCache|SSLSessionCacheTimeout|SSLSessionTicketKeyFile|SSLSRPUnknownUserSeed|SSLSRPVerifierFile|SSLStaplingCache|SSLStaplingErrorCacheTimeout|SSLStaplingFakeTryLater|SSLStaplingForceURL|SSLStaplingResponderTimeout|SSLStaplingResponseMaxAge|SSLStaplingResponseTimeSkew|SSLStaplingReturnResponderErrors|SSLStaplingStandardCacheTimeout|SSLStrictSNIVHostCheck|SSLUserName|SSLUseStapling|SSLVerifyClient|SSLVerifyDepth|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadsPerChild|ThreadStackSize|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|VirtualDocumentRoot|VirtualDocumentRootIP|VirtualScriptAlias|VirtualScriptAliasIP|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\b/im,lookbehind:!0,alias:"property"},"directive-block":{pattern:/<\/?\b(?:AuthnProviderAlias|AuthzProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|RequireAll|RequireAny|RequireNone|VirtualHost)\b *.*>/i,inside:{"directive-block":{pattern:/^<\/?\w+/,inside:{punctuation:/^<\/?/},alias:"tag"},"directive-block-parameter":{pattern:/.*[^>]/,inside:{punctuation:/:/,string:{pattern:/("|').*\1/,inside:{variable:/[$%]\{?(?:\w\.?[-+:]?)+\}?/}}},alias:"attr-value"},punctuation:/>/},alias:"tag"},"directive-flags":{pattern:/\[(?:\w,?)+\]/,alias:"keyword"},string:{pattern:/("|').*\1/,inside:{variable:/[$%]\{?(?:\w\.?[-+:]?)+\}?/}},variable:/[$%]\{?(?:\w\.?[-+:]?)+\}?/,regex:/\^?.*\$|\^.*\$?/};

/***/ }),
/* 1021 */
/***/ (function(module, exports) {

Prism.languages.apl={comment:/(?:⍝|#[! ]).*$/m,string:{pattern:/'(?:[^'\r\n]|'')*'/,greedy:!0},number:/¯?(?:\d*\.?\d+(?:e[+¯]?\d+)?|¯|∞)(?:j¯?(?:\d*\.?\d+(?:e[+¯]?\d+)?|¯|∞))?/i,statement:/:[A-Z][a-z][A-Za-z]*\b/,"system-function":{pattern:/⎕[A-Z]+/i,alias:"function"},constant:/[⍬⌾#⎕⍞]/,"function":/[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,"monadic-operator":{pattern:/[\\\/⌿⍀¨⍨⌶&∥]/,alias:"operator"},"dyadic-operator":{pattern:/[.⍣⍠⍤∘⌸@⌺]/,alias:"operator"},assignment:{pattern:/←/,alias:"keyword"},punctuation:/[\[;\]()◇⋄]/,dfn:{pattern:/[{}⍺⍵⍶⍹∇⍫:]/,alias:"builtin"}};

/***/ }),
/* 1022 */
/***/ (function(module, exports) {

Prism.languages.applescript={comment:[/\(\*(?:\(\*[\s\S]*?\*\)|[\s\S])*?\*\)/,/--.+/,/#.+/],string:/"(?:\\.|[^"\\\r\n])*"/,number:/(?:\b\d+\.?\d*|\B\.\d+)(?:e-?\d+)?\b/i,operator:[/[&=≠≤≥*+\-\/÷^]|[<>]=?/,/\b(?:(?:start|begin|end)s? with|(?:(?:does not|doesn't) contain|contains?)|(?:is|isn't|is not) (?:in|contained by)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:(?:does not|doesn't) come|comes) (?:before|after)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equals|equal to|isn't|is not)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|or|div|mod|as|not))\b/],keyword:/\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\b/,"class":{pattern:/\b(?:alias|application|boolean|class|constant|date|file|integer|list|number|POSIX file|real|record|reference|RGB color|script|text|centimetres|centimeters|feet|inches|kilometres|kilometers|metres|meters|miles|yards|square feet|square kilometres|square kilometers|square metres|square meters|square miles|square yards|cubic centimetres|cubic centimeters|cubic feet|cubic inches|cubic metres|cubic meters|cubic yards|gallons|litres|liters|quarts|grams|kilograms|ounces|pounds|degrees Celsius|degrees Fahrenheit|degrees Kelvin)\b/,alias:"builtin"},punctuation:/[{}():,¬«»《》]/};

/***/ }),
/* 1023 */
/***/ (function(module, exports) {

Prism.languages.arduino=Prism.languages.extend("cpp",{keyword:/\b(?:setup|if|else|while|do|for|return|in|instanceof|default|function|loop|goto|switch|case|new|try|throw|catch|finally|null|break|continue|boolean|bool|void|byte|word|string|String|array|int|long|integer|double)\b/,builtin:/\b(?:KeyboardController|MouseController|SoftwareSerial|EthernetServer|EthernetClient|LiquidCrystal|LiquidCrystal_I2C|RobotControl|GSMVoiceCall|EthernetUDP|EsploraTFT|HttpClient|RobotMotor|WiFiClient|GSMScanner|FileSystem|Scheduler|GSMServer|YunClient|YunServer|IPAddress|GSMClient|GSMModem|Keyboard|Ethernet|Console|GSMBand|Esplora|Stepper|Process|WiFiUDP|GSM_SMS|Mailbox|USBHost|Firmata|PImage|Client|Server|GSMPIN|FileIO|Bridge|Serial|EEPROM|Stream|Mouse|Audio|Servo|File|Task|GPRS|WiFi|Wire|TFT|GSM|SPI|SD|runShellCommandAsynchronously|analogWriteResolution|retrieveCallingNumber|printFirmwareVersion|analogReadResolution|sendDigitalPortPair|noListenOnLocalhost|readJoystickButton|setFirmwareVersion|readJoystickSwitch|scrollDisplayRight|getVoiceCallStatus|scrollDisplayLeft|writeMicroseconds|delayMicroseconds|beginTransmission|getSignalStrength|runAsynchronously|getAsynchronously|listenOnLocalhost|getCurrentCarrier|readAccelerometer|messageAvailable|sendDigitalPorts|lineFollowConfig|countryNameWrite|runShellCommand|readStringUntil|rewindDirectory|readTemperature|setClockDivider|readLightSensor|endTransmission|analogReference|detachInterrupt|countryNameRead|attachInterrupt|encryptionType|readBytesUntil|robotNameWrite|readMicrophone|robotNameRead|cityNameWrite|userNameWrite|readJoystickY|readJoystickX|mouseReleased|openNextFile|scanNetworks|noInterrupts|digitalWrite|beginSpeaker|mousePressed|isActionDone|mouseDragged|displayLogos|noAutoscroll|addParameter|remoteNumber|getModifiers|keyboardRead|userNameRead|waitContinue|processInput|parseCommand|printVersion|readNetworks|writeMessage|blinkVersion|cityNameRead|readMessage|setDataMode|parsePacket|isListening|setBitOrder|beginPacket|isDirectory|motorsWrite|drawCompass|digitalRead|clearScreen|serialEvent|rightToLeft|setTextSize|leftToRight|requestFrom|keyReleased|compassRead|analogWrite|interrupts|WiFiServer|disconnect|playMelody|parseFloat|autoscroll|getPINUsed|setPINUsed|setTimeout|sendAnalog|readSlider|analogRead|beginWrite|createChar|motorsStop|keyPressed|tempoWrite|readButton|subnetMask|debugPrint|macAddress|writeGreen|randomSeed|attachGPRS|readString|sendString|remotePort|releaseAll|mouseMoved|background|getXChange|getYChange|answerCall|getResult|voiceCall|endPacket|constrain|getSocket|writeJSON|getButton|available|connected|findUntil|readBytes|exitValue|readGreen|writeBlue|startLoop|IPAddress|isPressed|sendSysex|pauseMode|gatewayIP|setCursor|getOemKey|tuneWrite|noDisplay|loadImage|switchPIN|onRequest|onReceive|changePIN|playFile|noBuffer|parseInt|overflow|checkPIN|knobRead|beginTFT|bitClear|updateIR|bitWrite|position|writeRGB|highByte|writeRed|setSpeed|readBlue|noStroke|remoteIP|transfer|shutdown|hangCall|beginSMS|endWrite|attached|maintain|noCursor|checkReg|checkPUK|shiftOut|isValid|shiftIn|pulseIn|connect|println|localIP|pinMode|getIMEI|display|noBlink|process|getBand|running|beginSD|drawBMP|lowByte|setBand|release|bitRead|prepare|pointTo|readRed|setMode|noFill|remove|listen|stroke|detach|attach|noTone|exists|buffer|height|bitSet|circle|config|cursor|random|IRread|setDNS|endSMS|getKey|micros|millis|begin|print|write|ready|flush|width|isPIN|blink|clear|press|mkdir|rmdir|close|point|yield|image|BSSID|click|delay|read|text|move|peek|beep|rect|line|open|seek|fill|size|turn|stop|home|find|step|tone|sqrt|RSSI|SSID|end|bit|tan|cos|sin|pow|map|abs|max|min|get|run|put)\b/,constant:/\b(?:DIGITAL_MESSAGE|FIRMATA_STRING|ANALOG_MESSAGE|REPORT_DIGITAL|REPORT_ANALOG|INPUT_PULLUP|SET_PIN_MODE|INTERNAL2V56|SYSTEM_RESET|LED_BUILTIN|INTERNAL1V1|SYSEX_START|INTERNAL|EXTERNAL|DEFAULT|OUTPUT|INPUT|HIGH|LOW)\b/});

/***/ }),
/* 1024 */
/***/ (function(module, exports) {

Prism.languages.arff={comment:/%.*/,string:{pattern:/(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0},keyword:/@(?:attribute|data|end|relation)\b/i,number:/\b\d+(?:\.\d+)?\b/,punctuation:/[{},]/};

/***/ }),
/* 1025 */
/***/ (function(module, exports) {

!function(a){var i={pattern:/(^[ \t]*)\[(?!\[)(?:(["'$`])(?:(?!\2)[^\\]|\\.)*\2|\[(?:[^\]\\]|\\.)*\]|[^\]\\]|\\.)*\]/m,lookbehind:!0,inside:{quoted:{pattern:/([$`])(?:(?!\1)[^\\]|\\.)*\1/,inside:{punctuation:/^[$`]|[$`]$/}},interpreted:{pattern:/'(?:[^'\\]|\\.)*'/,inside:{punctuation:/^'|'$/}},string:/"(?:[^"\\]|\\.)*"/,variable:/\w+(?==)/,punctuation:/^\[|\]$|,/,operator:/=/,"attr-value":/(?!^\s+$).+/}};a.languages.asciidoc={"comment-block":{pattern:/^(\/{4,})(?:\r?\n|\r)(?:[\s\S]*(?:\r?\n|\r))??\1/m,alias:"comment"},table:{pattern:/^\|={3,}(?:(?:\r?\n|\r).*)*?(?:\r?\n|\r)\|={3,}$/m,inside:{specifiers:{pattern:/(?!\|)(?:(?:(?:\d+(?:\.\d+)?|\.\d+)[+*])?(?:[<^>](?:\.[<^>])?|\.[<^>])?[a-z]*)(?=\|)/,alias:"attr-value"},punctuation:{pattern:/(^|[^\\])[|!]=*/,lookbehind:!0}}},"passthrough-block":{pattern:/^(\+{4,})(?:\r?\n|\r)(?:[\s\S]*(?:\r?\n|\r))??\1$/m,inside:{punctuation:/^\++|\++$/}},"literal-block":{pattern:/^(-{4,}|\.{4,})(?:\r?\n|\r)(?:[\s\S]*(?:\r?\n|\r))??\1$/m,inside:{punctuation:/^(?:-+|\.+)|(?:-+|\.+)$/}},"other-block":{pattern:/^(--|\*{4,}|_{4,}|={4,})(?:\r?\n|\r)(?:[\s\S]*(?:\r?\n|\r))??\1$/m,inside:{punctuation:/^(?:-+|\*+|_+|=+)|(?:-+|\*+|_+|=+)$/}},"list-punctuation":{pattern:/(^[ \t]*)(?:-|\*{1,5}|\.{1,5}|(?:[a-z]|\d+)\.|[xvi]+\))(?= )/im,lookbehind:!0,alias:"punctuation"},"list-label":{pattern:/(^[ \t]*)[a-z\d].+(?::{2,4}|;;)(?=\s)/im,lookbehind:!0,alias:"symbol"},"indented-block":{pattern:/((\r?\n|\r)\2)([ \t]+)\S.*(?:(?:\r?\n|\r)\3.+)*(?=\2{2}|$)/,lookbehind:!0},comment:/^\/\/.*/m,title:{pattern:/^.+(?:\r?\n|\r)(?:={3,}|-{3,}|~{3,}|\^{3,}|\+{3,})$|^={1,5} +.+|^\.(?![\s.]).*/m,alias:"important",inside:{punctuation:/^(?:\.|=+)|(?:=+|-+|~+|\^+|\++)$/}},"attribute-entry":{pattern:/^:[^:\r\n]+:(?: .*?(?: \+(?:\r?\n|\r).*?)*)?$/m,alias:"tag"},attributes:i,hr:{pattern:/^'{3,}$/m,alias:"punctuation"},"page-break":{pattern:/^<{3,}$/m,alias:"punctuation"},admonition:{pattern:/^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,alias:"keyword"},callout:[{pattern:/(^[ \t]*)<?\d*>/m,lookbehind:!0,alias:"symbol"},{pattern:/<\d+>/,alias:"symbol"}],macro:{pattern:/\b[a-z\d][a-z\d-]*::?(?:(?:\S+)??\[(?:[^\]\\"]|(["'])(?:(?!\1)[^\\]|\\.)*\1|\\.)*\])/,inside:{"function":/^[a-z\d-]+(?=:)/,punctuation:/^::?/,attributes:{pattern:/(?:\[(?:[^\]\\"]|(["'])(?:(?!\1)[^\\]|\\.)*\1|\\.)*\])/,inside:i.inside}}},inline:{pattern:/(^|[^\\])(?:(?:\B\[(?:[^\]\\"]|(["'])(?:(?!\2)[^\\]|\\.)*\2|\\.)*\])?(?:\b_(?!\s)(?: _|[^_\\\r\n]|\\.)+(?:(?:\r?\n|\r)(?: _|[^_\\\r\n]|\\.)+)*_\b|\B``(?!\s).+?(?:(?:\r?\n|\r).+?)*''\B|\B`(?!\s)(?: ['`]|.)+?(?:(?:\r?\n|\r)(?: ['`]|.)+?)*['`]\B|\B(['*+#])(?!\s)(?: \3|(?!\3)[^\\\r\n]|\\.)+(?:(?:\r?\n|\r)(?: \3|(?!\3)[^\\\r\n]|\\.)+)*\3\B)|(?:\[(?:[^\]\\"]|(["'])(?:(?!\4)[^\\]|\\.)*\4|\\.)*\])?(?:(__|\*\*|\+\+\+?|##|\$\$|[~^]).+?(?:(?:\r?\n|\r).+?)*\5|\{[^}\r\n]+\}|\[\[\[?.+?(?:(?:\r?\n|\r).+?)*\]?\]\]|<<.+?(?:(?:\r?\n|\r).+?)*>>|\(\(\(?.+?(?:(?:\r?\n|\r).+?)*\)?\)\)))/m,lookbehind:!0,inside:{attributes:i,url:{pattern:/^(?:\[\[\[?.+?\]?\]\]|<<.+?>>)$/,inside:{punctuation:/^(?:\[\[\[?|<<)|(?:\]\]\]?|>>)$/}},"attribute-ref":{pattern:/^\{.+\}$/,inside:{variable:{pattern:/(^\{)[a-z\d,+_-]+/,lookbehind:!0},operator:/^[=?!#%@$]|!(?=[:}])/,punctuation:/^\{|\}$|::?/}},italic:{pattern:/^(['_])[\s\S]+\1$/,inside:{punctuation:/^(?:''?|__?)|(?:''?|__?)$/}},bold:{pattern:/^\*[\s\S]+\*$/,inside:{punctuation:/^\*\*?|\*\*?$/}},punctuation:/^(?:``?|\+{1,3}|##?|\$\$|[~^]|\(\(\(?)|(?:''?|\+{1,3}|##?|\$\$|[~^`]|\)?\)\))$/}},replacement:{pattern:/\((?:C|TM|R)\)/,alias:"builtin"},entity:/&#?[\da-z]{1,8};/i,"line-continuation":{pattern:/(^| )\+$/m,lookbehind:!0,alias:"punctuation"}},i.inside.interpreted.inside.rest={macro:a.languages.asciidoc.macro,inline:a.languages.asciidoc.inline,replacement:a.languages.asciidoc.replacement,entity:a.languages.asciidoc.entity},a.languages.asciidoc["passthrough-block"].inside.rest={macro:a.languages.asciidoc.macro},a.languages.asciidoc["literal-block"].inside.rest={callout:a.languages.asciidoc.callout},a.languages.asciidoc.table.inside.rest={"comment-block":a.languages.asciidoc["comment-block"],"passthrough-block":a.languages.asciidoc["passthrough-block"],"literal-block":a.languages.asciidoc["literal-block"],"other-block":a.languages.asciidoc["other-block"],"list-punctuation":a.languages.asciidoc["list-punctuation"],"indented-block":a.languages.asciidoc["indented-block"],comment:a.languages.asciidoc.comment,title:a.languages.asciidoc.title,"attribute-entry":a.languages.asciidoc["attribute-entry"],attributes:a.languages.asciidoc.attributes,hr:a.languages.asciidoc.hr,"page-break":a.languages.asciidoc["page-break"],admonition:a.languages.asciidoc.admonition,"list-label":a.languages.asciidoc["list-label"],callout:a.languages.asciidoc.callout,macro:a.languages.asciidoc.macro,inline:a.languages.asciidoc.inline,replacement:a.languages.asciidoc.replacement,entity:a.languages.asciidoc.entity,"line-continuation":a.languages.asciidoc["line-continuation"]},a.languages.asciidoc["other-block"].inside.rest={table:a.languages.asciidoc.table,"list-punctuation":a.languages.asciidoc["list-punctuation"],"indented-block":a.languages.asciidoc["indented-block"],comment:a.languages.asciidoc.comment,"attribute-entry":a.languages.asciidoc["attribute-entry"],attributes:a.languages.asciidoc.attributes,hr:a.languages.asciidoc.hr,"page-break":a.languages.asciidoc["page-break"],admonition:a.languages.asciidoc.admonition,"list-label":a.languages.asciidoc["list-label"],macro:a.languages.asciidoc.macro,inline:a.languages.asciidoc.inline,replacement:a.languages.asciidoc.replacement,entity:a.languages.asciidoc.entity,"line-continuation":a.languages.asciidoc["line-continuation"]},a.languages.asciidoc.title.inside.rest={macro:a.languages.asciidoc.macro,inline:a.languages.asciidoc.inline,replacement:a.languages.asciidoc.replacement,entity:a.languages.asciidoc.entity},a.hooks.add("wrap",function(a){"entity"===a.type&&(a.attributes.title=a.content.replace(/&amp;/,"&"))})}(Prism);

/***/ }),
/* 1026 */
/***/ (function(module, exports) {

Prism.languages.asm6502={comment:/;.*/,directive:{pattern:/\.\w+(?= )/,alias:"keyword"},string:/(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,opcode:{pattern:/\b(?:adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya|ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA)\b/,alias:"property"},hexnumber:{pattern:/#?\$[\da-f]{2,4}/i,alias:"string"},binarynumber:{pattern:/#?%[01]+/,alias:"string"},decimalnumber:{pattern:/#?\d+/,alias:"string"},register:{pattern:/\b[xya]\b/i,alias:"variable"}};

/***/ }),
/* 1027 */
/***/ (function(module, exports) {

Prism.languages.aspnet=Prism.languages.extend("markup",{"page-directive tag":{pattern:/<%\s*@.*%>/i,inside:{"page-directive tag":/<%\s*@\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,rest:Prism.languages.markup.tag.inside}},"directive tag":{pattern:/<%.*%>/i,inside:{"directive tag":/<%\s*?[$=%#:]{0,2}|%>/i,rest:Prism.languages.csharp}}}),Prism.languages.aspnet.tag.pattern=/<(?!%)\/?[^\s>\/]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i,Prism.languages.insertBefore("inside","punctuation",{"directive tag":Prism.languages.aspnet["directive tag"]},Prism.languages.aspnet.tag.inside["attr-value"]),Prism.languages.insertBefore("aspnet","comment",{"asp comment":/<%--[\s\S]*?--%>/}),Prism.languages.insertBefore("aspnet",Prism.languages.javascript?"script":"tag",{"asp script":{pattern:/(<script(?=.*runat=['"]?server['"]?)[\s\S]*?>)[\s\S]*?(?=<\/script>)/i,lookbehind:!0,inside:Prism.languages.csharp||{}}});

/***/ }),
/* 1028 */
/***/ (function(module, exports) {

Prism.languages.autohotkey={comment:{pattern:/(^[^";\n]*("[^"\n]*?"[^"\n]*?)*)(?:;.*$|^\s*\/\*[\s\S]*\n\*\/)/m,lookbehind:!0},string:/"(?:[^"\n\r]|"")*"/m,"function":/[^(); \t,\n+*\-=?>:\\\/<&%\[\]]+?(?=\()/m,tag:/^[ \t]*[^\s:]+?(?=:(?:[^:]|$))/m,variable:/%\w+%/,number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee]-?\d+)?/,operator:/\?|\/\/?=?|:=|\|[=|]?|&[=&]?|\+[=+]?|-[=-]?|\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\b(?:AND|NOT|OR)\b/,punctuation:/[{}[\]():,]/,"boolean":/\b(?:true|false)\b/,selector:/\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\b/i,constant:/\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_formatfloat|a_formatinteger|a_gui|a_guievent|a_guicontrol|a_guicontrolevent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|programfiles|a_programfiles|a_programs|a_programscommon|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel)\b/i,builtin:/\b(?:abs|acos|asc|asin|atan|ceil|chr|class|cos|dllcall|exp|fileexist|Fileopen|floor|il_add|il_create|il_destroy|instr|substr|isfunc|islabel|IsObject|ln|log|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|mod|onmessage|numget|numput|registercallback|regexmatch|regexreplace|round|sin|tan|sqrt|strlen|sb_seticon|sb_setparts|sb_settext|strsplit|tv_add|tv_delete|tv_getchild|tv_getcount|tv_getnext|tv_get|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__New|__Call|__Get|__Set)\b/i,symbol:/\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\b/i,important:/#\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InstallKeybdHook|InstallMouseHook|KeyHistory|LTrim|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|WinActivateForce)\b/i,keyword:/\b(?:Abort|AboveNormal|Add|ahk_class|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Region|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|TryAgain|Type|UnCheck|underline|Unicode|Unlock|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\b/i};

/***/ }),
/* 1029 */
/***/ (function(module, exports) {

Prism.languages.autoit={comment:[/;.*/,{pattern:/(^\s*)#(?:comments-start|cs)[\s\S]*?^\s*#(?:comments-end|ce)/m,lookbehind:!0}],url:{pattern:/(^\s*#include\s+)(?:<[^\r\n>]+>|"[^\r\n"]+")/m,lookbehind:!0},string:{pattern:/(["'])(?:\1\1|(?!\1)[^\r\n])*\1/,greedy:!0,inside:{variable:/([%$@])\w+\1/}},directive:{pattern:/(^\s*)#\w+/m,lookbehind:!0,alias:"keyword"},"function":/\b\w+(?=\()/,variable:/[$@]\w+/,keyword:/\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\b/i,number:/\b(?:0x[\da-f]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/i,"boolean":/\b(?:True|False)\b/i,operator:/<[=>]?|[-+*\/=&>]=?|[?^]|\b(?:And|Or|Not)\b/i,punctuation:/[\[\]().,:]/};

/***/ }),
/* 1030 */
/***/ (function(module, exports) {

!function(e){var t={variable:[{pattern:/\$?\(\([\s\S]+?\)\)/,inside:{variable:[{pattern:/(^\$\(\([\s\S]+)\)\)/,lookbehind:!0},/^\$\(\(/],number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee]-?\d+)?/,operator:/--?|-=|\+\+?|\+=|!=?|~|\*\*?|\*=|\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\^=?|\|\|?|\|=|\?|:/,punctuation:/\(\(?|\)\)?|,|;/}},{pattern:/\$\([^)]+\)|`[^`]+`/,greedy:!0,inside:{variable:/^\$\(|^`|\)$|`$/}},/\$(?:[\w#?*!@]+|\{[^}]+\})/i]};e.languages.bash={shebang:{pattern:/^#!\s*\/bin\/bash|^#!\s*\/bin\/sh/,alias:"important"},comment:{pattern:/(^|[^"{\\])#.*/,lookbehind:!0},string:[{pattern:/((?:^|[^<])<<\s*)["']?(\w+?)["']?\s*\r?\n(?:[\s\S])*?\r?\n\2/,lookbehind:!0,greedy:!0,inside:t},{pattern:/(["'])(?:\\[\s\S]|\$\([^)]+\)|`[^`]+`|(?!\1)[^\\])*\1/,greedy:!0,inside:t}],variable:t.variable,"function":{pattern:/(^|[\s;|&])(?:alias|apropos|apt-get|aptitude|aspell|awk|basename|bash|bc|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chmod|chown|chroot|chkconfig|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|grep|groupadd|groupdel|groupmod|groups|gzip|hash|head|help|hg|history|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|jobs|join|kill|killall|less|link|ln|locate|logname|logout|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|make|man|mkdir|mkfifo|mkisofs|mknod|more|most|mount|mtools|mtr|mv|mmv|nano|netstat|nice|nl|nohup|notify-send|npm|nslookup|open|op|passwd|paste|pathchk|ping|pkill|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|rename|renice|remsync|rev|rm|rmdir|rsync|screen|scp|sdiff|sed|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|sync|tail|tar|tee|test|time|timeout|times|touch|top|traceroute|trap|tr|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|uptime|useradd|userdel|usermod|users|uuencode|uudecode|v|vdir|vi|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yes|zip)(?=$|[\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\s;|&])(?:let|:|\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\s;|&])/,lookbehind:!0},"boolean":{pattern:/(^|[\s;|&])(?:true|false)(?=$|[\s;|&])/,lookbehind:!0},operator:/&&?|\|\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,punctuation:/\$?\(\(?|\)\)?|\.\.|[{}[\];]/};var a=t.variable[1].inside;a.string=e.languages.bash.string,a["function"]=e.languages.bash["function"],a.keyword=e.languages.bash.keyword,a["boolean"]=e.languages.bash["boolean"],a.operator=e.languages.bash.operator,a.punctuation=e.languages.bash.punctuation,e.languages.shell=e.languages.bash}(Prism);

/***/ }),
/* 1031 */
/***/ (function(module, exports) {

Prism.languages.basic={comment:{pattern:/(?:!|REM\b).+/i,inside:{keyword:/^REM/i}},string:{pattern:/"(?:""|[!#$%&'()*,\/:;<=>?^_ +\-.A-Z\d])*"/i,greedy:!0},number:/(?:\b\d+\.?\d*|\B\.\d+)(?:E[+-]?\d+)?/i,keyword:/\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SHARED|SINGLE|SELECT CASE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\$|\b)/i,"function":/\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\$|\b)/i,operator:/<[=>]?|>=?|[+\-*\/^=&]|\b(?:AND|EQV|IMP|NOT|OR|XOR)\b/i,punctuation:/[,;:()]/};

/***/ }),
/* 1032 */
/***/ (function(module, exports) {

!function(e){var r=/%%?[~:\w]+%?|!\S+!/,t={pattern:/\/[a-z?]+(?=[ :]|$):?|-[a-z]\b|--[a-z-]+\b/im,alias:"attr-name",inside:{punctuation:/:/}},n=/"[^"]*"/,i=/(?:\b|-)\d+\b/;e.languages.batch={comment:[/^::.*/m,{pattern:/((?:^|[&(])[ \t]*)rem\b(?:[^^&)\r\n]|\^(?:\r\n|[\s\S]))*/im,lookbehind:!0}],label:{pattern:/^:.*/m,alias:"property"},command:[{pattern:/((?:^|[&(])[ \t]*)for(?: ?\/[a-z?](?:[ :](?:"[^"]*"|\S+))?)* \S+ in \([^)]+\) do/im,lookbehind:!0,inside:{keyword:/^for\b|\b(?:in|do)\b/i,string:n,parameter:t,variable:r,number:i,punctuation:/[()',]/}},{pattern:/((?:^|[&(])[ \t]*)if(?: ?\/[a-z?](?:[ :](?:"[^"]*"|\S+))?)* (?:not )?(?:cmdextversion \d+|defined \w+|errorlevel \d+|exist \S+|(?:"[^"]*"|\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:"[^"]*"|\S+))/im,lookbehind:!0,inside:{keyword:/^if\b|\b(?:not|cmdextversion|defined|errorlevel|exist)\b/i,string:n,parameter:t,variable:r,number:i,operator:/\^|==|\b(?:equ|neq|lss|leq|gtr|geq)\b/i}},{pattern:/((?:^|[&()])[ \t]*)else\b/im,lookbehind:!0,inside:{keyword:/^else\b/i}},{pattern:/((?:^|[&(])[ \t]*)set(?: ?\/[a-z](?:[ :](?:"[^"]*"|\S+))?)* (?:[^^&)\r\n]|\^(?:\r\n|[\s\S]))*/im,lookbehind:!0,inside:{keyword:/^set\b/i,string:n,parameter:t,variable:[r,/\w+(?=(?:[*\/%+\-&^|]|<<|>>)?=)/],number:i,operator:/[*\/%+\-&^|]=?|<<=?|>>=?|[!~_=]/,punctuation:/[()',]/}},{pattern:/((?:^|[&(])[ \t]*@?)\w+\b(?:[^^&)\r\n]|\^(?:\r\n|[\s\S]))*/im,lookbehind:!0,inside:{keyword:/^\w+\b/i,string:n,parameter:t,label:{pattern:/(^\s*):\S+/m,lookbehind:!0,alias:"property"},variable:r,number:i,operator:/\^/}}],operator:/[&@]/,punctuation:/[()']/}}(Prism);

/***/ }),
/* 1033 */
/***/ (function(module, exports) {

Prism.languages.bison=Prism.languages.extend("c",{}),Prism.languages.insertBefore("bison","comment",{bison:{pattern:/^[\s\S]*?%%[\s\S]*?%%/,inside:{c:{pattern:/%\{[\s\S]*?%\}|\{(?:\{[^}]*\}|[^{}])*\}/,inside:{delimiter:{pattern:/^%?\{|%?\}$/,alias:"punctuation"},"bison-variable":{pattern:/[$@](?:<[^\s>]+>)?[\w$]+/,alias:"variable",inside:{punctuation:/<|>/}},rest:Prism.languages.c}},comment:Prism.languages.c.comment,string:Prism.languages.c.string,property:/\S+(?=:)/,keyword:/%\w+/,number:{pattern:/(^|[^@])\b(?:0x[\da-f]+|\d+)/i,lookbehind:!0},punctuation:/%[%?]|[|:;\[\]<>]/}}});

/***/ }),
/* 1034 */
/***/ (function(module, exports) {

Prism.languages.brainfuck={pointer:{pattern:/<|>/,alias:"keyword"},increment:{pattern:/\+/,alias:"inserted"},decrement:{pattern:/-/,alias:"deleted"},branching:{pattern:/\[|\]/,alias:"important"},operator:/[.,]/,comment:/\S+/};

/***/ }),
/* 1035 */
/***/ (function(module, exports) {

Prism.languages.bro={comment:{pattern:/(^|[^\\$])#.*/,lookbehind:!0,inside:{italic:/\b(?:TODO|FIXME|XXX)\b/}},string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"boolean":/\b[TF]\b/,"function":{pattern:/(?:function|hook|event) \w+(?:::\w+)?/,inside:{keyword:/^(?:function|hook|event)/}},variable:{pattern:/(?:global|local) \w+/i,inside:{keyword:/(?:global|local)/}},builtin:/(?:@(?:load(?:-(?:sigs|plugin))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|group|error_handler|type_column))/,constant:{pattern:/const \w+/i,inside:{keyword:/const/}},keyword:/\b(?:break|next|continue|alarm|using|of|add|delete|export|print|return|schedule|when|timeout|addr|any|bool|count|double|enum|file|int|interval|pattern|opaque|port|record|set|string|subnet|table|time|vector|for|if|else|in|module|function)\b/,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&|\|\|?|\?|\*|\/|~|\^|%/,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,punctuation:/[{}[\];(),.:]/};

/***/ }),
/* 1036 */
/***/ (function(module, exports) {

Prism.languages.c=Prism.languages.extend("clike",{keyword:/\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\b/,operator:/-[>-]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/]/,number:/(?:\b0x[\da-f]+|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?)[ful]*/i}),Prism.languages.insertBefore("c","string",{macro:{pattern:/(^\s*)#\s*[a-z]+(?:[^\r\n\\]|\\(?:\r\n|[\s\S]))*/im,lookbehind:!0,alias:"property",inside:{string:{pattern:/(#\s*include\s*)(?:<.+?>|("|')(?:\\?.)+?\2)/,lookbehind:!0},directive:{pattern:/(#\s*)\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\b/,lookbehind:!0,alias:"keyword"}}},constant:/\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\b/}),delete Prism.languages.c["class-name"],delete Prism.languages.c["boolean"];

/***/ }),
/* 1037 */
/***/ (function(module, exports) {

Prism.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,"boolean":/\b(?:true|false)\b/,"function":/[a-z0-9_]+(?=\()/i,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/};

/***/ }),
/* 1038 */
/***/ (function(module, exports) {

Prism.languages.clojure={comment:/;+.*/,string:/"(?:\\.|[^\\"\r\n])*"/,operator:/(?:::|[:|'])\b[a-z][\w*+!?-]*\b/i,keyword:{pattern:/([^\w+*'?-])(?:def|if|do|let|\.\.|quote|var|->>|->|fn|loop|recur|throw|try|monitor-enter|\.|new|set!|def\-|defn|defn\-|defmacro|defmulti|defmethod|defstruct|defonce|declare|definline|definterface|defprotocol|==|defrecord|>=|deftype|<=|defproject|ns|\*|\+|\-|\/|<|=|>|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|conj|cons|constantly|cond|if-not|construct-proxy|contains\?|count|create-ns|create-struct|cycle|dec|deref|difference|disj|dissoc|distinct|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\?|ensure|eval|every\?|false\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|for|fnseq|frest|gensym|get-proxy-class|get|hash-map|hash-set|identical\?|identity|if-let|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\?|last|lazy-cat|lazy-cons|left|lefts|line-seq|list\*|list|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|name|namespace|neg\?|new|newline|next|nil\?|node|not|not-any\?|not-every\?|not=|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\?|set|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\?|split-at|split-with|str|string\?|struct|struct-map|subs|subvec|symbol|symbol\?|sync|take|take-nth|take-while|test|time|to-array|to-array-2d|tree-seq|true\?|union|up|update-proxy|val|vals|var-get|var-set|var\?|vector|vector-zip|vector\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\?|zipmap|zipper)(?=[^\w+*'?-])/,lookbehind:!0},"boolean":/\b(?:true|false|nil)\b/,number:/\b[0-9A-Fa-f]+\b/,punctuation:/[{}\[\](),]/};

/***/ }),
/* 1039 */
/***/ (function(module, exports) {

!function(e){var t=/#(?!\{).+/,n={pattern:/#\{[^}]+\}/,alias:"variable"};e.languages.coffeescript=e.languages.extend("javascript",{comment:t,string:[{pattern:/'(?:\\[\s\S]|[^\\'])*'/,greedy:!0},{pattern:/"(?:\\[\s\S]|[^\\"])*"/,greedy:!0,inside:{interpolation:n}}],keyword:/\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\b/,"class-member":{pattern:/@(?!\d)\w+/,alias:"variable"}}),e.languages.insertBefore("coffeescript","comment",{"multiline-comment":{pattern:/###[\s\S]+?###/,alias:"comment"},"block-regex":{pattern:/\/{3}[\s\S]*?\/{3}/,alias:"regex",inside:{comment:t,interpolation:n}}}),e.languages.insertBefore("coffeescript","string",{"inline-javascript":{pattern:/`(?:\\[\s\S]|[^\\`])*`/,inside:{delimiter:{pattern:/^`|`$/,alias:"punctuation"},rest:e.languages.javascript}},"multiline-string":[{pattern:/'''[\s\S]*?'''/,greedy:!0,alias:"string"},{pattern:/"""[\s\S]*?"""/,greedy:!0,alias:"string",inside:{interpolation:n}}]}),e.languages.insertBefore("coffeescript","keyword",{property:/(?!\d)\w+(?=\s*:(?!:))/}),delete e.languages.coffeescript["template-string"]}(Prism);

/***/ }),
/* 1040 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var _self="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(){var e=/\blang(?:uage)?-([\w-]+)\b/i,t=0,n=_self.Prism={manual:_self.Prism&&_self.Prism.manual,disableWorkerMessageHandler:_self.Prism&&_self.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof r?new r(e.type,n.util.encode(e.content),e.alias):"Array"===n.util.type(e)?e.map(n.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function(e,t){var r=n.util.type(e);switch(t=t||{},r){case"Object":if(t[n.util.objId(e)])return t[n.util.objId(e)];var a={};t[n.util.objId(e)]=a;for(var l in e)e.hasOwnProperty(l)&&(a[l]=n.util.clone(e[l],t));return a;case"Array":if(t[n.util.objId(e)])return t[n.util.objId(e)];var a=[];return t[n.util.objId(e)]=a,e.forEach(function(e,r){a[r]=n.util.clone(e,t)}),a}return e}},languages:{extend:function(e,t){var r=n.util.clone(n.languages[e]);for(var a in t)r[a]=t[a];return r},insertBefore:function(e,t,r,a){a=a||n.languages;var l=a[e];if(2==arguments.length){r=arguments[1];for(var i in r)r.hasOwnProperty(i)&&(l[i]=r[i]);return l}var o={};for(var s in l)if(l.hasOwnProperty(s)){if(s==t)for(var i in r)r.hasOwnProperty(i)&&(o[i]=r[i]);o[s]=l[s]}return n.languages.DFS(n.languages,function(t,n){n===a[e]&&t!=e&&(this[t]=o)}),a[e]=o},DFS:function(e,t,r,a){a=a||{};for(var l in e)e.hasOwnProperty(l)&&(t.call(e,l,e[l],r||l),"Object"!==n.util.type(e[l])||a[n.util.objId(e[l])]?"Array"!==n.util.type(e[l])||a[n.util.objId(e[l])]||(a[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,l,a)):(a[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,null,a)))}},plugins:{},highlightAll:function(e,t){n.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,r){var a={callback:r,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};n.hooks.run("before-highlightall",a);for(var l,i=a.elements||e.querySelectorAll(a.selector),o=0;l=i[o++];)n.highlightElement(l,t===!0,a.callback)},highlightElement:function(t,r,a){for(var l,i,o=t;o&&!e.test(o.className);)o=o.parentNode;o&&(l=(o.className.match(e)||[,""])[1].toLowerCase(),i=n.languages[l]),t.className=t.className.replace(e,"").replace(/\s+/g," ")+" language-"+l,t.parentNode&&(o=t.parentNode,/pre/i.test(o.nodeName)&&(o.className=o.className.replace(e,"").replace(/\s+/g," ")+" language-"+l));var s=t.textContent,u={element:t,language:l,grammar:i,code:s};if(n.hooks.run("before-sanity-check",u),!u.code||!u.grammar)return u.code&&(n.hooks.run("before-highlight",u),u.element.textContent=u.code,n.hooks.run("after-highlight",u)),n.hooks.run("complete",u),void 0;if(n.hooks.run("before-highlight",u),r&&_self.Worker){var g=new Worker(n.filename);g.onmessage=function(e){u.highlightedCode=e.data,n.hooks.run("before-insert",u),u.element.innerHTML=u.highlightedCode,a&&a.call(u.element),n.hooks.run("after-highlight",u),n.hooks.run("complete",u)},g.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else u.highlightedCode=n.highlight(u.code,u.grammar,u.language),n.hooks.run("before-insert",u),u.element.innerHTML=u.highlightedCode,a&&a.call(t),n.hooks.run("after-highlight",u),n.hooks.run("complete",u)},highlight:function(e,t,a){var l={code:e,grammar:t,language:a};return n.hooks.run("before-tokenize",l),l.tokens=n.tokenize(l.code,l.grammar),n.hooks.run("after-tokenize",l),r.stringify(n.util.encode(l.tokens),l.language)},matchGrammar:function(e,t,r,a,l,i,o){var s=n.Token;for(var u in r)if(r.hasOwnProperty(u)&&r[u]){if(u==o)return;var g=r[u];g="Array"===n.util.type(g)?g:[g];for(var c=0;c<g.length;++c){var h=g[c],f=h.inside,d=!!h.lookbehind,m=!!h.greedy,p=0,y=h.alias;if(m&&!h.pattern.global){var v=h.pattern.toString().match(/[imuy]*$/)[0];h.pattern=RegExp(h.pattern.source,v+"g")}h=h.pattern||h;for(var b=a,k=l;b<t.length;k+=t[b].length,++b){var w=t[b];if(t.length>e.length)return;if(!(w instanceof s)){if(m&&b!=t.length-1){h.lastIndex=k;var _=h.exec(e);if(!_)break;for(var j=_.index+(d?_[1].length:0),P=_.index+_[0].length,A=b,x=k,O=t.length;O>A&&(P>x||!t[A].type&&!t[A-1].greedy);++A)x+=t[A].length,j>=x&&(++b,k=x);if(t[b]instanceof s)continue;I=A-b,w=e.slice(k,x),_.index-=k}else{h.lastIndex=0;var _=h.exec(w),I=1}if(_){d&&(p=_[1]?_[1].length:0);var j=_.index+p,_=_[0].slice(p),P=j+_.length,N=w.slice(0,j),S=w.slice(P),C=[b,I];N&&(++b,k+=N.length,C.push(N));var E=new s(u,f?n.tokenize(_,f):_,y,_,m);if(C.push(E),S&&C.push(S),Array.prototype.splice.apply(t,C),1!=I&&n.matchGrammar(e,t,r,b,k,!0,u),i)break}else if(i)break}}}}},tokenize:function(e,t){var r=[e],a=t.rest;if(a){for(var l in a)t[l]=a[l];delete t.rest}return n.matchGrammar(e,r,t,0,0,!1),r},hooks:{all:{},add:function(e,t){var r=n.hooks.all;r[e]=r[e]||[],r[e].push(t)},run:function(e,t){var r=n.hooks.all[e];if(r&&r.length)for(var a,l=0;a=r[l++];)a(t)}}},r=n.Token=function(e,t,n,r,a){this.type=e,this.content=t,this.alias=n,this.length=0|(r||"").length,this.greedy=!!a};if(r.stringify=function(e,t,a){if("string"==typeof e)return e;if("Array"===n.util.type(e))return e.map(function(n){return r.stringify(n,t,e)}).join("");var l={type:e.type,content:r.stringify(e.content,t,a),tag:"span",classes:["token",e.type],attributes:{},language:t,parent:a};if(e.alias){var i="Array"===n.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(l.classes,i)}n.hooks.run("wrap",l);var o=Object.keys(l.attributes).map(function(e){return e+'="'+(l.attributes[e]||"").replace(/"/g,"&quot;")+'"'}).join(" ");return"<"+l.tag+' class="'+l.classes.join(" ")+'"'+(o?" "+o:"")+">"+l.content+"</"+l.tag+">"},!_self.document)return _self.addEventListener?(n.disableWorkerMessageHandler||_self.addEventListener("message",function(e){var t=JSON.parse(e.data),r=t.language,a=t.code,l=t.immediateClose;_self.postMessage(n.highlight(a,n.languages[r],r)),l&&_self.close()},!1),_self.Prism):_self.Prism;var a=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return a&&(n.filename=a.src,n.manual||a.hasAttribute("data-manual")||("loading"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(n.highlightAll):window.setTimeout(n.highlightAll,16):document.addEventListener("DOMContentLoaded",n.highlightAll))),_self.Prism}();"undefined"!=typeof module&&module.exports&&(module.exports=Prism),"undefined"!=typeof global&&(global.Prism=Prism);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 1041 */
/***/ (function(module, exports) {

Prism.languages.cpp=Prism.languages.extend("c",{keyword:/\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/,"boolean":/\b(?:true|false)\b/,operator:/--?|\+\+?|!=?|<{1,2}=?|>{1,2}=?|->|:{1,2}|={1,2}|\^|~|%|&{1,2}|\|\|?|\?|\*|\/|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/}),Prism.languages.insertBefore("cpp","keyword",{"class-name":{pattern:/(class\s+)\w+/i,lookbehind:!0}}),Prism.languages.insertBefore("cpp","string",{"raw-string":{pattern:/R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,alias:"string",greedy:!0}});

/***/ }),
/* 1042 */
/***/ (function(module, exports) {

!function(e){e.languages.crystal=e.languages.extend("ruby",{keyword:[/\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\b/,{pattern:/(\.\s*)(?:is_a|responds_to)\?/,lookbehind:!0}],number:/\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\da-fA-F_]*[\da-fA-F]|(?:\d(?:[\d_]*\d)?)(?:\.[\d_]*\d)?(?:[eE][+-]?[\d_]*\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\b/}),e.languages.insertBefore("crystal","string",{attribute:{pattern:/@\[.+?\]/,alias:"attr-name",inside:{delimiter:{pattern:/^@\[|\]$/,alias:"tag"},rest:e.languages.crystal}},expansion:[{pattern:/\{\{.+?\}\}/,inside:{delimiter:{pattern:/^\{\{|\}\}$/,alias:"tag"},rest:e.languages.crystal}},{pattern:/\{%.+?%\}/,inside:{delimiter:{pattern:/^\{%|%\}$/,alias:"tag"},rest:e.languages.crystal}}]})}(Prism);

/***/ }),
/* 1043 */
/***/ (function(module, exports) {

Prism.languages.csharp=Prism.languages.extend("clike",{keyword:/\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\b/,string:[{pattern:/@("|')(?:\1\1|\\[\s\S]|(?!\1)[^\\])*\1/,greedy:!0},{pattern:/("|')(?:\\.|(?!\1)[^\\\r\n])*?\1/,greedy:!0}],"class-name":[{pattern:/\b[A-Z]\w*(?:\.\w+)*\b(?=\s+\w+)/,inside:{punctuation:/\./}},{pattern:/(\[)[A-Z]\w*(?:\.\w+)*\b/,lookbehind:!0,inside:{punctuation:/\./}},{pattern:/(\b(?:class|interface)\s+[A-Z]\w*(?:\.\w+)*\s*:\s*)[A-Z]\w*(?:\.\w+)*\b/,lookbehind:!0,inside:{punctuation:/\./}},{pattern:/((?:\b(?:class|interface|new)\s+)|(?:catch\s+\())[A-Z]\w*(?:\.\w+)*\b/,lookbehind:!0,inside:{punctuation:/\./}}],number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)f?/i}),Prism.languages.insertBefore("csharp","class-name",{"generic-method":{pattern:/\w+\s*<[^>\r\n]+?>\s*(?=\()/,inside:{"function":/^\w+/,"class-name":{pattern:/\b[A-Z]\w*(?:\.\w+)*\b/,inside:{punctuation:/\./}},keyword:Prism.languages.csharp.keyword,punctuation:/[<>(),.:]/}},preprocessor:{pattern:/(^\s*)#.*/m,lookbehind:!0,alias:"property",inside:{directive:{pattern:/(\s*#)\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\b/,lookbehind:!0,alias:"keyword"}}}}),Prism.languages.dotnet=Prism.languages.csharp;

/***/ }),
/* 1044 */
/***/ (function(module, exports) {

Prism.languages.csp={directive:{pattern:/\b(?:(?:base-uri|form-action|frame-ancestors|plugin-types|referrer|reflected-xss|report-to|report-uri|require-sri-for|sandbox) |(?:block-all-mixed-content|disown-opener|upgrade-insecure-requests)(?: |;)|(?:child|connect|default|font|frame|img|manifest|media|object|script|style|worker)-src )/i,alias:"keyword"},safe:{pattern:/'(?:self|none|strict-dynamic|(?:nonce-|sha(?:256|384|512)-)[a-zA-Z\d+=\/]+)'/,alias:"selector"},unsafe:{pattern:/(?:'unsafe-inline'|'unsafe-eval'|'unsafe-hashed-attributes'|\*)/,alias:"function"}};

/***/ }),
/* 1045 */
/***/ (function(module, exports) {

Prism.languages.css.selector={pattern:/[^{}\s][^{}]*(?=\s*\{)/,inside:{"pseudo-element":/:(?:after|before|first-letter|first-line|selection)|::[-\w]+/,"pseudo-class":/:[-\w]+(?:\(.*\))?/,"class":/\.[-:.\w]+/,id:/#[-:.\w]+/,attribute:/\[[^\]]+\]/}},Prism.languages.insertBefore("css","function",{hexcode:/#[\da-f]{3,8}/i,entity:/\\[\da-f]{1,8}/i,number:/[\d%.]+/});

/***/ }),
/* 1046 */
/***/ (function(module, exports) {

Prism.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+?.*?(?:;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:/url\((?:(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,selector:/[^{}\s][^{};]*?(?=\s*\{)/,string:{pattern:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/\B!important\b/i,"function":/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:]/},Prism.languages.css.atrule.inside.rest=Prism.languages.css,Prism.languages.markup&&(Prism.languages.insertBefore("markup","tag",{style:{pattern:/(<style[\s\S]*?>)[\s\S]*?(?=<\/style>)/i,lookbehind:!0,inside:Prism.languages.css,alias:"language-css",greedy:!0}}),Prism.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:Prism.languages.markup.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:Prism.languages.css}},alias:"language-css"}},Prism.languages.markup.tag));

/***/ }),
/* 1047 */
/***/ (function(module, exports) {

Prism.languages.d=Prism.languages.extend("clike",{string:[/\b[rx]"(?:\\[\s\S]|[^\\"])*"[cwd]?/,/\bq"(?:\[[\s\S]*?\]|\([\s\S]*?\)|<[\s\S]*?>|\{[\s\S]*?\})"/,/\bq"([_a-zA-Z][_a-zA-Z\d]*)(?:\r?\n|\r)[\s\S]*?(?:\r?\n|\r)\1"/,/\bq"(.)[\s\S]*?\1"/,/'(?:\\'|\\?[^']+)'/,/(["`])(?:\\[\s\S]|(?!\1)[^\\])*\1[cwd]?/],number:[/\b0x\.?[a-f\d_]+(?:(?!\.\.)\.[a-f\d_]*)?(?:p[+-]?[a-f\d_]+)?[ulfi]*/i,{pattern:/((?:\.\.)?)(?:\b0b\.?|\b|\.)\d[\d_]*(?:(?!\.\.)\.[\d_]*)?(?:e[+-]?\d[\d_]*)?[ulfi]*/i,lookbehind:!0}],keyword:/\$|\b(?:abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|public|pure|real|ref|return|scope|shared|short|static|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|__(?:(?:FILE|MODULE|LINE|FUNCTION|PRETTY_FUNCTION|DATE|EOF|TIME|TIMESTAMP|VENDOR|VERSION)__|gshared|traits|vector|parameters)|string|wstring|dstring|size_t|ptrdiff_t)\b/,operator:/\|[|=]?|&[&=]?|\+[+=]?|-[-=]?|\.?\.\.|=[>=]?|!(?:i[ns]\b|<>?=?|>=?|=)?|\bi[ns]\b|(?:<[<>]?|>>?>?|\^\^|[*\/%^~])=?/}),Prism.languages.d.comment=[/^\s*#!.+/,{pattern:/(^|[^\\])\/\+(?:\/\+[\s\S]*?\+\/|[\s\S])*?\+\//,lookbehind:!0}].concat(Prism.languages.d.comment),Prism.languages.insertBefore("d","comment",{"token-string":{pattern:/\bq\{(?:\{[^}]*\}|[^}])*\}/,alias:"string"}}),Prism.languages.insertBefore("d","keyword",{property:/\B@\w*/}),Prism.languages.insertBefore("d","function",{register:{pattern:/\b(?:[ABCD][LHX]|E[ABCD]X|E?(?:BP|SP|DI|SI)|[ECSDGF]S|CR[0234]|DR[012367]|TR[3-7]|X?MM[0-7]|R[ABCD]X|[BS]PL|R[BS]P|[DS]IL|R[DS]I|R(?:[89]|1[0-5])[BWD]?|XMM(?:[89]|1[0-5])|YMM(?:1[0-5]|\d))\b|\bST(?:\([0-7]\)|\b)/,alias:"variable"}});

/***/ }),
/* 1048 */
/***/ (function(module, exports) {

Prism.languages.dart=Prism.languages.extend("clike",{string:[{pattern:/r?("""|''')[\s\S]*?\1/,greedy:!0},{pattern:/r?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0}],keyword:[/\b(?:async|sync|yield)\*/,/\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|default|deferred|do|dynamic|else|enum|export|external|extends|factory|final|finally|for|get|if|implements|import|in|library|new|null|operator|part|rethrow|return|set|static|super|switch|this|throw|try|typedef|var|void|while|with|yield)\b/],operator:/\bis!|\b(?:as|is)\b|\+\+|--|&&|\|\||<<=?|>>=?|~(?:\/=?)?|[+\-*\/%&^|=!<>]=?|\?/}),Prism.languages.insertBefore("dart","function",{metadata:{pattern:/@\w+/,alias:"symbol"}});

/***/ }),
/* 1049 */
/***/ (function(module, exports) {

Prism.languages.diff={coord:[/^(?:\*{3}|-{3}|\+{3}).*$/m,/^@@.*@@$/m,/^\d+.*$/m],deleted:/^[-<].*$/m,inserted:/^[+>].*$/m,diff:{pattern:/^!(?!!).+$/m,alias:"important"}};

/***/ }),
/* 1050 */
/***/ (function(module, exports) {

var _django_template={property:{pattern:/(?:{{|{%)[\s\S]*?(?:%}|}})/g,greedy:!0,inside:{string:{pattern:/("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0},keyword:/\b(?:\||load|verbatim|widthratio|ssi|firstof|for|url|ifchanged|csrf_token|lorem|ifnotequal|autoescape|now|templatetag|debug|cycle|ifequal|regroup|comment|filter|endfilter|if|spaceless|with|extends|block|include|else|empty|endif|endfor|as|endblock|endautoescape|endverbatim|trans|endtrans|[Tt]rue|[Ff]alse|[Nn]one|in|is|static|macro|endmacro|call|endcall|set|endset|raw|endraw)\b/,operator:/[-+=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:or|and|not)\b/,"function":/\b(?:_|abs|add|addslashes|attr|batch|callable|capfirst|capitalize|center|count|cut|d|date|default|default_if_none|defined|dictsort|dictsortreversed|divisibleby|e|equalto|escape|escaped|escapejs|even|filesizeformat|first|float|floatformat|force_escape|forceescape|format|get_digit|groupby|indent|int|iriencode|iterable|join|last|length|length_is|linebreaks|linebreaksbr|linenumbers|list|ljust|lower|make_list|map|mapping|number|odd|phone2numeric|pluralize|pprint|random|reject|rejectattr|removetags|replace|reverse|rjust|round|safe|safeseq|sameas|select|selectattr|sequence|slice|slugify|sort|string|stringformat|striptags|sum|time|timesince|timeuntil|title|trim|truncate|truncatechars|truncatechars_html|truncatewords|truncatewords_html|undefined|unordered_list|upper|urlencode|urlize|urlizetrunc|wordcount|wordwrap|xmlattr|yesno)\b/,important:/\b-?\d+(?:\.\d+)?\b/,variable:/\b\w+?\b/,punctuation:/[[\];(),.:]/}}};Prism.languages.django=Prism.languages.extend("markup",{comment:/(?:<!--|{#)[\s\S]*?(?:#}|-->)/}),Prism.languages.django.tag.pattern=/<\/?(?!\d)[^\s>\/=$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^>=]+))?)*\s*\/?>/i,Prism.languages.insertBefore("django","entity",_django_template),Prism.languages.insertBefore("inside","tag",_django_template,Prism.languages.django.tag),Prism.languages.javascript&&(Prism.languages.insertBefore("inside","string",_django_template,Prism.languages.django.script),Prism.languages.django.script.inside.string.inside=_django_template),Prism.languages.css&&(Prism.languages.insertBefore("inside","atrule",{tag:_django_template.property},Prism.languages.django.style),Prism.languages.django.style.inside.string.inside=_django_template),Prism.languages.jinja2=Prism.languages.django;

/***/ }),
/* 1051 */
/***/ (function(module, exports) {

Prism.languages.docker={keyword:{pattern:/(^\s*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\s)/im,lookbehind:!0},string:/("|')(?:(?!\1)[^\\\r\n]|\\(?:\r\n|[\s\S]))*\1/,comment:/#.*/,punctuation:/---|\.\.\.|[:[\]{}\-,|>?]/},Prism.languages.dockerfile=Prism.languages.docker;

/***/ }),
/* 1052 */
/***/ (function(module, exports) {

Prism.languages.eiffel={comment:/--.*/,string:[{pattern:/"([^[]*)\[[\s\S]*?\]\1"/,greedy:!0},{pattern:/"([^{]*)\{[\s\S]*?\}\1"/,greedy:!0},{pattern:/"(?:%\s+%|%.|[^%"\r\n])*"/,greedy:!0}],"char":/'(?:%.|[^%'\r\n])+'/,keyword:/\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\b/i,"boolean":/\b(?:True|False)\b/i,"class-name":{pattern:/\b[A-Z][\dA-Z_]*\b/,alias:"builtin"},number:[/\b0[xcb][\da-f](?:_*[\da-f])*\b/i,/(?:\d(?:_*\d)*)?\.(?:(?:\d(?:_*\d)*)?e[+-]?)?\d(?:_*\d)*|\d(?:_*\d)*\.?/i],punctuation:/:=|<<|>>|\(\||\|\)|->|\.(?=\w)|[{}[\];(),:?]/,operator:/\\\\|\|\.\.\||\.\.|\/[~\/=]?|[><]=?|[-+*^=~]/};

/***/ }),
/* 1053 */
/***/ (function(module, exports) {

Prism.languages.elixir={comment:{pattern:/#.*/m,lookbehind:!0},regex:{pattern:/~[rR](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|[^\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[uismxfr]*/,greedy:!0},string:[{pattern:/~[cCsSwW](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|#\{[^}]+\}|[^\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[csa]?/,greedy:!0,inside:{}},{pattern:/("""|''')[\s\S]*?\1/,greedy:!0,inside:{}},{pattern:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0,inside:{}}],atom:{pattern:/(^|[^:]):\w+/,lookbehind:!0,alias:"symbol"},"attr-name":/\w+:(?!:)/,capture:{pattern:/(^|[^&])&(?:[^&\s\d()][^\s()]*|(?=\())/,lookbehind:!0,alias:"function"},argument:{pattern:/(^|[^&])&\d+/,lookbehind:!0,alias:"variable"},attribute:{pattern:/@\w+/,alias:"variable"},number:/\b(?:0[box][a-f\d_]+|\d[\d_]*)(?:\.[\d_]+)?(?:e[+-]?[\d_]+)?\b/i,keyword:/\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\b/,"boolean":/\b(?:true|false|nil)\b/,operator:[/\bin\b|&&?|\|[|>]?|\\\\|::|\.\.\.?|\+\+?|-[->]?|<[-=>]|>=|!==?|\B!|=(?:==?|[>~])?|[*\/^]/,{pattern:/([^<])<(?!<)/,lookbehind:!0},{pattern:/([^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,%\[\]{}()]/},Prism.languages.elixir.string.forEach(function(e){e.inside={interpolation:{pattern:/#\{[^}]+\}/,inside:{delimiter:{pattern:/^#\{|\}$/,alias:"punctuation"},rest:Prism.languages.elixir}}}});

/***/ }),
/* 1054 */
/***/ (function(module, exports) {

Prism.languages.elm={comment:/--.*|{-[\s\S]*?-}/,"char":{pattern:/'(?:[^\\'\r\n]|\\(?:[abfnrtv\\']|\d+|x[0-9a-fA-F]+))'/,greedy:!0},string:[{pattern:/"""[\s\S]*?"""/,greedy:!0},{pattern:/"(?:[^\\"\r\n]|\\(?:[abfnrtv\\"]|\d+|x[0-9a-fA-F]+))*"/,greedy:!0}],import_statement:{pattern:/^\s*import\s+[A-Z]\w*(?:\.[A-Z]\w*)*(?:\s+as\s+([A-Z]\w*)(?:\.[A-Z]\w*)*)?(?:\s+exposing\s+)?/m,inside:{keyword:/\b(?:import|as|exposing)\b/}},keyword:/\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\b/,builtin:/\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\b/,number:/\b(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?|0x[0-9a-f]+)\b/i,operator:/\s\.\s|[+\-\/*=.$<>:&|^?%#@~!]{2,}|[+\-\/*=$<>:&|^?%#@~!]/,hvariable:/\b(?:[A-Z]\w*\.)*[a-z]\w*\b/,constant:/\b(?:[A-Z]\w*\.)*[A-Z]\w*\b/,punctuation:/[{}[\]|(),.:]/};

/***/ }),
/* 1055 */
/***/ (function(module, exports) {

!function(e){e.languages.erb=e.languages.extend("ruby",{}),e.languages.insertBefore("erb","comment",{delimiter:{pattern:/^<%=?|%>$/,alias:"punctuation"}}),e.hooks.add("before-tokenize",function(a){var n=/<%=?[\s\S]+?%>/g;e.languages["markup-templating"].buildPlaceholders(a,"erb",n)}),e.hooks.add("after-tokenize",function(a){e.languages["markup-templating"].tokenizePlaceholders(a,"erb")})}(Prism);

/***/ }),
/* 1056 */
/***/ (function(module, exports) {

Prism.languages.erlang={comment:/%.+/,string:{pattern:/"(?:\\.|[^\\"\r\n])*"/,greedy:!0},"quoted-function":{pattern:/'(?:\\.|[^\\'\r\n])+'(?=\()/,alias:"function"},"quoted-atom":{pattern:/'(?:\\.|[^\\'\r\n])+'/,alias:"atom"},"boolean":/\b(?:true|false)\b/,keyword:/\b(?:fun|when|case|of|end|if|receive|after|try|catch)\b/,number:[/\$\\?./,/\d+#[a-z0-9]+/i,/(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i],"function":/\b[a-z][\w@]*(?=\()/,variable:{pattern:/(^|[^@])(?:\b|\?)[A-Z_][\w@]*/,lookbehind:!0},operator:[/[=\/<>:]=|=[:\/]=|\+\+?|--?|[=*\/!]|\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\b/,{pattern:/(^|[^<])<(?!<)/,lookbehind:!0},{pattern:/(^|[^>])>(?!>)/,lookbehind:!0}],atom:/\b[a-z][\w@]*/,punctuation:/[()[\]{}:;,.#|]|<<|>>/};

/***/ }),
/* 1057 */
/***/ (function(module, exports) {

!function(a){a.languages.flow=a.languages.extend("javascript",{}),a.languages.insertBefore("flow","keyword",{type:[{pattern:/\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\b/,alias:"tag"}]}),a.languages.flow["function-variable"].pattern=/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=\s*(?:function\b|(?:\([^()]*\)(?:\s*:\s*\w+)?|[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/i,a.languages.insertBefore("flow","operator",{"flow-punctuation":{pattern:/\{\||\|\}/,alias:"punctuation"}}),"Array"!==a.util.type(a.languages.flow.keyword)&&(a.languages.flow.keyword=[a.languages.flow.keyword]),a.languages.flow.keyword.unshift({pattern:/(^|[^$]\b)(?:type|opaque|declare|Class)\b(?!\$)/,lookbehind:!0},{pattern:/(^|[^$]\B)\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\b(?!\$)/,lookbehind:!0})}(Prism);

/***/ }),
/* 1058 */
/***/ (function(module, exports) {

Prism.languages.fortran={"quoted-number":{pattern:/[BOZ](['"])[A-F0-9]+\1/i,alias:"number"},string:{pattern:/(?:\w+_)?(['"])(?:\1\1|&(?:\r\n?|\n)(?:\s*!.+(?:\r\n?|\n))?|(?!\1).)*(?:\1|&)/,inside:{comment:{pattern:/(&(?:\r\n?|\n)\s*)!.*/,lookbehind:!0}}},comment:{pattern:/!.*/,greedy:!0},"boolean":/\.(?:TRUE|FALSE)\.(?:_\w+)?/i,number:/(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[ED][+-]?\d+)?(?:_\w+)?/i,keyword:[/\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\b/i,/\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\b/i,/\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\b/i,/\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\b/i],operator:[/\*\*|\/\/|=>|[=\/]=|[<>]=?|::|[+\-*=%]|\.(?:EQ|NE|LT|LE|GT|GE|NOT|AND|OR|EQV|NEQV)\.|\.[A-Z]+\./i,{pattern:/(^|(?!\().)\/(?!\))/,lookbehind:!0}],punctuation:/\(\/|\/\)|[(),;:&]/};

/***/ }),
/* 1059 */
/***/ (function(module, exports) {

Prism.languages.fsharp=Prism.languages.extend("clike",{comment:[{pattern:/(^|[^\\])\(\*[\s\S]*?\*\)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0}],keyword:/\b(?:let|return|use|yield)(?:!\B|\b)|\b(abstract|and|as|assert|base|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|global|if|in|inherit|inline|interface|internal|lazy|match|member|module|mutable|namespace|new|not|null|of|open|or|override|private|public|rec|select|static|struct|then|to|true|try|type|upcast|val|void|when|while|with|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|include|method|mixin|object|parallel|process|protected|pure|sealed|tailcall|trait|virtual|volatile)\b/,string:{pattern:/(?:"""[\s\S]*?"""|@"(?:""|[^"])*"|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1)B?/,greedy:!0},number:[/\b0x[\da-fA-F]+(?:un|lf|LF)?\b/,/\b0b[01]+(?:y|uy)?\b/,/(?:\b\d+\.?\d*|\B\.\d+)(?:[fm]|e[+-]?\d+)?\b/i,/\b\d+(?:[IlLsy]|u[lsy]?|UL)?\b/]}),Prism.languages.insertBefore("fsharp","keyword",{preprocessor:{pattern:/^[^\r\n\S]*#.*/m,alias:"property",inside:{directive:{pattern:/(\s*#)\b(?:else|endif|if|light|line|nowarn)\b/,lookbehind:!0,alias:"keyword"}}}});

/***/ }),
/* 1060 */
/***/ (function(module, exports) {

Prism.languages.gedcom={"line-value":{pattern:/(^\s*\d+ +(?:@\w[\w!"$%&'()*+,\-.\/:;<=>?[\\\]^`{|}~\x80-\xfe #]*@ +)?\w+ +).+/m,lookbehind:!0,inside:{pointer:{pattern:/^@\w[\w!"$%&'()*+,\-.\/:;<=>?[\\\]^`{|}~\x80-\xfe #]*@$/,alias:"variable"}}},tag:{pattern:/(^\s*\d+ +(?:@\w[\w!"$%&'()*+,\-.\/:;<=>?[\\\]^`{|}~\x80-\xfe #]*@ +)?)\w+/m,lookbehind:!0,alias:"string"},level:{pattern:/(^\s*)\d+/m,lookbehind:!0,alias:"number"},pointer:{pattern:/@\w[\w!"$%&'()*+,\-.\/:;<=>?[\\\]^`{|}~\x80-\xfe #]*@/,alias:"variable"}};

/***/ }),
/* 1061 */
/***/ (function(module, exports) {

Prism.languages.gherkin={pystring:{pattern:/("""|''')[\s\S]+?\1/,alias:"string"},comment:{pattern:/((?:^|\r?\n|\r)[ \t]*)#.*/,lookbehind:!0},tag:{pattern:/((?:^|\r?\n|\r)[ \t]*)@\S*/,lookbehind:!0},feature:{pattern:/((?:^|\r?\n|\r)[ \t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|laH|Lastnost|Mak|Mogucnost|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|perbogh|poQbogh malja'|Potrzeba biznesowa|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:]+(?:\r?\n|\r|$))*/,lookbehind:!0,inside:{important:{pattern:/(:)[^\r\n]+/,lookbehind:!0},keyword:/[^:\r\n]+:/}},scenario:{pattern:/((?:^|\r?\n|\r)[ \t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram senaryo|Dyagram Senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|Examples|EXAMPLZ|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|ghantoH|Grundlage|Hannergrond|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut|lut chovnatlh|lutmey|Lýsing Atburðarásar|Lýsing Dæma|Menggariskan Senario|MISHUN|MISHUN SRSLY|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan senaryo|Plan Senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo|Senaryo deskripsyon|Senaryo Deskripsyon|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie|Situasie Uiteensetting|Skenario|Skenario konsep|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa|Swa hwaer swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo\-ho\-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\r\n]*/,lookbehind:!0,inside:{important:{pattern:/(:)[^\r\n]*/,lookbehind:!0},keyword:/[^:\r\n]+:/}},"table-body":{pattern:/((?:\r?\n|\r)[ \t]*\|.+\|[^\r\n]*)+/,lookbehind:!0,inside:{outline:{pattern:/<[^>]+?>/,alias:"variable"},td:{pattern:/\s*[^\s|][^|]*/,alias:"string"},punctuation:/\|/}},"table-head":{pattern:/(?:\r?\n|\r)[ \t]*\|.+\|[^\r\n]*/,inside:{th:{pattern:/\s*[^\s|][^|]*/,alias:"variable"},punctuation:/\|/}},atrule:{pattern:/((?:\r?\n|\r)[ \t]+)(?:'ach|'a|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cando|Cand|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|Dato|DEN|Den youse gotta|Dengan|De|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|Entonces|En|Epi|E|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kadar|Kada|Kad|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Majd|Maka|Manawa|Mas|Ma|Menawa|Men|Mutta|Nalikaning|Nalika|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Og|Och|Oletetaan|Onda|Ond|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|qaSDI'|Quando|Quand|Quan|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|ugeholl|Und|Un|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadani|Zadano|Zadan|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \t]+)/,lookbehind:!0},string:{pattern:/"(?:\\.|[^"\\\r\n])*"|'(?:\\.|[^'\\\r\n])*'/,inside:{outline:{pattern:/<[^>]+?>/,alias:"variable"}}},outline:{pattern:/<[^>]+?>/,alias:"variable"}};

/***/ }),
/* 1062 */
/***/ (function(module, exports) {

Prism.languages.git={comment:/^#.*/m,deleted:/^[-–].*/m,inserted:/^\+.*/m,string:/("|')(?:\\.|(?!\1)[^\\\r\n])*\1/m,command:{pattern:/^.*\$ git .*$/m,inside:{parameter:/\s--?\w+/m}},coord:/^@@.*@@$/m,commit_sha1:/^commit \w{40}$/m};

/***/ }),
/* 1063 */
/***/ (function(module, exports) {

Prism.languages.glsl=Prism.languages.extend("clike",{comment:[/\/\*[\s\S]*?\*\//,/\/\/(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/],number:/(?:\b0x[\da-f]+|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?)[ulf]*/i,keyword:/\b(?:attribute|const|uniform|varying|buffer|shared|coherent|volatile|restrict|readonly|writeonly|atomic_uint|layout|centroid|flat|smooth|noperspective|patch|sample|break|continue|do|for|while|switch|case|default|if|else|subroutine|in|out|inout|float|double|int|void|bool|true|false|invariant|precise|discard|return|d?mat[234](?:x[234])?|[ibdu]?vec[234]|uint|lowp|mediump|highp|precision|[iu]?sampler[123]D|[iu]?samplerCube|sampler[12]DShadow|samplerCubeShadow|[iu]?sampler[12]DArray|sampler[12]DArrayShadow|[iu]?sampler2DRect|sampler2DRectShadow|[iu]?samplerBuffer|[iu]?sampler2DMS(?:Array)?|[iu]?samplerCubeArray|samplerCubeArrayShadow|[iu]?image[123]D|[iu]?image2DRect|[iu]?imageCube|[iu]?imageBuffer|[iu]?image[12]DArray|[iu]?imageCubeArray|[iu]?image2DMS(?:Array)?|struct|common|partition|active|asm|class|union|enum|typedef|template|this|resource|goto|inline|noinline|public|static|extern|external|interface|long|short|half|fixed|unsigned|superp|input|output|hvec[234]|fvec[234]|sampler3DRect|filter|sizeof|cast|namespace|using)\b/}),Prism.languages.insertBefore("glsl","comment",{preprocessor:{pattern:/(^[ \t]*)#(?:(?:define|undef|if|ifdef|ifndef|else|elif|endif|error|pragma|extension|version|line)\b)?/m,lookbehind:!0,alias:"builtin"}});

/***/ }),
/* 1064 */
/***/ (function(module, exports) {

Prism.languages.go=Prism.languages.extend("clike",{keyword:/\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,builtin:/\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\b/,"boolean":/\b(?:_|iota|nil|true|false)\b/,operator:/[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,number:/(?:\b0x[a-f\d]+|(?:\b\d+\.?\d*|\B\.\d+)(?:e[-+]?\d+)?)i?/i,string:{pattern:/(["'`])(\\[\s\S]|(?!\1)[^\\])*\1/,greedy:!0}}),delete Prism.languages.go["class-name"];

/***/ }),
/* 1065 */
/***/ (function(module, exports) {

Prism.languages.graphql={comment:/#.*/,string:{pattern:/"(?:\\.|[^\\"\r\n])*"/,greedy:!0},number:/(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,"boolean":/\b(?:true|false)\b/,variable:/\$[a-z_]\w*/i,directive:{pattern:/@[a-z_]\w*/i,alias:"function"},"attr-name":/[a-z_]\w*(?=\s*:)/i,keyword:[{pattern:/(fragment\s+(?!on)[a-z_]\w*\s+|\.{3}\s*)on\b/,lookbehind:!0},/\b(?:query|fragment|mutation)\b/],operator:/!|=|\.{3}/,punctuation:/[!(){}\[\]:=,]/};

/***/ }),
/* 1066 */
/***/ (function(module, exports) {

Prism.languages.groovy=Prism.languages.extend("clike",{keyword:/\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\b/,string:[{pattern:/("""|''')[\s\S]*?\1|(?:\$\/)(?:\$\/\$|[\s\S])*?\/\$/,greedy:!0},{pattern:/(["'\/])(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0}],number:/\b(?:0b[01_]+|0x[\da-f_]+(?:\.[\da-f_p\-]+)?|[\d_]+(?:\.[\d_]+)?(?:e[+-]?[\d]+)?)[glidf]?\b/i,operator:{pattern:/(^|[^.])(?:~|==?~?|\?[.:]?|\*(?:[.=]|\*=?)?|\.[@&]|\.\.<|\.{1,2}(?!\.)|-[-=>]?|\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\|[|=]?|\/=?|\^=?|%=?)/,lookbehind:!0},punctuation:/\.+|[{}[\];(),:$]/}),Prism.languages.insertBefore("groovy","string",{shebang:{pattern:/#!.+/,alias:"comment"}}),Prism.languages.insertBefore("groovy","punctuation",{"spock-block":/\b(?:setup|given|when|then|and|cleanup|expect|where):/}),Prism.languages.insertBefore("groovy","function",{annotation:{alias:"punctuation",pattern:/(^|[^.])@\w+/,lookbehind:!0}}),Prism.hooks.add("wrap",function(e){if("groovy"===e.language&&"string"===e.type){var t=e.content[0];if("'"!=t){var n=/([^\\])(?:\$(?:\{.*?\}|[\w.]+))/;"$"===t&&(n=/([^\$])(?:\$(?:\{.*?\}|[\w.]+))/),e.content=e.content.replace(/&lt;/g,"<").replace(/&amp;/g,"&"),e.content=Prism.highlight(e.content,{expression:{pattern:n,lookbehind:!0,inside:Prism.languages.groovy}}),e.classes.push("/"===t?"regex":"gstring")}}});

/***/ }),
/* 1067 */
/***/ (function(module, exports) {

!function(e){e.languages.haml={"multiline-comment":{pattern:/((?:^|\r?\n|\r)([\t ]*))(?:\/|-#).*(?:(?:\r?\n|\r)\2[\t ]+.+)*/,lookbehind:!0,alias:"comment"},"multiline-code":[{pattern:/((?:^|\r?\n|\r)([\t ]*)(?:[~-]|[&!]?=)).*,[\t ]*(?:(?:\r?\n|\r)\2[\t ]+.*,[\t ]*)*(?:(?:\r?\n|\r)\2[\t ]+.+)/,lookbehind:!0,inside:{rest:e.languages.ruby}},{pattern:/((?:^|\r?\n|\r)([\t ]*)(?:[~-]|[&!]?=)).*\|[\t ]*(?:(?:\r?\n|\r)\2[\t ]+.*\|[\t ]*)*/,lookbehind:!0,inside:{rest:e.languages.ruby}}],filter:{pattern:/((?:^|\r?\n|\r)([\t ]*)):[\w-]+(?:(?:\r?\n|\r)(?:\2[\t ]+.+|\s*?(?=\r?\n|\r)))+/,lookbehind:!0,inside:{"filter-name":{pattern:/^:[\w-]+/,alias:"variable"}}},markup:{pattern:/((?:^|\r?\n|\r)[\t ]*)<.+/,lookbehind:!0,inside:{rest:e.languages.markup}},doctype:{pattern:/((?:^|\r?\n|\r)[\t ]*)!!!(?: .+)?/,lookbehind:!0},tag:{pattern:/((?:^|\r?\n|\r)[\t ]*)[%.#][\w\-#.]*[\w\-](?:\([^)]+\)|\{(?:\{[^}]+\}|[^}])+\}|\[[^\]]+\])*[\/<>]*/,lookbehind:!0,inside:{attributes:[{pattern:/(^|[^#])\{(?:\{[^}]+\}|[^}])+\}/,lookbehind:!0,inside:{rest:e.languages.ruby}},{pattern:/\([^)]+\)/,inside:{"attr-value":{pattern:/(=\s*)(?:"(?:\\.|[^\\"\r\n])*"|[^)\s]+)/,lookbehind:!0},"attr-name":/[\w:-]+(?=\s*!?=|\s*[,)])/,punctuation:/[=(),]/}},{pattern:/\[[^\]]+\]/,inside:{rest:e.languages.ruby}}],punctuation:/[<>]/}},code:{pattern:/((?:^|\r?\n|\r)[\t ]*(?:[~-]|[&!]?=)).+/,lookbehind:!0,inside:{rest:e.languages.ruby}},interpolation:{pattern:/#\{[^}]+\}/,inside:{delimiter:{pattern:/^#\{|\}$/,alias:"punctuation"},rest:e.languages.ruby}},punctuation:{pattern:/((?:^|\r?\n|\r)[\t ]*)[~=\-&!]+/,lookbehind:!0}};for(var t="((?:^|\\r?\\n|\\r)([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+",r=["css",{filter:"coffee",language:"coffeescript"},"erb","javascript","less","markdown","ruby","scss","textile"],n={},a=0,i=r.length;i>a;a++){var l=r[a];l="string"==typeof l?{filter:l,language:l}:l,e.languages[l.language]&&(n["filter-"+l.filter]={pattern:RegExp(t.replace("{{filter_name}}",l.filter)),lookbehind:!0,inside:{"filter-name":{pattern:/^:[\w-]+/,alias:"variable"},rest:e.languages[l.language]}})}e.languages.insertBefore("haml","filter",n)}(Prism);

/***/ }),
/* 1068 */
/***/ (function(module, exports) {

!function(a){a.languages.handlebars={comment:/\{\{![\s\S]*?\}\}/,delimiter:{pattern:/^\{\{\{?|\}\}\}?$/i,alias:"punctuation"},string:/(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,"boolean":/\b(?:true|false)\b/,block:{pattern:/^(\s*~?\s*)[#\/]\S+?(?=\s*~?\s*$|\s)/i,lookbehind:!0,alias:"keyword"},brackets:{pattern:/\[[^\]]+\]/,inside:{punctuation:/\[|\]/,variable:/[\s\S]+/}},punctuation:/[!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]/,variable:/[^!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~\s]+/},a.hooks.add("before-tokenize",function(e){var n=/\{\{\{[\s\S]+?\}\}\}|\{\{[\s\S]+?\}\}/g;a.languages["markup-templating"].buildPlaceholders(e,"handlebars",n)}),a.hooks.add("after-tokenize",function(e){a.languages["markup-templating"].tokenizePlaceholders(e,"handlebars")})}(Prism);

/***/ }),
/* 1069 */
/***/ (function(module, exports) {

Prism.languages.haskell={comment:{pattern:/(^|[^-!#$%*+=?&@|~.:<>^\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\/].*|{-[\s\S]*?-})/m,lookbehind:!0},"char":/'(?:[^\\']|\\(?:[abfnrtv\\"'&]|\^[A-Z@[\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\d+|o[0-7]+|x[0-9a-fA-F]+))'/,string:{pattern:/"(?:[^\\"]|\\(?:[abfnrtv\\"'&]|\^[A-Z@[\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\s+\\)*"/,greedy:!0},keyword:/\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\b/,import_statement:{pattern:/((?:\r?\n|\r|^)\s*)import\s+(?:qualified\s+)?(?:[A-Z][\w']*)(?:\.[A-Z][\w']*)*(?:\s+as\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\.[A-Z][\w']*)*)?(?:\s+hiding\b)?/m,lookbehind:!0,inside:{keyword:/\b(?:import|qualified|as|hiding)\b/}},builtin:/\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b/,number:/\b(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?|0o[0-7]+|0x[0-9a-f]+)\b/i,operator:/\s\.\s|[-!#$%*+=?&@|~.:<>^\\\/]*\.[-!#$%*+=?&@|~.:<>^\\\/]+|[-!#$%*+=?&@|~.:<>^\\\/]+\.[-!#$%*+=?&@|~.:<>^\\\/]*|[-!#$%*+=?&@|~:<>^\\\/]+|`([A-Z][\w']*\.)*[_a-z][\w']*`/,hvariable:/\b(?:[A-Z][\w']*\.)*[_a-z][\w']*\b/,constant:/\b(?:[A-Z][\w']*\.)*[A-Z][\w']*\b/,punctuation:/[{}[\];(),.:]/};

/***/ }),
/* 1070 */
/***/ (function(module, exports) {

Prism.languages.haxe=Prism.languages.extend("clike",{string:{pattern:/(["'])(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0,inside:{interpolation:{pattern:/(^|[^\\])\$(?:\w+|\{[^}]+\})/,lookbehind:!0,inside:{interpolation:{pattern:/^\$\w*/,alias:"variable"}}}}},keyword:/\bthis\b|\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\.)\b/,operator:/\.{3}|\+\+?|-[->]?|[=!]=?|&&?|\|\|?|<[<=]?|>[>=]?|[*\/%~^]/}),Prism.languages.insertBefore("haxe","class-name",{regex:{pattern:/~\/(?:[^\/\\\r\n]|\\.)+\/[igmsu]*/,greedy:!0}}),Prism.languages.insertBefore("haxe","keyword",{preprocessor:{pattern:/#\w+/,alias:"builtin"},metadata:{pattern:/@:?\w+/,alias:"symbol"},reification:{pattern:/\$(?:\w+|(?=\{))/,alias:"variable"}}),Prism.languages.haxe.string.inside.interpolation.inside.rest=Prism.languages.haxe,delete Prism.languages.haxe["class-name"];

/***/ }),
/* 1071 */
/***/ (function(module, exports) {

Prism.languages.hpkp={directive:{pattern:/\b(?:(?:includeSubDomains|preload|strict)(?: |;)|pin-sha256="[a-zA-Z\d+=\/]+"|(?:max-age|report-uri)=|report-to )/,alias:"keyword"},safe:{pattern:/\d{7,}/,alias:"selector"},unsafe:{pattern:/\d{0,6}/,alias:"function"}};

/***/ }),
/* 1072 */
/***/ (function(module, exports) {

Prism.languages.hsts={directive:{pattern:/\b(?:max-age=|includeSubDomains|preload)/,alias:"keyword"},safe:{pattern:/\d{8,}/,alias:"selector"},unsafe:{pattern:/\d{0,7}/,alias:"function"}};

/***/ }),
/* 1073 */
/***/ (function(module, exports) {

Prism.languages.http={"request-line":{pattern:/^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\s(?:https?:\/\/|\/)\S+\sHTTP\/[0-9.]+/m,inside:{property:/^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\b/,"attr-name":/:\w+/}},"response-status":{pattern:/^HTTP\/1.[01] \d+.*/m,inside:{property:{pattern:/(^HTTP\/1.[01] )\d+.*/i,lookbehind:!0}}},"header-name":{pattern:/^[\w-]+:(?=.)/m,alias:"keyword"}};var httpLanguages={"application/json":Prism.languages.javascript,"application/xml":Prism.languages.markup,"text/xml":Prism.languages.markup,"text/html":Prism.languages.markup};for(var contentType in httpLanguages)if(httpLanguages[contentType]){var options={};options[contentType]={pattern:new RegExp("(content-type:\\s*"+contentType+"[\\w\\W]*?)(?:\\r?\\n|\\r){2}[\\w\\W]*","i"),lookbehind:!0,inside:{rest:httpLanguages[contentType]}},Prism.languages.insertBefore("http","header-name",options)}

/***/ }),
/* 1074 */
/***/ (function(module, exports) {

Prism.languages.ichigojam={comment:/(?:\B'|REM)(?:[^\n\r]*)/i,string:{pattern:/"(?:""|[!#$%&'()*,\/:;<=>?^_ +\-.A-Z\d])*"/i,greedy:!0},number:/\B#[0-9A-F]+|\B`[01]+|(?:\b\d+\.?\d*|\B\.\d+)(?:E[+-]?\d+)?/i,keyword:/\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GSB|GOTO|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|RIGHT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\$|\b)/i,"function":/\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\$|\b)/i,label:/(?:\B@[^\s]+)/i,operator:/<[=>]?|>=?|\|\||&&|[+\-*\/=|&^~!]|\b(?:AND|NOT|OR)\b/i,punctuation:/[\[,;:()\]]/};

/***/ }),
/* 1075 */
/***/ (function(module, exports) {

Prism.languages.icon={comment:/#.*/,string:{pattern:/(["'])(?:(?!\1)[^\\\r\n_]|\\.|_(?!\1)(?:\r\n|[\s\S]))*\1/,greedy:!0},number:/\b(?:\d+r[a-z\d]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b|\.\d+\b/i,"builtin-keyword":{pattern:/&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\b/,alias:"variable"},directive:{pattern:/\$\w+/,alias:"builtin"},keyword:/\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\b/,"function":/(?!\d)\w+(?=\s*[({]|\s*!\s*\[)/,operator:/[+-]:(?!=)|(?:[\/?@^%&]|\+\+?|--?|==?=?|~==?=?|\*\*?|\|\|\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\|~]/,punctuation:/[\[\](){},;]/};

/***/ }),
/* 1076 */
/***/ (function(module, exports) {

Prism.languages.inform7={string:{pattern:/"[^"]*"/,inside:{substitution:{pattern:/\[[^\]]+\]/,inside:{delimiter:{pattern:/\[|\]/,alias:"punctuation"}}}}},comment:{pattern:/\[[^\]]+\]/,greedy:!0},title:{pattern:/^[ \t]*(?:volume|book|part(?! of)|chapter|section|table)\b.+/im,alias:"important"},number:{pattern:/(^|[^-])(?:\b\d+(?:\.\d+)?(?:\^\d+)?\w*|\b(?:one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve))\b(?!-)/i,lookbehind:!0},verb:{pattern:/(^|[^-])\b(?:applying to|are|attacking|answering|asking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:s|ing)?|consulting|contain(?:s|ing)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:ve|s|ving)|hold(?:s|ing)?|impl(?:y|ies)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:s|ing)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:s|ing)?|setting|showing|singing|sleeping|smelling|squeezing|switching|support(?:s|ing)?|swearing|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:s|ing)?|var(?:y|ies|ying)|waiting|waking|waving|wear(?:s|ing)?)\b(?!-)/i,lookbehind:!0,alias:"operator"},keyword:{pattern:/(^|[^-])\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|unless|the story)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\b(?!-)/i,lookbehind:!0},property:{pattern:/(^|[^-])\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: on| off)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\b(?!-)/i,lookbehind:!0,alias:"symbol"},position:{pattern:/(^|[^-])\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\b(?!-)/i,lookbehind:!0,alias:"keyword"},type:{pattern:/(^|[^-])\b(?:actions?|activit(?:y|ies)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\b(?!-)/i,lookbehind:!0,alias:"variable"},punctuation:/[.,:;(){}]/},Prism.languages.inform7.string.inside.substitution.inside.rest=Prism.languages.inform7,Prism.languages.inform7.string.inside.substitution.inside.rest.text={pattern:/\S(?:\s*\S)*/,alias:"comment"};

/***/ }),
/* 1077 */
/***/ (function(module, exports) {

Prism.languages.ini={comment:/^[ \t]*;.*$/m,selector:/^[ \t]*\[.*?\]/m,constant:/^[ \t]*[^\s=]+?(?=[ \t]*=)/m,"attr-value":{pattern:/=.*/,inside:{punctuation:/^[=]/}}};

/***/ }),
/* 1078 */
/***/ (function(module, exports) {

Prism.languages.io={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\])\/\/.*/,lookbehind:!0},{pattern:/(^|[^\\])#.*/,lookbehind:!0}],"triple-quoted-string":{pattern:/"""(?:\\[\s\S]|(?!""")[^\\])*"""/,greedy:!0,alias:"string"},string:{pattern:/"(?:\\.|[^\\\r\n"])*"/,greedy:!0},keyword:/\b(?:activate|activeCoroCount|asString|block|break|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getSlot|getEnvironmentVariable|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|call|try|type|uniqueId|updateSlot|wait|while|write|yield)\b/,builtin:/\b(?:Array|AudioDevice|AudioMixer|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Regex|SGML|SGMLElement|SGMLParser|SQLite|Server|Sequence|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink|Random|BigNum|Sequence)\b/,"boolean":/\b(?:true|false|nil)\b/,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e-?\d+)?/i,operator:/[=!*\/%+-^&|]=|>>?=?|<<?=?|:?:?=|\+\+?|--?|\*\*?|\/\/?|%|\|\|?|&&?|(\b(?:return|and|or|not)\b)|@@?|\?\??|\.\./,punctuation:/[{}[\];(),.:]/};

/***/ }),
/* 1079 */
/***/ (function(module, exports) {

Prism.languages.j={comment:/\bNB\..*/,string:{pattern:/'(?:''|[^'\r\n])*'/,greedy:!0},keyword:/\b(?:(?:adverb|conjunction|CR|def|define|dyad|LF|monad|noun|verb)\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\w+|goto_\w+|if|label_\w+|return|select|throw|try|while|whilst)\.)/,verb:{pattern:/(?!\^:|;\.|[=!][.:])(?:\{(?:\.|::?)?|p(?:\.\.?|:)|[=!\]]|[<>+*\-%$|,#][.:]?|[?^]\.?|[;\[]:?|[~}"i][.:]|[ACeEIjLor]\.|(?:[_\/\\qsux]|_?\d):)/,alias:"keyword"},number:/\b_?(?:(?!\d:)\d+(?:\.\d+)?(?:(?:[ejpx]|ad|ar)_?\d+(?:\.\d+)?)*(?:b_?[\da-z]+(?:\.[\da-z]+)?)?|_(?!\.))/,adverb:{pattern:/[~}]|[\/\\]\.?|[bfM]\.|t[.:]/,alias:"builtin"},operator:/[=a][.:]|_\./,conjunction:{pattern:/&(?:\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\.|`:?|[\^LS]:|"/,alias:"variable"},punctuation:/[()]/};

/***/ }),
/* 1080 */
/***/ (function(module, exports) {

Prism.languages.java=Prism.languages.extend("clike",{keyword:/\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while)\b/,number:/\b0b[01]+\b|\b0x[\da-f]*\.?[\da-fp-]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?[df]?/i,operator:{pattern:/(^|[^.])(?:\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\|[|=]?|\*=?|\/=?|%=?|\^=?|[?:~])/m,lookbehind:!0}}),Prism.languages.insertBefore("java","function",{annotation:{alias:"punctuation",pattern:/(^|[^.])@\w+/,lookbehind:!0}}),Prism.languages.insertBefore("java","class-name",{generics:{pattern:/<\s*\w+(?:\.\w+)?(?:\s*,\s*\w+(?:\.\w+)?)*>/i,alias:"function",inside:{keyword:Prism.languages.java.keyword,punctuation:/[<>(),.:]/}}});

/***/ }),
/* 1081 */
/***/ (function(module, exports) {

Prism.languages.javascript=Prism.languages.extend("clike",{keyword:/\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,number:/\b(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,"function":/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*\()/i,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),Prism.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[[^\]\r\n]+]|\\.|[^\/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=\s*(?:function\b|(?:\([^()]*\)|[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/i,alias:"function"},constant:/\b[A-Z][A-Z\d_]*\b/}),Prism.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\${[^}]+}/,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}}}),Prism.languages.javascript["template-string"].inside.interpolation.inside.rest=Prism.languages.javascript,Prism.languages.markup&&Prism.languages.insertBefore("markup","tag",{script:{pattern:/(<script[\s\S]*?>)[\s\S]*?(?=<\/script>)/i,lookbehind:!0,inside:Prism.languages.javascript,alias:"language-javascript",greedy:!0}}),Prism.languages.js=Prism.languages.javascript;

/***/ }),
/* 1082 */
/***/ (function(module, exports) {

Prism.languages.jolie=Prism.languages.extend("clike",{keyword:/\b(?:include|define|is_defined|undef|main|init|outputPort|inputPort|Location|Protocol|Interfaces|RequestResponse|OneWay|type|interface|extender|throws|cset|csets|forward|Aggregates|Redirects|embedded|courier|execution|sequential|concurrent|single|scope|install|throw|comp|cH|default|global|linkIn|linkOut|synchronized|this|new|for|if|else|while|in|Jolie|Java|Javascript|nullProcess|spawn|constants|with|provide|until|exit|foreach|instanceof|over|service)\b/,builtin:/\b(?:undefined|string|int|void|long|Byte|bool|double|float|char|any)\b/,number:/(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?l?/i,operator:/-[-=>]?|\+[+=]?|<[<=]?|[>=*!]=?|&&|\|\||[:?\/%^]/,symbol:/[|;@]/,punctuation:/[,.]/,string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0}}),delete Prism.languages.jolie["class-name"],delete Prism.languages.jolie["function"],Prism.languages.insertBefore("jolie","keyword",{"function":{pattern:/((?:\b(?:outputPort|inputPort|in|service|courier)\b|@)\s*)\w+/,lookbehind:!0},aggregates:{pattern:/(\bAggregates\s*:\s*)(?:\w+(?:\s+with\s+\w+)?\s*,\s*)*\w+(?:\s+with\s+\w+)?/,lookbehind:!0,inside:{withExtension:{pattern:/\bwith\s+\w+/,inside:{keyword:/\bwith\b/}},"function":{pattern:/\w+/},punctuation:{pattern:/,/}}},redirects:{pattern:/(\bRedirects\s*:\s*)(?:\w+\s*=>\s*\w+\s*,\s*)*(?:\w+\s*=>\s*\w+)/,lookbehind:!0,inside:{punctuation:{pattern:/,/},"function":{pattern:/\w+/},symbol:{pattern:/=>/}}}});

/***/ }),
/* 1083 */
/***/ (function(module, exports) {

Prism.languages.json={property:/"(?:\\.|[^\\"\r\n])*"(?=\s*:)/i,string:{pattern:/"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,greedy:!0},number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,punctuation:/[{}[\]);,]/,operator:/:/g,"boolean":/\b(?:true|false)\b/i,"null":/\bnull\b/i},Prism.languages.jsonp=Prism.languages.json;

/***/ }),
/* 1084 */
/***/ (function(module, exports) {

!function(t){var n=t.util.clone(t.languages.javascript);t.languages.jsx=t.languages.extend("markup",n),t.languages.jsx.tag.pattern=/<\/?(?:[\w.:-]+\s*(?:\s+(?:[\w.:-]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s{'">=]+|\{(?:\{(?:\{[^}]*\}|[^{}])*\}|[^{}])+\}))?|\{\.{3}[a-z_$][\w$]*(?:\.[a-z_$][\w$]*)*\}))*\s*\/?)?>/i,t.languages.jsx.tag.inside.tag.pattern=/^<\/?[^\s>\/]*/i,t.languages.jsx.tag.inside["attr-value"].pattern=/=(?!\{)(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">]+)/i,t.languages.insertBefore("inside","attr-name",{spread:{pattern:/\{\.{3}[a-z_$][\w$]*(?:\.[a-z_$][\w$]*)*\}/,inside:{punctuation:/\.{3}|[{}.]/,"attr-value":/\w+/}}},t.languages.jsx.tag),t.languages.insertBefore("inside","attr-value",{script:{pattern:/=(\{(?:\{(?:\{[^}]*\}|[^}])*\}|[^}])+\})/i,inside:{"script-punctuation":{pattern:/^=(?={)/,alias:"punctuation"},rest:t.languages.jsx},alias:"language-javascript"}},t.languages.jsx.tag);var e=function(t){return t?"string"==typeof t?t:"string"==typeof t.content?t.content:t.content.map(e).join(""):""},a=function(n){for(var s=[],g=0;g<n.length;g++){var o=n[g],i=!1;if("string"!=typeof o&&("tag"===o.type&&o.content[0]&&"tag"===o.content[0].type?"</"===o.content[0].content[0].content?s.length>0&&s[s.length-1].tagName===e(o.content[0].content[1])&&s.pop():"/>"===o.content[o.content.length-1].content||s.push({tagName:e(o.content[0].content[1]),openedBraces:0}):s.length>0&&"punctuation"===o.type&&"{"===o.content?s[s.length-1].openedBraces++:s.length>0&&s[s.length-1].openedBraces>0&&"punctuation"===o.type&&"}"===o.content?s[s.length-1].openedBraces--:i=!0),(i||"string"==typeof o)&&s.length>0&&0===s[s.length-1].openedBraces){var p=e(o);g<n.length-1&&("string"==typeof n[g+1]||"plain-text"===n[g+1].type)&&(p+=e(n[g+1]),n.splice(g+1,1)),g>0&&("string"==typeof n[g-1]||"plain-text"===n[g-1].type)&&(p=e(n[g-1])+p,n.splice(g-1,1),g--),n[g]=new t.Token("plain-text",p,null,p)}o.content&&"string"!=typeof o.content&&a(o.content)}};t.hooks.add("after-tokenize",function(t){("jsx"===t.language||"tsx"===t.language)&&a(t.tokens)})}(Prism);

/***/ }),
/* 1085 */
/***/ (function(module, exports) {

Prism.languages.julia={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0},string:/("""|''')[\s\S]+?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2/,keyword:/\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|let|local|macro|module|print|println|quote|return|try|type|typealias|using|while)\b/,"boolean":/\b(?:true|false)\b/,number:/(?:\b(?=\d)|\B(?=\.))(?:0[box])?(?:[\da-f]+\.?\d*|\.\d+)(?:[efp][+-]?\d+)?j?/i,operator:/[-+*^%÷&$\\]=?|\/[\/=]?|!=?=?|\|[=>]?|<(?:<=?|[=:])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥]/,punctuation:/[{}[\];(),.:]/};

/***/ }),
/* 1086 */
/***/ (function(module, exports) {

Prism.languages.keyman={comment:/\bc\s.*/i,"function":/\[\s*(?:(?:CTRL|SHIFT|ALT|LCTRL|RCTRL|LALT|RALT|CAPS|NCAPS)\s+)*(?:[TKU]_[\w?]+|".+?"|'.+?')\s*\]/i,string:/("|').*?\1/,bold:[/&(?:baselayout|bitmap|capsononly|capsalwaysoff|shiftfreescaps|copyright|ethnologuecode|hotkey|includecodes|keyboardversion|kmw_embedcss|kmw_embedjs|kmw_helpfile|kmw_helptext|kmw_rtl|language|layer|layoutfile|message|mnemoniclayout|name|oldcharposmatching|platform|targets|version|visualkeyboard|windowslanguages)\b/i,/\b(?:bitmap|bitmaps|caps on only|caps always off|shift frees caps|copyright|hotkey|language|layout|message|name|version)\b/i],keyword:/\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|return|reset|save|set|store|use)\b/i,atrule:/\b(?:ansi|begin|unicode|group|using keys|match|nomatch)\b/i,number:/\b(?:U\+[\dA-F]+|d\d+|x[\da-f]+|\d+)\b/i,operator:/[+>\\,()]/,tag:/\$(?:keyman|kmfl|weaver|keymanweb|keymanonly):/i};

/***/ }),
/* 1087 */
/***/ (function(module, exports) {

!function(e){e.languages.kotlin=e.languages.extend("clike",{keyword:{pattern:/(^|[^.])\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\b/,lookbehind:!0},"function":[/\w+(?=\s*\()/,{pattern:/(\.)\w+(?=\s*\{)/,lookbehind:!0}],number:/\b(?:0[xX][\da-fA-F]+(?:_[\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?(?:[eE][+-]?\d+(?:_\d+)*)?[fFL]?)\b/,operator:/\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\/*%<>]=?|[?:]:?|\.\.|&&|\|\||\b(?:and|inv|or|shl|shr|ushr|xor)\b/}),delete e.languages.kotlin["class-name"],e.languages.insertBefore("kotlin","string",{"raw-string":{pattern:/("""|''')[\s\S]*?\1/,alias:"string"}}),e.languages.insertBefore("kotlin","keyword",{annotation:{pattern:/\B@(?:\w+:)?(?:[A-Z]\w*|\[[^\]]+\])/,alias:"builtin"}}),e.languages.insertBefore("kotlin","function",{label:{pattern:/\w+@|@\w+/,alias:"symbol"}});var n=[{pattern:/\$\{[^}]+\}/,inside:{delimiter:{pattern:/^\$\{|\}$/,alias:"variable"},rest:e.languages.kotlin}},{pattern:/\$\w+/,alias:"variable"}];e.languages.kotlin.string.inside=e.languages.kotlin["raw-string"].inside={interpolation:n}}(Prism);

/***/ }),
/* 1088 */
/***/ (function(module, exports) {

!function(a){var e=/\\(?:[^a-z()[\]]|[a-z*]+)/i,n={"equation-command":{pattern:e,alias:"regex"}};a.languages.latex={comment:/%.*/m,cdata:{pattern:/(\\begin\{((?:verbatim|lstlisting)\*?)\})[\s\S]*?(?=\\end\{\2\})/,lookbehind:!0},equation:[{pattern:/\$(?:\\[\s\S]|[^\\$])*\$|\\\([\s\S]*?\\\)|\\\[[\s\S]*?\\\]/,inside:n,alias:"string"},{pattern:/(\\begin\{((?:equation|math|eqnarray|align|multline|gather)\*?)\})[\s\S]*?(?=\\end\{\2\})/,lookbehind:!0,inside:n,alias:"string"}],keyword:{pattern:/(\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\[[^\]]+\])?\{)[^}]+(?=\})/,lookbehind:!0},url:{pattern:/(\\url\{)[^}]+(?=\})/,lookbehind:!0},headline:{pattern:/(\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\*?(?:\[[^\]]+\])?\{)[^}]+(?=\}(?:\[[^\]]+\])?)/,lookbehind:!0,alias:"class-name"},"function":{pattern:e,alias:"selector"},punctuation:/[[\]{}&]/}}(Prism);

/***/ }),
/* 1089 */
/***/ (function(module, exports) {

Prism.languages.less=Prism.languages.extend("css",{comment:[/\/\*[\s\S]*?\*\//,{pattern:/(^|[^\\])\/\/.*/,lookbehind:!0}],atrule:{pattern:/@[\w-]+?(?:\([^{}]+\)|[^(){};])*?(?=\s*\{)/i,inside:{punctuation:/[:()]/}},selector:{pattern:/(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\([^{}]*\)|[^{};@])*?(?=\s*\{)/,inside:{variable:/@+[\w-]+/}},property:/(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/i,punctuation:/[{}();:,]/,operator:/[+\-*\/]/}),Prism.languages.insertBefore("less","punctuation",{"function":Prism.languages.less.function}),Prism.languages.insertBefore("less","property",{variable:[{pattern:/@[\w-]+\s*:/,inside:{punctuation:/:/}},/@@?[\w-]+/],"mixin-usage":{pattern:/([{;]\s*)[.#](?!\d)[\w-]+.*?(?=[(;])/,lookbehind:!0,alias:"function"}});

/***/ }),
/* 1090 */
/***/ (function(module, exports) {

Prism.languages.liquid={keyword:/\b(?:comment|endcomment|if|elsif|else|endif|unless|endunless|for|endfor|case|endcase|when|in|break|assign|continue|limit|offset|range|reversed|raw|endraw|capture|endcapture|tablerow|endtablerow)\b/,number:/\b0b[01]+\b|\b0x[\da-f]*\.?[\da-fp-]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?[df]?/i,operator:{pattern:/(^|[^.])(?:\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\|[|=]?|\*=?|\/=?|%=?|\^=?|[?:~])/m,lookbehind:!0},"function":{pattern:/(^|[\s;|&])(?:append|prepend|capitalize|cycle|cols|increment|decrement|abs|at_least|at_most|ceil|compact|concat|date|default|divided_by|downcase|escape|escape_once|first|floor|join|last|lstrip|map|minus|modulo|newline_to_br|plus|remove|remove_first|replace|replace_first|reverse|round|rstrip|size|slice|sort|sort_natural|split|strip|strip_html|strip_newlines|times|truncate|truncatewords|uniq|upcase|url_decode|url_encode|include|paginate)(?=$|[\s;|&])/,lookbehind:!0}};

/***/ }),
/* 1091 */
/***/ (function(module, exports) {

!function(e){function n(e){return new RegExp("(\\()"+e+"(?=[\\s\\)])")}function a(e){return new RegExp("([\\s([])"+e+"(?=[\\s)])")}var t="[-+*/_~!@$%^=<>{}\\w]+",r="&"+t,i="(\\()",s="(?=\\))",o="(?=\\s)",l={heading:{pattern:/;;;.*/,alias:["comment","title"]},comment:/;.*/,string:{pattern:/"(?:[^"\\]*|\\.)*"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\s])/,symbol:new RegExp("`"+t+"'")}},"quoted-symbol":{pattern:new RegExp("#?'"+t),alias:["variable","symbol"]},"lisp-property":{pattern:new RegExp(":"+t),alias:"property"},splice:{pattern:new RegExp(",@?"+t),alias:["symbol","variable"]},keyword:[{pattern:new RegExp(i+"(?:(?:lexical-)?let\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)"+o),lookbehind:!0},{pattern:new RegExp(i+"(?:for|do|collect|return|finally|append|concat|in|by)"+o),lookbehind:!0}],declare:{pattern:n("declare"),lookbehind:!0,alias:"keyword"},interactive:{pattern:n("interactive"),lookbehind:!0,alias:"keyword"},"boolean":{pattern:a("(?:t|nil)"),lookbehind:!0},number:{pattern:a("[-+]?\\d+(?:\\.\\d*)?"),lookbehind:!0},defvar:{pattern:new RegExp(i+"def(?:var|const|custom|group)\\s+"+t),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:new RegExp(t)}},defun:{pattern:new RegExp(i+"(?:cl-)?(?:defun\\*?|defmacro)\\s+"+t+"\\s+\\([\\s\\S]*?\\)"),lookbehind:!0,inside:{keyword:/^(?:cl-)?def\S+/,arguments:null,"function":{pattern:new RegExp("(^\\s)"+t),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:new RegExp(i+"lambda\\s+\\((?:&?"+t+"\\s*)*\\)"),lookbehind:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:new RegExp(i+t),lookbehind:!0},punctuation:[/(['`,]?\(|[)\[\]])/,{pattern:/(\s)\.(?=\s)/,lookbehind:!0}]},p={"lisp-marker":new RegExp(r),rest:{argument:{pattern:new RegExp(t),alias:"variable"},varform:{pattern:new RegExp(i+t+"\\s+\\S[\\s\\S]*"+s),lookbehind:!0,inside:{string:l.string,"boolean":l.boolean,number:l.number,symbol:l.symbol,punctuation:/[()]/}}}},d="\\S+(?:\\s+\\S+)*",u={pattern:new RegExp(i+"[\\s\\S]*"+s),lookbehind:!0,inside:{"rest-vars":{pattern:new RegExp("&(?:rest|body)\\s+"+d),inside:p},"other-marker-vars":{pattern:new RegExp("&(?:optional|aux)\\s+"+d),inside:p},keys:{pattern:new RegExp("&key\\s+"+d+"(?:\\s+&allow-other-keys)?"),inside:p},argument:{pattern:new RegExp(t),alias:"variable"},punctuation:/[()]/}};l.lambda.inside.arguments=u,l.defun.inside.arguments=e.util.clone(u),l.defun.inside.arguments.inside.sublist=u,e.languages.lisp=l,e.languages.elisp=l,e.languages.emacs=l,e.languages["emacs-lisp"]=l}(Prism);

/***/ }),
/* 1092 */
/***/ (function(module, exports) {

Prism.languages.livescript={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?\*\//,lookbehind:!0},{pattern:/(^|[^\\])#.*/,lookbehind:!0}],"interpolated-string":{pattern:/(^|[^"])("""|")(?:\\[\s\S]|(?!\2)[^\\])*\2(?!")/,lookbehind:!0,greedy:!0,inside:{variable:{pattern:/(^|[^\\])#[a-z_](?:-?[a-z]|[\d_])*/m,lookbehind:!0},interpolation:{pattern:/(^|[^\\])#\{[^}]+\}/m,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^#\{|\}$/,alias:"variable"}}},string:/[\s\S]+/}},string:[{pattern:/('''|')(?:\\[\s\S]|(?!\1)[^\\])*\1/,greedy:!0},{pattern:/<\[[\s\S]*?\]>/,greedy:!0},/\\[^\s,;\])}]+/],regex:[{pattern:/\/\/(\[.+?]|\\.|(?!\/\/)[^\\])+\/\/[gimyu]{0,5}/,greedy:!0,inside:{comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0}}},{pattern:/\/(\[.+?]|\\.|[^\/\\\r\n])+\/[gimyu]{0,5}/,greedy:!0}],keyword:{pattern:/(^|(?!-).)\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\b/m,lookbehind:!0},"keyword-operator":{pattern:/(^|[^-])\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?:nt| not)?|not|of|or|til|to|typeof|with|xor)(?!-)\b)/m,lookbehind:!0,alias:"operator"},"boolean":{pattern:/(^|[^-])\b(?:false|no|off|on|true|yes)(?!-)\b/m,lookbehind:!0},argument:{pattern:/(^|(?!\.&\.)[^&])&(?!&)\d*/m,lookbehind:!0,alias:"variable"},number:/\b(?:\d+~[\da-z]+|\d[\d_]*(?:\.\d[\d_]*)?(?:[a-z]\w*)?)/i,identifier:/[a-z_](?:-?[a-z]|[\d_])*/i,operator:[{pattern:/( )\.(?= )/,lookbehind:!0},/\.(?:[=~]|\.\.?)|\.(?:[&|^]|<<|>>>?)\.|:(?:=|:=?)|&&|\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\+\+?|@@?|%%?|\*\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\^\^?|[\/?]/],punctuation:/[(){}\[\]|.,:;`]/},Prism.languages.livescript["interpolated-string"].inside.interpolation.inside.rest=Prism.languages.livescript;

/***/ }),
/* 1093 */
/***/ (function(module, exports) {

Prism.languages.lolcode={comment:[/\bOBTW\s+[\s\S]*?\s+TLDR\b/,/\bBTW.+/],string:{pattern:/"(?::.|[^"])*"/,inside:{variable:/:\{[^}]+\}/,symbol:[/:\([a-f\d]+\)/i,/:\[[^\]]+\]/,/:[)>o":]/]},greedy:!0},number:/(?:\B-)?(?:\b\d+\.?\d*|\B\.\d+)/,symbol:{pattern:/(^|\s)(?:A )?(?:YARN|NUMBR|NUMBAR|TROOF|BUKKIT|NOOB)(?=\s|,|$)/,lookbehind:!0,inside:{keyword:/A(?=\s)/}},label:{pattern:/((?:^|\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\w*/,lookbehind:!0,alias:"string"},"function":{pattern:/((?:^|\s)(?:I IZ|HOW IZ I|IZ) )[a-zA-Z]\w*/,lookbehind:!0},keyword:[{pattern:/(^|\s)(?:O HAI IM|KTHX|HAI|KTHXBYE|I HAS A|ITZ(?: A)?|R|AN|MKAY|SMOOSH|MAEK|IS NOW(?: A)?|VISIBLE|GIMMEH|O RLY\?|YA RLY|NO WAI|OIC|MEBBE|WTF\?|OMG|OMGWTF|GTFO|IM IN YR|IM OUTTA YR|FOUND YR|YR|TIL|WILE|UPPIN|NERFIN|I IZ|HOW IZ I|IF U SAY SO|SRS|HAS A|LIEK(?: A)?|IZ)(?=\s|,|$)/,lookbehind:!0},/'Z(?=\s|,|$)/],"boolean":{pattern:/(^|\s)(?:WIN|FAIL)(?=\s|,|$)/,lookbehind:!0},variable:{pattern:/(^|\s)IT(?=\s|,|$)/,lookbehind:!0},operator:{pattern:/(^|\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:SUM|DIFF|PRODUKT|QUOSHUNT|MOD|BIGGR|SMALLR|BOTH|EITHER|WON|ALL|ANY) OF)(?=\s|,|$)/,lookbehind:!0},punctuation:/\.{3}|…|,|!/};

/***/ }),
/* 1094 */
/***/ (function(module, exports) {

Prism.languages.lua={comment:/^#!.+|--(?:\[(=*)\[[\s\S]*?\]\1\]|.*)/m,string:{pattern:/(["'])(?:(?!\1)[^\\\r\n]|\\z(?:\r\n|\s)|\\(?:\r\n|[\s\S]))*\1|\[(=*)\[[\s\S]*?\]\2\]/,greedy:!0},number:/\b0x[a-f\d]+\.?[a-f\d]*(?:p[+-]?\d+)?\b|\b\d+(?:\.\B|\.?\d*(?:e[+-]?\d+)?\b)|\B\.\d+(?:e[+-]?\d+)?\b/i,keyword:/\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\b/,"function":/(?!\d)\w+(?=\s*(?:[({]))/,operator:[/[-+*%^&|#]|\/\/?|<[<=]?|>[>=]?|[=~]=?/,{pattern:/(^|[^.])\.\.(?!\.)/,lookbehind:!0}],punctuation:/[\[\](){},;]|\.+|:+/};

/***/ }),
/* 1095 */
/***/ (function(module, exports) {

Prism.languages.makefile={comment:{pattern:/(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,lookbehind:!0},string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},builtin:/\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,symbol:{pattern:/^[^:=\r\n]+(?=\s*:(?!=))/m,inside:{variable:/\$+(?:[^(){}:#=\s]+|(?=[({]))/}},variable:/\$+(?:[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,keyword:[/-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/,{pattern:/(\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \t])/,lookbehind:!0}],operator:/(?:::|[?:+!])?=|[|@]/,punctuation:/[:;(){}]/};

/***/ }),
/* 1096 */
/***/ (function(module, exports) {

Prism.languages.markdown=Prism.languages.extend("markup",{}),Prism.languages.insertBefore("markdown","prolog",{blockquote:{pattern:/^>(?:[\t ]*>)*/m,alias:"punctuation"},code:[{pattern:/^(?: {4}|\t).+/m,alias:"keyword"},{pattern:/``.+?``|`[^`\n]+`/,alias:"keyword"}],title:[{pattern:/\w+.*(?:\r?\n|\r)(?:==+|--+)/,alias:"important",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\s*)#+.+/m,lookbehind:!0,alias:"important",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,lookbehind:!0,alias:"punctuation"},list:{pattern:/(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,lookbehind:!0,alias:"punctuation"},"url-reference":{pattern:/!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,inside:{variable:{pattern:/^(!?\[)[^\]]+/,lookbehind:!0},string:/(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,punctuation:/^[\[\]!:]|[<>]/},alias:"url"},bold:{pattern:/(^|[^\\])(\*\*|__)(?:(?:\r?\n|\r)(?!\r?\n|\r)|.)+?\2/,lookbehind:!0,inside:{punctuation:/^\*\*|^__|\*\*$|__$/}},italic:{pattern:/(^|[^\\])([*_])(?:(?:\r?\n|\r)(?!\r?\n|\r)|.)+?\2/,lookbehind:!0,inside:{punctuation:/^[*_]|[*_]$/}},url:{pattern:/!?\[[^\]]+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)| ?\[[^\]\n]*\])/,inside:{variable:{pattern:/(!?\[)[^\]]+(?=\]$)/,lookbehind:!0},string:{pattern:/"(?:\\.|[^"\\])*"(?=\)$)/}}}}),Prism.languages.markdown.bold.inside.url=Prism.languages.markdown.url,Prism.languages.markdown.italic.inside.url=Prism.languages.markdown.url,Prism.languages.markdown.bold.inside.italic=Prism.languages.markdown.italic,Prism.languages.markdown.italic.inside.bold=Prism.languages.markdown.bold;

/***/ }),
/* 1097 */
/***/ (function(module, exports) {

Prism.languages["markup-templating"]={},Object.defineProperties(Prism.languages["markup-templating"],{buildPlaceholders:{value:function(e,t,n,a){e.language===t&&(e.tokenStack=[],e.code=e.code.replace(n,function(n){if("function"==typeof a&&!a(n))return n;for(var r=e.tokenStack.length;-1!==e.code.indexOf("___"+t.toUpperCase()+r+"___");)++r;return e.tokenStack[r]=n,"___"+t.toUpperCase()+r+"___"}),e.grammar=Prism.languages.markup)}},tokenizePlaceholders:{value:function(e,t){if(e.language===t&&e.tokenStack){e.grammar=Prism.languages[t];var n=0,a=Object.keys(e.tokenStack),r=function(o){if(!(n>=a.length))for(var i=0;i<o.length;i++){var g=o[i];if("string"==typeof g||g.content&&"string"==typeof g.content){var c=a[n],s=e.tokenStack[c],l="string"==typeof g?g:g.content,p=l.indexOf("___"+t.toUpperCase()+c+"___");if(p>-1){++n;var f,u=l.substring(0,p),_=new Prism.Token(t,Prism.tokenize(s,e.grammar,t),"language-"+t,s),k=l.substring(p+("___"+t.toUpperCase()+c+"___").length);if(u||k?(f=[u,_,k].filter(function(e){return!!e}),r(f)):f=_,"string"==typeof g?Array.prototype.splice.apply(o,[i,1].concat(f)):g.content=f,n>=a.length)break}}else g.content&&"string"!=typeof g.content&&r(g.content)}};r(e.tokens)}}}});

/***/ }),
/* 1098 */
/***/ (function(module, exports) {

Prism.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/(^|[^\\])["']/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},Prism.languages.markup.tag.inside["attr-value"].inside.entity=Prism.languages.markup.entity,Prism.hooks.add("wrap",function(a){"entity"===a.type&&(a.attributes.title=a.content.replace(/&amp;/,"&"))}),Prism.languages.xml=Prism.languages.markup,Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup;

/***/ }),
/* 1099 */
/***/ (function(module, exports) {

Prism.languages.matlab={comment:[/%\{[\s\S]*?\}%/,/%.+/],string:{pattern:/\B'(?:''|[^'\r\n])*'/,greedy:!0},number:/(?:\b\d+\.?\d*|\B\.\d+)(?:[eE][+-]?\d+)?(?:[ij])?|\b[ij]\b/,keyword:/\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\b/,"function":/(?!\d)\w+(?=\s*\()/,operator:/\.?[*^\/\\']|[+\-:@]|[<>=~]=?|&&?|\|\|?/,punctuation:/\.{3}|[.,;\[\](){}!]/};

/***/ }),
/* 1100 */
/***/ (function(module, exports) {

Prism.languages.mel={comment:/\/\/.*/,code:{pattern:/`(?:\\.|[^\\`\r\n])*`/,greedy:!0,alias:"italic",inside:{delimiter:{pattern:/^`|`$/,alias:"punctuation"}}},string:{pattern:/"(?:\\.|[^\\"\r\n])*"/,greedy:!0},variable:/\$\w+/,number:/\b0x[\da-fA-F]+\b|\b\d+\.?\d*|\B\.\d+/,flag:{pattern:/-[^\d\W]\w*/,alias:"operator"},keyword:/\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\b/,"function":/\w+(?=\()|\b(?:about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|CBG|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|Mayatomr|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\b/,operator:[/\+[+=]?|-[-=]?|&&|\|\||[<>]=|[*\/!=]=?|[%^]/,{pattern:/(^|[^<])<(?!<)/,lookbehind:!0},{pattern:/(^|[^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,:;?\[\](){}]/},Prism.languages.mel.code.inside.rest=Prism.languages.mel;

/***/ }),
/* 1101 */
/***/ (function(module, exports) {

Prism.languages.mizar={comment:/::.+/,keyword:/@proof\b|\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|equals|end|environ|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:y|ies)|when|where|with|wrt)\b/,parameter:{pattern:/\$(?:10|\d)/,alias:"variable"},variable:/\w+(?=:)/,number:/(?:\b|-)\d+\b/,operator:/\.\.\.|->|&|\.?=/,punctuation:/\(#|#\)|[,:;\[\](){}]/};

/***/ }),
/* 1102 */
/***/ (function(module, exports) {

Prism.languages.monkey={string:/"[^"\r\n]*"/,comment:[{pattern:/^#Rem\s+[\s\S]*?^#End/im,greedy:!0},{pattern:/'.+/,greedy:!0}],preprocessor:{pattern:/(^[ \t]*)#.+/m,lookbehind:!0,alias:"comment"},"function":/\w+(?=\()/,"type-char":{pattern:/(\w)[?%#$]/,lookbehind:!0,alias:"variable"},number:{pattern:/((?:\.\.)?)(?:(?:\b|\B-\.?|\B\.)\d+(?:(?!\.\.)\.\d*)?|\$[\da-f]+)/i,lookbehind:!0},keyword:/\b(?:Void|Strict|Public|Private|Property|Bool|Int|Float|String|Array|Object|Continue|Exit|Import|Extern|New|Self|Super|Try|Catch|Eachin|True|False|Extends|Abstract|Final|Select|Case|Default|Const|Local|Global|Field|Method|Function|Class|End|If|Then|Else|ElseIf|EndIf|While|Wend|Repeat|Until|Forever|For|To|Step|Next|Return|Module|Interface|Implements|Inline|Throw|Null)\b/i,operator:/\.\.|<[=>]?|>=?|:?=|(?:[+\-*\/&~|]|\b(?:Mod|Shl|Shr)\b)=?|\b(?:And|Not|Or)\b/i,punctuation:/[.,:;()\[\]]/};

/***/ }),
/* 1103 */
/***/ (function(module, exports) {

Prism.languages.n4js=Prism.languages.extend("javascript",{keyword:/\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\b/}),Prism.languages.insertBefore("n4js","constant",{annotation:{pattern:/@+\w+/,alias:"operator"}}),Prism.languages.n4jsd=Prism.languages.n4js;

/***/ }),
/* 1104 */
/***/ (function(module, exports) {

Prism.languages.nasm={comment:/;.*$/m,string:/(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,label:{pattern:/(^\s*)[A-Za-z._?$][\w.?$@~#]*:/m,lookbehind:!0,alias:"function"},keyword:[/\[?BITS (?:16|32|64)\]?/,{pattern:/(^\s*)section\s*[a-zA-Z.]+:?/im,lookbehind:!0},/(?:extern|global)[^;\r\n]*/i,/(?:CPU|FLOAT|DEFAULT).*$/m],register:{pattern:/\b(?:st\d|[xyz]mm\d\d?|[cdt]r\d|r\d\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s)\b/i,alias:"variable"},number:/(?:\b|(?=\$))(?:0[hx][\da-f]*\.?[\da-f]+(?:p[+-]?\d+)?|\d[\da-f]+[hx]|\$\d[\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\d+|\d*\.?\d+(?:\.?e[+-]?\d+)?[dt]?)\b/i,operator:/[\[\]*+\-\/%<>=&|$!]/};

/***/ }),
/* 1105 */
/***/ (function(module, exports) {

Prism.languages.nginx=Prism.languages.extend("clike",{comment:{pattern:/(^|[^"{\\])#.*/,lookbehind:!0},keyword:/\b(?:CONTENT_|DOCUMENT_|GATEWAY_|HTTP_|HTTPS|if_not_empty|PATH_|QUERY_|REDIRECT_|REMOTE_|REQUEST_|SCGI|SCRIPT_|SERVER_|http|events|accept_mutex|accept_mutex_delay|access_log|add_after_body|add_before_body|add_header|addition_types|aio|alias|allow|ancient_browser|ancient_browser_value|auth|auth_basic|auth_basic_user_file|auth_http|auth_http_header|auth_http_timeout|autoindex|autoindex_exact_size|autoindex_localtime|break|charset|charset_map|charset_types|chunked_transfer_encoding|client_body_buffer_size|client_body_in_file_only|client_body_in_single_buffer|client_body_temp_path|client_body_timeout|client_header_buffer_size|client_header_timeout|client_max_body_size|connection_pool_size|create_full_put_path|daemon|dav_access|dav_methods|debug_connection|debug_points|default_type|deny|devpoll_changes|devpoll_events|directio|directio_alignment|disable_symlinks|empty_gif|env|epoll_events|error_log|error_page|expires|fastcgi_buffer_size|fastcgi_buffers|fastcgi_busy_buffers_size|fastcgi_cache|fastcgi_cache_bypass|fastcgi_cache_key|fastcgi_cache_lock|fastcgi_cache_lock_timeout|fastcgi_cache_methods|fastcgi_cache_min_uses|fastcgi_cache_path|fastcgi_cache_purge|fastcgi_cache_use_stale|fastcgi_cache_valid|fastcgi_connect_timeout|fastcgi_hide_header|fastcgi_ignore_client_abort|fastcgi_ignore_headers|fastcgi_index|fastcgi_intercept_errors|fastcgi_keep_conn|fastcgi_max_temp_file_size|fastcgi_next_upstream|fastcgi_no_cache|fastcgi_param|fastcgi_pass|fastcgi_pass_header|fastcgi_read_timeout|fastcgi_redirect_errors|fastcgi_send_timeout|fastcgi_split_path_info|fastcgi_store|fastcgi_store_access|fastcgi_temp_file_write_size|fastcgi_temp_path|flv|geo|geoip_city|geoip_country|google_perftools_profiles|gzip|gzip_buffers|gzip_comp_level|gzip_disable|gzip_http_version|gzip_min_length|gzip_proxied|gzip_static|gzip_types|gzip_vary|if|if_modified_since|ignore_invalid_headers|image_filter|image_filter_buffer|image_filter_jpeg_quality|image_filter_sharpen|image_filter_transparency|imap_capabilities|imap_client_buffer|include|index|internal|ip_hash|keepalive|keepalive_disable|keepalive_requests|keepalive_timeout|kqueue_changes|kqueue_events|large_client_header_buffers|limit_conn|limit_conn_log_level|limit_conn_zone|limit_except|limit_rate|limit_rate_after|limit_req|limit_req_log_level|limit_req_zone|limit_zone|lingering_close|lingering_time|lingering_timeout|listen|location|lock_file|log_format|log_format_combined|log_not_found|log_subrequest|map|map_hash_bucket_size|map_hash_max_size|master_process|max_ranges|memcached_buffer_size|memcached_connect_timeout|memcached_next_upstream|memcached_pass|memcached_read_timeout|memcached_send_timeout|merge_slashes|min_delete_depth|modern_browser|modern_browser_value|mp4|mp4_buffer_size|mp4_max_buffer_size|msie_padding|msie_refresh|multi_accept|open_file_cache|open_file_cache_errors|open_file_cache_min_uses|open_file_cache_valid|open_log_file_cache|optimize_server_names|override_charset|pcre_jit|perl|perl_modules|perl_require|perl_set|pid|pop3_auth|pop3_capabilities|port_in_redirect|post_action|postpone_output|protocol|proxy|proxy_buffer|proxy_buffer_size|proxy_buffering|proxy_buffers|proxy_busy_buffers_size|proxy_cache|proxy_cache_bypass|proxy_cache_key|proxy_cache_lock|proxy_cache_lock_timeout|proxy_cache_methods|proxy_cache_min_uses|proxy_cache_path|proxy_cache_use_stale|proxy_cache_valid|proxy_connect_timeout|proxy_cookie_domain|proxy_cookie_path|proxy_headers_hash_bucket_size|proxy_headers_hash_max_size|proxy_hide_header|proxy_http_version|proxy_ignore_client_abort|proxy_ignore_headers|proxy_intercept_errors|proxy_max_temp_file_size|proxy_method|proxy_next_upstream|proxy_no_cache|proxy_pass|proxy_pass_error_message|proxy_pass_header|proxy_pass_request_body|proxy_pass_request_headers|proxy_read_timeout|proxy_redirect|proxy_redirect_errors|proxy_send_lowat|proxy_send_timeout|proxy_set_body|proxy_set_header|proxy_ssl_session_reuse|proxy_store|proxy_store_access|proxy_temp_file_write_size|proxy_temp_path|proxy_timeout|proxy_upstream_fail_timeout|proxy_upstream_max_fails|random_index|read_ahead|real_ip_header|recursive_error_pages|request_pool_size|reset_timedout_connection|resolver|resolver_timeout|return|rewrite|root|rtsig_overflow_events|rtsig_overflow_test|rtsig_overflow_threshold|rtsig_signo|satisfy|satisfy_any|secure_link_secret|send_lowat|send_timeout|sendfile|sendfile_max_chunk|server|server_name|server_name_in_redirect|server_names_hash_bucket_size|server_names_hash_max_size|server_tokens|set|set_real_ip_from|smtp_auth|smtp_capabilities|so_keepalive|source_charset|split_clients|ssi|ssi_silent_errors|ssi_types|ssi_value_length|ssl|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_client_certificate|ssl_crl|ssl_dhparam|ssl_engine|ssl_prefer_server_ciphers|ssl_protocols|ssl_session_cache|ssl_session_timeout|ssl_verify_client|ssl_verify_depth|starttls|stub_status|sub_filter|sub_filter_once|sub_filter_types|tcp_nodelay|tcp_nopush|timeout|timer_resolution|try_files|types|types_hash_bucket_size|types_hash_max_size|underscores_in_headers|uninitialized_variable_warn|upstream|use|user|userid|userid_domain|userid_expires|userid_name|userid_p3p|userid_path|userid_service|valid_referers|variables_hash_bucket_size|variables_hash_max_size|worker_connections|worker_cpu_affinity|worker_priority|worker_processes|worker_rlimit_core|worker_rlimit_nofile|worker_rlimit_sigpending|working_directory|xclient|xml_entities|xslt_entities|xslt_stylesheet|xslt_types)\b/i}),Prism.languages.insertBefore("nginx","keyword",{variable:/\$[a-z_]+/i});

/***/ }),
/* 1106 */
/***/ (function(module, exports) {

Prism.languages.nim={comment:/#.*/,string:{pattern:/(?:(?:\b(?!\d)(?:\w|\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:"""[\s\S]*?"""(?!")|"(?:\\[\s\S]|""|[^"\\])*")|'(?:\\(?:\d+|x[\da-fA-F]{2}|.)|[^'])')/,greedy:!0},number:/\b(?:0[xXoObB][\da-fA-F_]+|\d[\d_]*(?:(?!\.\.)\.[\d_]*)?(?:[eE][+-]?\d[\d_]*)?)(?:'?[iuf]\d*)?/,keyword:/\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\b/,"function":{pattern:/(?:(?!\d)(?:\w|\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\r\n]+`)\*?(?:\[[^\]]+\])?(?=\s*\()/,inside:{operator:/\*$/}},ignore:{pattern:/`[^`\r\n]+`/,inside:{punctuation:/`/}},operator:{pattern:/(^|[({\[](?=\.\.)|(?![({\[]\.).)(?:(?:[=+\-*\/<>@$~&%|!?^:\\]|\.\.|\.(?![)}\]]))+|\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\b)/m,lookbehind:!0},punctuation:/[({\[]\.|\.[)}\]]|[`(){}\[\],:]/};

/***/ }),
/* 1107 */
/***/ (function(module, exports) {

Prism.languages.nix={comment:/\/\*[\s\S]*?\*\/|#.*/,string:{pattern:/"(?:[^"\\]|\\[\s\S])*"|''(?:(?!'')[\s\S]|''(?:'|\\|\$\{))*''/,greedy:!0,inside:{interpolation:{pattern:/(^|(?:^|(?!'').)[^\\])\$\{(?:[^}]|\{[^}]*\})*}/,lookbehind:!0,inside:{antiquotation:{pattern:/^\$(?=\{)/,alias:"variable"}}}}},url:[/\b(?:[a-z]{3,7}:\/\/)[\w\-+%~\/.:#=?&]+/,{pattern:/([^\/])(?:[\w\-+%~.:#=?&]*(?!\/\/)[\w\-+%~\/.:#=?&])?(?!\/\/)\/[\w\-+%~\/.:#=?&]*/,lookbehind:!0}],antiquotation:{pattern:/\$(?=\{)/,alias:"variable"},number:/\b\d+\b/,keyword:/\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\b/,"function":/\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:url|Tarball)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\b|\bfoldl'\B/,"boolean":/\b(?:true|false)\b/,operator:/[=!<>]=?|\+\+?|\|\||&&|\/\/|->?|[?@]/,punctuation:/[{}()[\].,:;]/},Prism.languages.nix.string.inside.interpolation.inside.rest=Prism.languages.nix;

/***/ }),
/* 1108 */
/***/ (function(module, exports) {

Prism.languages.nsis={comment:{pattern:/(^|[^\\])(\/\*[\s\S]*?\*\/|[#;].*)/,lookbehind:!0},string:{pattern:/("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0},keyword:{pattern:/(^\s*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|Banner|BG(?:Font|Gradient|Image)|BrandingText|BringToFront|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|WriteUTF16LE|Seek|Write|WriteByte|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DlgItem|DLLVersion(?:Local)?|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|Name|Nop|ns(?:Dialogs|Exec)|NSISdl|OutFile|Page(?:Callbacks)?|PE(?:DllCharacteristics|SubsysVer)|Pop|Push|Quit|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|Unicode|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UninstPage|UnRegDLL|UserInfo|Var|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle)\b/m,lookbehind:!0},property:/\b(?:admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user|ARCHIVE|FILE_(ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK((CR|CU|LM)(32|64)?|DD|PD|U)|HKEY_(CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)\b/,constant:/\${[\w\.:\^-]+}|\$\([\w\.:\^-]+\)/i,variable:/\$\w+/i,number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee]-?\d+)?/,operator:/--?|\+\+?|<=?|>=?|==?=?|&&?|\|\|?|[?*\/~^%]/,punctuation:/[{}[\];(),.:]/,important:{pattern:/(^\s*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\b/im,lookbehind:!0}};

/***/ }),
/* 1109 */
/***/ (function(module, exports) {

Prism.languages.objectivec=Prism.languages.extend("c",{keyword:/\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,string:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|@"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,operator:/-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/});

/***/ }),
/* 1110 */
/***/ (function(module, exports) {

Prism.languages.ocaml={comment:/\(\*[\s\S]*?\*\)/,string:[{pattern:/"(?:\\.|[^\\\r\n"])*"/,greedy:!0},{pattern:/(['`])(?:\\(?:\d+|x[\da-f]+|.)|(?!\1)[^\\\r\n])\1/i,greedy:!0}],number:/\b(?:0x[\da-f][\da-f_]+|(?:0[bo])?\d[\d_]*\.?[\d_]*(?:e[+-]?[\d_]+)?)/i,type:{pattern:/\B['`]\w*/,alias:"variable"},directive:{pattern:/\B#\w+/,alias:"function"},keyword:/\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\b/,"boolean":/\b(?:false|true)\b/,operator:/:=|[=<>@^|&+\-*\/$%!?~][!$%&*+\-.\/:<=>?@^|~]*|\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\b/,punctuation:/[(){}\[\]|_.,:;]/};

/***/ }),
/* 1111 */
/***/ (function(module, exports) {

!function(E){E.languages.opencl=E.languages.extend("c",{keyword:/\b(?:__attribute__|(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|auto|break|case|cl_(?:image_format|mem_fence_flags)|clk_event_t|complex|const|continue|default|do|(?:float|double)(?:16(?:x(?:1|16|2|4|8))?|1x(?:1|16|2|4|8)|2(?:x(?:1|16|2|4|8))?|3|4(?:x(?:1|16|2|4|8))?|8(?:x(?:1|16|2|4|8))?)?|else|enum|event_t|extern|for|goto|(?:u?(?:char|short|int|long)|half|quad|bool)(?:2|3|4|8|16)?|if|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|imaginary|inline|intptr_t|ndrange_t|packed|pipe|ptrdiff_t|queue_t|register|reserve_id_t|restrict|return|sampler_t|signed|size_t|sizeof|static|struct|switch|typedef|uintptr_t|uniform|union|unsigned|void|volatile|while)\b/,"function-opencl-kernel":{pattern:/\b(?:abs(?:_diff)?|a?(?:cos|sin)(?:h|pi)?|add_sat|aligned|all|and|any|async(?:_work_group_copy|_work_group_strided_copy)?|atan(?:2?(?:pi)?|h)?|atom_(?:add|and|cmpxchg|dec|inc|max|min|or|sub|xchg|xor)|barrier|bitselect|cbrt|ceil|clamp|clz|copies|copysign|cross|degrees|distance|dot|endian|erf|erfc|exp(?:2|10)?|expm1|fabs|fast_(?:distance|length|normalize)|fdim|floor|fma|fmax|fmin|fract|frexp|fro|from|get_(?:global_(?:id|offset|size)|group_id|image_(?:channel_data_type|channel_order|depth|dim|height|width)|local(?:_id|_size)|num_groups|work_dim)|hadd|(?:half|native)_(?:cos|divide|exp(?:2|10)?|log(?:2|10)?|powr|recip|r?sqrt|sin|tan)|hypot|ilogb|is(?:equal|finite|greater(?:equal)?|inf|less(?:equal|greater)?|nan|normal|notequal|(?:un)?ordered)|ldexp|length|lgamma|lgamma_r|log(?:b|1p|2|10)?|mad(?:24|_hi|_sat)?|max|mem(?:_fence)?|min|mix|modf|mul24|mul_hi|nan|nextafter|normalize|pow[nr]?|prefetch|radians|read_(?:image)(?:f|h|u?i)|read_mem_fence|remainder|remquo|reqd_work_group_size|rhadd|rint|rootn|rotate|round|rsqrt|select|shuffle2?|sign|signbit|sincos|smoothstep|sqrt|step|sub_sat|tan|tanh|tanpi|tgamma|to|trunc|upsample|vec_(?:step|type_hint)|v(?:load|store)(?:_half)?(?:2|3|4|8|16)?|v(?:loada_half|storea?(?:_half)?)(?:2|3|4|8|16)?(?:_(?:rte|rtn|rtp|rtz))?|wait_group_events|work_group_size_hint|write_image(?:f|h|u?i)|write_mem_fence)\b/,alias:"function"},"constant-opencl-kernel":{pattern:/\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:LOCAL|GLOBAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT)_(?:DIG|EPSILON|MANT_DIG|(?:MIN|MAX)(?:(?:_10)?_EXP)?)|FLT_RADIX|HUGE_VALF|INFINITY|(?:INT|LONG|SCHAR|SHRT|UCHAR|UINT|ULONG)_(?:MAX|MIN)|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:10|2)E?|PI[24]?|SQRT(?:1_2|2))|NAN)\b/,alias:"constant"}});var _={"type-opencl-host":{pattern:/\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|short|int|long)|float|double)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\b/,alias:"keyword"},"boolean-opencl-host":{pattern:/\bCL_(?:TRUE|FALSE)\b/,alias:"boolean"},"constant-opencl-host":{pattern:/\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:16|24|8|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\b/,alias:"constant"},"function-opencl-host":{pattern:/\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|Kernel|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\b/,alias:"function"}};E.languages.insertBefore("c","keyword",_),_["type-opencl-host-c++"]={pattern:/\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|Sampler|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|UserEvent)\b/,alias:"keyword"},E.languages.insertBefore("cpp","keyword",_)}(Prism);

/***/ }),
/* 1112 */
/***/ (function(module, exports) {

Prism.languages.oz={comment:/\/\*[\s\S]*?\*\/|%.*/,string:{pattern:/"(?:[^"\\]|\\[\s\S])*"/,greedy:!0},atom:{pattern:/'(?:[^'\\]|\\[\s\S])*'/,greedy:!0,alias:"builtin"},keyword:/[$_]|\[\]|\b(?:at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\b/,"function":[/[a-z][A-Za-z\d]*(?=\()/,{pattern:/(\{)[A-Z][A-Za-z\d]*/,lookbehind:!0}],number:/\b(?:0[bx][\da-f]+|\d+\.?\d*(?:e~?\d+)?\b)|&(?:[^\\]|\\(?:\d{3}|.))/i,variable:/\b[A-Z][A-Za-z\d]*|`(?:[^`\\]|\\.)+`/,"attr-name":/\w+(?=:)/,operator:/:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\=:?|!!?|[|#+\-*\/,~^@]|\b(?:andthen|div|mod|orelse)\b/,punctuation:/[\[\](){}.:;?]/};

/***/ }),
/* 1113 */
/***/ (function(module, exports) {

Prism.languages.parigp={comment:/\/\*[\s\S]*?\*\/|\\\\.*/,string:{pattern:/"(?:[^"\\\r\n]|\\.)*"/,greedy:!0},keyword:function(){var r=["breakpoint","break","dbg_down","dbg_err","dbg_up","dbg_x","forcomposite","fordiv","forell","forpart","forprime","forstep","forsubgroup","forvec","for","iferr","if","local","my","next","return","until","while"];return r=r.map(function(r){return r.split("").join(" *")}).join("|"),RegExp("\\b(?:"+r+")\\b")}(),"function":/\w[\w ]*?(?= *\()/,number:{pattern:/((?:\. *\. *)?)(?:\d(?: *\d)*(?: *(?!\. *\.)\.(?: *\d)*)?|\. *\d(?: *\d)*)(?: *e *[+-]? *\d(?: *\d)*)?/i,lookbehind:!0},operator:/\. *\.|[*\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\(?: *\/)?(?: *=)?|&(?: *&)?|\| *\||['#~^]/,punctuation:/[\[\]{}().,:;|]/};

/***/ }),
/* 1114 */
/***/ (function(module, exports) {

Prism.languages.parser=Prism.languages.extend("markup",{keyword:{pattern:/(^|[^^])(?:\^(?:case|eval|for|if|switch|throw)\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\b)/,lookbehind:!0},variable:{pattern:/(^|[^^])\B\$(?:\w+|(?=[.{]))(?:(?:\.|::?)\w+)*(?:\.|::?)?/,lookbehind:!0,inside:{punctuation:/\.|:+/}},"function":{pattern:/(^|[^^])\B[@^]\w+(?:(?:\.|::?)\w+)*(?:\.|::?)?/,lookbehind:!0,inside:{keyword:{pattern:/(^@)(?:GET_|SET_)/,lookbehind:!0},punctuation:/\.|:+/}},escape:{pattern:/\^(?:[$^;@()\[\]{}"':]|#[a-f\d]*)/i,alias:"builtin"},punctuation:/[\[\](){};]/}),Prism.languages.insertBefore("parser","keyword",{"parser-comment":{pattern:/(\s)#.*/,lookbehind:!0,alias:"comment"},expression:{pattern:/(^|[^^])\((?:[^()]|\((?:[^()]|\((?:[^()])*\))*\))*\)/,greedy:!0,lookbehind:!0,inside:{string:{pattern:/(^|[^^])(["'])(?:(?!\2)[^^]|\^[\s\S])*\2/,lookbehind:!0},keyword:Prism.languages.parser.keyword,variable:Prism.languages.parser.variable,"function":Prism.languages.parser.function,"boolean":/\b(?:true|false)\b/,number:/\b(?:0x[a-f\d]+|\d+\.?\d*(?:e[+-]?\d+)?)\b/i,escape:Prism.languages.parser.escape,operator:/[~+*\/\\%]|!(?:\|\|?|=)?|&&?|\|\|?|==|<[<=]?|>[>=]?|-[fd]?|\b(?:def|eq|ge|gt|in|is|le|lt|ne)\b/,punctuation:Prism.languages.parser.punctuation}}}),Prism.languages.insertBefore("inside","punctuation",{expression:Prism.languages.parser.expression,keyword:Prism.languages.parser.keyword,variable:Prism.languages.parser.variable,"function":Prism.languages.parser.function,escape:Prism.languages.parser.escape,"parser-punctuation":{pattern:Prism.languages.parser.punctuation,alias:"punctuation"}},Prism.languages.parser.tag.inside["attr-value"]);

/***/ }),
/* 1115 */
/***/ (function(module, exports) {

Prism.languages.pascal={comment:[/\(\*[\s\S]+?\*\)/,/\{[\s\S]+?\}/,/\/\/.*/],string:{pattern:/(?:'(?:''|[^'\r\n])*'|#[&$%]?[a-f\d]+)+|\^[a-z]/i,greedy:!0},keyword:[{pattern:/(^|[^&])\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:dispose|exit|false|new|true)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\b/i,lookbehind:!0}],number:[/(?:[&%]\d+|\$[a-f\d]+)/i,/\b\d+(?:\.\d+)?(?:e[+-]?\d+)?/i],operator:[/\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=]/i,{pattern:/(^|[^&])\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\b/,lookbehind:!0}],punctuation:/\(\.|\.\)|[()\[\]:;,.]/},Prism.languages.objectpascal=Prism.languages.pascal;

/***/ }),
/* 1116 */
/***/ (function(module, exports) {

Prism.languages.perl={comment:[{pattern:/(^\s*)=\w+[\s\S]*?=cut.*/m,lookbehind:!0},{pattern:/(^|[^\\$])#.*/,lookbehind:!0}],string:[{pattern:/\b(?:q|qq|qx|qw)\s*([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s+([a-zA-Z0-9])(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s*\((?:[^()\\]|\\[\s\S])*\)/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s*\{(?:[^{}\\]|\\[\s\S])*\}/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s*\[(?:[^[\]\\]|\\[\s\S])*\]/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s*<(?:[^<>\\]|\\[\s\S])*>/,greedy:!0},{pattern:/("|`)(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0},{pattern:/'(?:[^'\\\r\n]|\\.)*'/,greedy:!0}],regex:[{pattern:/\b(?:m|qr)\s*([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1[msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s+([a-zA-Z0-9])(?:(?!\1)[^\\]|\\[\s\S])*\1[msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngc]*/,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*([^a-zA-Z0-9\s{(\[<])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s+([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*\((?:[^()\\]|\\[\s\S])*\)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*\{(?:[^{}\\]|\\[\s\S])*\}\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*\[(?:[^[\]\\]|\\[\s\S])*\]\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*<(?:[^<>\\]|\\[\s\S])*>\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\b))/,greedy:!0}],variable:[/[&*$@%]\{\^[A-Z]+\}/,/[&*$@%]\^[A-Z_]/,/[&*$@%]#?(?=\{)/,/[&*$@%]#?(?:(?:::)*'?(?!\d)[\w$]+)+(?:::)*/i,/[&*$@%]\d+/,/(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/],filehandle:{pattern:/<(?![<=])\S*>|\b_\b/,alias:"symbol"},vstring:{pattern:/v\d+(?:\.\d+)*|\d+(?:\.\d+){2,}/,alias:"string"},"function":{pattern:/sub [a-z0-9_]+/i,inside:{keyword:/sub/}},keyword:/\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|say|state|sub|switch|undef|unless|until|use|when|while)\b/,number:/\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0b[01](?:_?[01])*|(?:\d(?:_?\d)*)?\.?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)\b/,operator:/-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\b/,punctuation:/[{}[\];(),:]/};

/***/ }),
/* 1117 */
/***/ (function(module, exports) {

Prism.languages.insertBefore("php","variable",{"this":/\$this\b/,global:/\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\b/,scope:{pattern:/\b[\w\\]+::/,inside:{keyword:/static|self|parent/,punctuation:/::|\\/}}});

/***/ }),
/* 1118 */
/***/ (function(module, exports) {

!function(e){e.languages.php=e.languages.extend("clike",{keyword:/\b(?:and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\b/i,constant:/\b[A-Z0-9_]{2,}\b/,comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0}}),e.languages.insertBefore("php","string",{"shell-comment":{pattern:/(^|[^\\])#.*/,lookbehind:!0,alias:"comment"}}),e.languages.insertBefore("php","keyword",{delimiter:{pattern:/\?>|<\?(?:php|=)?/i,alias:"important"},variable:/\$+(?:\w+\b|(?={))/i,"package":{pattern:/(\\|namespace\s+|use\s+)[\w\\]+/,lookbehind:!0,inside:{punctuation:/\\/}}}),e.languages.insertBefore("php","operator",{property:{pattern:/(->)[\w]+/,lookbehind:!0}}),e.languages.insertBefore("php","string",{"nowdoc-string":{pattern:/<<<'([^']+)'(?:\r\n?|\n)(?:.*(?:\r\n?|\n))*?\1;/,greedy:!0,alias:"string",inside:{delimiter:{pattern:/^<<<'[^']+'|[a-z_]\w*;$/i,alias:"symbol",inside:{punctuation:/^<<<'?|[';]$/}}}},"heredoc-string":{pattern:/<<<(?:"([^"]+)"(?:\r\n?|\n)(?:.*(?:\r\n?|\n))*?\1;|([a-z_]\w*)(?:\r\n?|\n)(?:.*(?:\r\n?|\n))*?\2;)/i,greedy:!0,alias:"string",inside:{delimiter:{pattern:/^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i,alias:"symbol",inside:{punctuation:/^<<<"?|[";]$/}},interpolation:null}},"single-quoted-string":{pattern:/'(?:\\[\s\S]|[^\\'])*'/,greedy:!0,alias:"string"},"double-quoted-string":{pattern:/"(?:\\[\s\S]|[^\\"])*"/,greedy:!0,alias:"string",inside:{interpolation:null}}}),delete e.languages.php.string;var n={pattern:/{\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\{])\$+(?:\w+(?:\[.+?]|->\w+)*)/,lookbehind:!0,inside:{rest:e.languages.php}};e.languages.php["heredoc-string"].inside.interpolation=n,e.languages.php["double-quoted-string"].inside.interpolation=n,e.hooks.add("before-tokenize",function(n){if(/(?:<\?php|<\?)/gi.test(n.code)){var i=/(?:<\?php|<\?)[\s\S]*?(?:\?>|$)/gi;e.languages["markup-templating"].buildPlaceholders(n,"php",i)}}),e.hooks.add("after-tokenize",function(n){e.languages["markup-templating"].tokenizePlaceholders(n,"php")})}(Prism);

/***/ }),
/* 1119 */
/***/ (function(module, exports) {

Prism.languages.plsql=Prism.languages.extend("sql",{comment:[/\/\*[\s\S]*?\*\//,/--.*/]}),"Array"!==Prism.util.type(Prism.languages.plsql.keyword)&&(Prism.languages.plsql.keyword=[Prism.languages.plsql.keyword]),Prism.languages.plsql.keyword.unshift(/\b(?:ACCESS|AGENT|AGGREGATE|ARRAY|ARROW|AT|ATTRIBUTE|AUDIT|AUTHID|BFILE_BASE|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BYTE|CALLING|CHAR_BASE|CHARSET(?:FORM|ID)|CLOB_BASE|COLAUTH|COLLECT|CLUSTERS?|COMPILED|COMPRESS|CONSTANT|CONSTRUCTOR|CONTEXT|CRASH|CUSTOMDATUM|DANGLING|DATE_BASE|DEFINE|DETERMINISTIC|DURATION|ELEMENT|EMPTY|EXCEPTIONS?|EXCLUSIVE|EXTERNAL|FINAL|FORALL|FORM|FOUND|GENERAL|HEAP|HIDDEN|IDENTIFIED|IMMEDIATE|INCLUDING|INCREMENT|INDICATOR|INDEXES|INDICES|INFINITE|INITIAL|ISOPEN|INSTANTIABLE|INTERFACE|INVALIDATE|JAVA|LARGE|LEADING|LENGTH|LIBRARY|LIKE[24C]|LIMITED|LONG|LOOP|MAP|MAXEXTENTS|MAXLEN|MEMBER|MINUS|MLSLABEL|MULTISET|NAME|NAN|NATIVE|NEW|NOAUDIT|NOCOMPRESS|NOCOPY|NOTFOUND|NOWAIT|NUMBER(?:_BASE)?|OBJECT|OCI(?:COLL|DATE|DATETIME|DURATION|INTERVAL|LOBLOCATOR|NUMBER|RAW|REF|REFCURSOR|ROWID|STRING|TYPE)|OFFLINE|ONLINE|ONLY|OPAQUE|OPERATOR|ORACLE|ORADATA|ORGANIZATION|ORL(?:ANY|VARY)|OTHERS|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETERS?|PASCAL|PCTFREE|PIPE(?:LINED)?|PRAGMA|PRIOR|PRIVATE|RAISE|RANGE|RAW|RECORD|REF|REFERENCE|REM|REMAINDER|RESULT|RESOURCE|RETURNING|REVERSE|ROW(?:ID|NUM|TYPE)|SAMPLE|SB[124]|SEGMENT|SELF|SEPARATE|SEQUENCE|SHORT|SIZE(?:_T)?|SPARSE|SQL(?:CODE|DATA|NAME|STATE)|STANDARD|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUCCESSFUL|SYNONYM|SYSDATE|TABAUTH|TDO|THE|TIMEZONE_(?:ABBR|HOUR|MINUTE|REGION)|TRAILING|TRANSAC(?:TIONAL)?|TRUSTED|UB[124]|UID|UNDER|UNTRUSTED|VALIDATE|VALIST|VARCHAR2|VARIABLE|VARIANCE|VARRAY|VIEWS|VOID|WHENEVER|WRAPPED|ZONE)\b/i),"Array"!==Prism.util.type(Prism.languages.plsql.operator)&&(Prism.languages.plsql.operator=[Prism.languages.plsql.operator]),Prism.languages.plsql.operator.unshift(/:=/);

/***/ }),
/* 1120 */
/***/ (function(module, exports) {

Prism.languages.powershell={comment:[{pattern:/(^|[^`])<#[\s\S]*?#>/,lookbehind:!0},{pattern:/(^|[^`])#.*/,lookbehind:!0}],string:[{pattern:/"(?:`[\s\S]|[^`"])*"/,greedy:!0,inside:{"function":{pattern:/(^|[^`])\$\((?:\$\(.*?\)|(?!\$\()[^\r\n)])*\)/,lookbehind:!0,inside:{}}}},{pattern:/'(?:[^']|'')*'/,greedy:!0}],namespace:/\[[a-z](?:\[(?:\[[^\]]*]|[^\[\]])*]|[^\[\]])*]/i,"boolean":/\$(?:true|false)\b/i,variable:/\$\w+\b/i,"function":[/\b(?:Add-(?:Computer|Content|History|Member|PSSnapin|Type)|Checkpoint-Computer|Clear-(?:Content|EventLog|History|Item|ItemProperty|Variable)|Compare-Object|Complete-Transaction|Connect-PSSession|ConvertFrom-(?:Csv|Json|StringData)|Convert-Path|ConvertTo-(?:Csv|Html|Json|Xml)|Copy-(?:Item|ItemProperty)|Debug-Process|Disable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Disconnect-PSSession|Enable-(?:ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)|Enter-PSSession|Exit-PSSession|Export-(?:Alias|Clixml|Console|Csv|FormatData|ModuleMember|PSSession)|ForEach-Object|Format-(?:Custom|List|Table|Wide)|Get-(?:Alias|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Culture|Date|Event|EventLog|EventSubscriber|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|WmiObject)|Group-Object|Import-(?:Alias|Clixml|Csv|LocalizedData|Module|PSSession)|Invoke-(?:Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)|Join-Path|Limit-EventLog|Measure-(?:Command|Object)|Move-(?:Item|ItemProperty)|New-(?:Alias|Event|EventLog|Item|ItemProperty|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy)|Out-(?:Default|File|GridView|Host|Null|Printer|String)|Pop-Location|Push-Location|Read-Host|Receive-(?:Job|PSSession)|Register-(?:EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)|Remove-(?:Computer|Event|EventLog|Item|ItemProperty|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)|Rename-(?:Computer|Item|ItemProperty)|Reset-ComputerMachinePassword|Resolve-Path|Restart-(?:Computer|Service)|Restore-Computer|Resume-(?:Job|Service)|Save-Help|Select-(?:Object|String|Xml)|Send-MailMessage|Set-(?:Alias|Content|Date|Item|ItemProperty|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)|Show-(?:Command|ControlPanelItem|EventLog)|Sort-Object|Split-Path|Start-(?:Job|Process|Service|Sleep|Transaction)|Stop-(?:Computer|Job|Process|Service)|Suspend-(?:Job|Service)|Tee-Object|Test-(?:ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)|Trace-Command|Unblock-File|Undo-Transaction|Unregister-(?:Event|PSSessionConfiguration)|Update-(?:FormatData|Help|List|TypeData)|Use-Transaction|Wait-(?:Event|Job|Process)|Where-Object|Write-(?:Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning))\b/i,/\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\b/i],keyword:/\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\b/i,operator:{pattern:/(\W?)(?:!|-(eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\b|-[-=]?|\+[+=]?|[*\/%]=?)/i,lookbehind:!0},punctuation:/[|{}[\];(),.]/},Prism.languages.powershell.string[0].inside.boolean=Prism.languages.powershell.boolean,Prism.languages.powershell.string[0].inside.variable=Prism.languages.powershell.variable,Prism.languages.powershell.string[0].inside.function.inside=Prism.languages.powershell;

/***/ }),
/* 1121 */
/***/ (function(module, exports) {

Prism.languages.processing=Prism.languages.extend("clike",{keyword:/\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\b/,operator:/<[<=]?|>[>=]?|&&?|\|\|?|[%?]|[!=+\-*\/]=?/}),Prism.languages.insertBefore("processing","number",{constant:/\b(?!XML\b)[A-Z][A-Z\d_]+\b/,type:{pattern:/\b(?:boolean|byte|char|color|double|float|int|XML|[A-Z]\w*)\b/,alias:"variable"}}),Prism.languages.processing["function"].pattern=/\w+(?=\s*\()/,Prism.languages.processing["class-name"].alias="variable";

/***/ }),
/* 1122 */
/***/ (function(module, exports) {

Prism.languages.prolog={comment:[/%.+/,/\/\*[\s\S]*?\*\//],string:{pattern:/(["'])(?:\1\1|\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},builtin:/\b(?:fx|fy|xf[xy]?|yfx?)\b/,variable:/\b[A-Z_]\w*/,"function":/\b[a-z]\w*(?:(?=\()|\/\d+)/,number:/\b\d+\.?\d*/,operator:/[:\\=><\-?*@\/;+^|!$.]+|\b(?:is|mod|not|xor)\b/,punctuation:/[(){}\[\],]/};

/***/ }),
/* 1123 */
/***/ (function(module, exports) {

Prism.languages.properties={comment:/^[ \t]*[#!].*$/m,"attr-value":{pattern:/(^[ \t]*(?:\\(?:\r\n|[\s\S])|[^\\\s:=])+?(?: *[=:] *| ))(?:\\(?:\r\n|[\s\S])|[^\\\r\n])+/m,lookbehind:!0},"attr-name":/^[ \t]*(?:\\(?:\r\n|[\s\S])|[^\\\s:=])+?(?= *[=:] *| )/m,punctuation:/[=:]/};

/***/ }),
/* 1124 */
/***/ (function(module, exports) {

Prism.languages.protobuf=Prism.languages.extend("clike",{keyword:/\b(?:package|import|message|enum)\b/,builtin:/\b(?:required|repeated|optional|reserved)\b/,primitive:{pattern:/\b(?:double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes)\b/,alias:"symbol"}});

/***/ }),
/* 1125 */
/***/ (function(module, exports) {

!function(e){e.languages.pug={comment:{pattern:/(^([\t ]*))\/\/.*(?:(?:\r?\n|\r)\2[\t ]+.+)*/m,lookbehind:!0},"multiline-script":{pattern:/(^([\t ]*)script\b.*\.[\t ]*)(?:(?:\r?\n|\r(?!\n))(?:\2[\t ]+.+|\s*?(?=\r?\n|\r)))+/m,lookbehind:!0,inside:{rest:e.languages.javascript}},filter:{pattern:/(^([\t ]*)):.+(?:(?:\r?\n|\r(?!\n))(?:\2[\t ]+.+|\s*?(?=\r?\n|\r)))+/m,lookbehind:!0,inside:{"filter-name":{pattern:/^:[\w-]+/,alias:"variable"}}},"multiline-plain-text":{pattern:/(^([\t ]*)[\w\-#.]+\.[\t ]*)(?:(?:\r?\n|\r(?!\n))(?:\2[\t ]+.+|\s*?(?=\r?\n|\r)))+/m,lookbehind:!0},markup:{pattern:/(^[\t ]*)<.+/m,lookbehind:!0,inside:{rest:e.languages.markup}},doctype:{pattern:/((?:^|\n)[\t ]*)doctype(?: .+)?/,lookbehind:!0},"flow-control":{pattern:/(^[\t ]*)(?:if|unless|else|case|when|default|each|while)\b(?: .+)?/m,lookbehind:!0,inside:{each:{pattern:/^each .+? in\b/,inside:{keyword:/\b(?:each|in)\b/,punctuation:/,/}},branch:{pattern:/^(?:if|unless|else|case|when|default|while)\b/,alias:"keyword"},rest:e.languages.javascript}},keyword:{pattern:/(^[\t ]*)(?:block|extends|include|append|prepend)\b.+/m,lookbehind:!0},mixin:[{pattern:/(^[\t ]*)mixin .+/m,lookbehind:!0,inside:{keyword:/^mixin/,"function":/\w+(?=\s*\(|\s*$)/,punctuation:/[(),.]/}},{pattern:/(^[\t ]*)\+.+/m,lookbehind:!0,inside:{name:{pattern:/^\+\w+/,alias:"function"},rest:e.languages.javascript}}],script:{pattern:/(^[\t ]*script(?:(?:&[^(]+)?\([^)]+\))*[\t ]+).+/m,lookbehind:!0,inside:{rest:e.languages.javascript}},"plain-text":{pattern:/(^[\t ]*(?!-)[\w\-#.]*[\w\-](?:(?:&[^(]+)?\([^)]+\))*\/?[\t ]+).+/m,lookbehind:!0},tag:{pattern:/(^[\t ]*)(?!-)[\w\-#.]*[\w\-](?:(?:&[^(]+)?\([^)]+\))*\/?:?/m,lookbehind:!0,inside:{attributes:[{pattern:/&[^(]+\([^)]+\)/,inside:{rest:e.languages.javascript}},{pattern:/\([^)]+\)/,inside:{"attr-value":{pattern:/(=\s*)(?:\{[^}]*\}|[^,)\r\n]+)/,lookbehind:!0,inside:{rest:e.languages.javascript}},"attr-name":/[\w-]+(?=\s*!?=|\s*[,)])/,punctuation:/[!=(),]+/}}],punctuation:/:/}},code:[{pattern:/(^[\t ]*(?:-|!?=)).+/m,lookbehind:!0,inside:{rest:e.languages.javascript}}],punctuation:/[.\-!=|]+/};for(var t="(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+",n=[{filter:"atpl",language:"twig"},{filter:"coffee",language:"coffeescript"},"ejs","handlebars","hogan","less","livescript","markdown","mustache","plates",{filter:"sass",language:"scss"},"stylus","swig"],a={},i=0,r=n.length;r>i;i++){var s=n[i];s="string"==typeof s?{filter:s,language:s}:s,e.languages[s.language]&&(a["filter-"+s.filter]={pattern:RegExp(t.replace("{{filter_name}}",s.filter),"m"),lookbehind:!0,inside:{"filter-name":{pattern:/^:[\w-]+/,alias:"variable"},rest:e.languages[s.language]}})}e.languages.insertBefore("pug","filter",a)}(Prism);

/***/ }),
/* 1126 */
/***/ (function(module, exports) {

!function(e){e.languages.puppet={heredoc:[{pattern:/(@\("([^"\r\n\/):]+)"(?:\/[nrts$uL]*)?\).*(?:\r?\n|\r))(?:.*(?:\r?\n|\r))*?[ \t]*\|?[ \t]*-?[ \t]*\2/,lookbehind:!0,alias:"string",inside:{punctuation:/(?=\S).*\S(?= *$)/}},{pattern:/(@\(([^"\r\n\/):]+)(?:\/[nrts$uL]*)?\).*(?:\r?\n|\r))(?:.*(?:\r?\n|\r))*?[ \t]*\|?[ \t]*-?[ \t]*\2/,lookbehind:!0,greedy:!0,alias:"string",inside:{punctuation:/(?=\S).*\S(?= *$)/}},{pattern:/@\("?(?:[^"\r\n\/):]+)"?(?:\/[nrts$uL]*)?\)/,alias:"string",inside:{punctuation:{pattern:/(\().+?(?=\))/,lookbehind:!0}}}],"multiline-comment":{pattern:/(^|[^\\])\/\*[\s\S]*?\*\//,lookbehind:!0,greedy:!0,alias:"comment"},regex:{pattern:/((?:\bnode\s+|[~=\(\[\{,]\s*|[=+]>\s*|^\s*))\/(?:[^\/\\]|\\[\s\S])+\/(?:[imx]+\b|\B)/,lookbehind:!0,greedy:!0,inside:{"extended-regex":{pattern:/^\/(?:[^\/\\]|\\[\s\S])+\/[im]*x[im]*$/,inside:{comment:/#.*/}}}},comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0,greedy:!0},string:{pattern:/(["'])(?:\$\{(?:[^'"}]|(["'])(?:(?!\2)[^\\]|\\[\s\S])*\2)+\}|(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0,inside:{"double-quoted":{pattern:/^"[\s\S]*"$/,inside:{}}}},variable:{pattern:/\$(?:::)?\w+(?:::\w+)*/,inside:{punctuation:/::/}},"attr-name":/(?:\w+|\*)(?=\s*=>)/,"function":[{pattern:/(\.)(?!\d)\w+/,lookbehind:!0},/\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\b|\b(?!\d)\w+(?=\()/],number:/\b(?:0x[a-f\d]+|\d+(?:\.\d+)?(?:e-?\d+)?)\b/i,"boolean":/\b(?:true|false)\b/,keyword:/\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\b/,datatype:{pattern:/\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\b/,alias:"symbol"},operator:/=[=~>]?|![=~]?|<(?:<\|?|[=~|-])?|>[>=]?|->?|~>|\|>?>?|[*\/%+?]|\b(?:and|in|or)\b/,punctuation:/[\[\]{}().,;]|:+/};var n=[{pattern:/(^|[^\\])\$\{(?:[^'"{}]|\{[^}]*\}|(["'])(?:(?!\2)[^\\]|\\[\s\S])*\2)+\}/,lookbehind:!0,inside:{"short-variable":{pattern:/(^\$\{)(?!\w+\()(?:::)?\w+(?:::\w+)*/,lookbehind:!0,alias:"variable",inside:{punctuation:/::/}},delimiter:{pattern:/^\$/,alias:"variable"},rest:e.languages.puppet}},{pattern:/(^|[^\\])\$(?:::)?\w+(?:::\w+)*/,lookbehind:!0,alias:"variable",inside:{punctuation:/::/}}];e.languages.puppet.heredoc[0].inside.interpolation=n,e.languages.puppet.string.inside["double-quoted"].inside.interpolation=n}(Prism);

/***/ }),
/* 1127 */
/***/ (function(module, exports) {

!function(e){e.languages.pure={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?\*\//,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0},/#!.+/],"inline-lang":{pattern:/%<[\s\S]+?%>/,greedy:!0,inside:{lang:{pattern:/(^%< *)-\*-.+?-\*-/,lookbehind:!0,alias:"comment"},delimiter:{pattern:/^%<.*|%>$/,alias:"punctuation"}}},string:{pattern:/"(?:\\.|[^"\\\r\n])*"/,greedy:!0},number:{pattern:/((?:\.\.)?)(?:\b(?:inf|nan)\b|\b0x[\da-f]+|(?:\b(?:0b)?\d+(?:\.\d)?|\B\.\d)\d*(?:e[+-]?\d+)?L?)/i,lookbehind:!0},keyword:/\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\b/,"function":/\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\b/,special:{pattern:/\b__[a-z]+__\b/i,alias:"builtin"},operator:/(?=\b_|[^_])[!"#$%&'*+,\-.\/:<=>?@\\^_`|~\u00a1-\u00bf\u00d7-\u00f7\u20d0-\u2bff]+|\b(?:and|div|mod|not|or)\b/,punctuation:/[(){}\[\];,|]/};var t=["c",{lang:"c++",alias:"cpp"},"fortran","ats","dsp"],a="%< *-\\*- *{lang}\\d* *-\\*-[\\s\\S]+?%>";t.forEach(function(t){var r=t;if("string"!=typeof t&&(r=t.alias,t=t.lang),e.languages[r]){var i={};i["inline-lang-"+r]={pattern:RegExp(a.replace("{lang}",t.replace(/([.+*?\/\\(){}\[\]])/g,"\\$1")),"i"),inside:e.util.clone(e.languages.pure["inline-lang"].inside)},i["inline-lang-"+r].inside.rest=e.util.clone(e.languages[r]),e.languages.insertBefore("pure","inline-lang",i)}}),e.languages.c&&(e.languages.pure["inline-lang"].inside.rest=e.util.clone(e.languages.c))}(Prism);

/***/ }),
/* 1128 */
/***/ (function(module, exports) {

Prism.languages.python={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0},"triple-quoted-string":{pattern:/("""|''')[\s\S]+?\1/,greedy:!0,alias:"string"},string:{pattern:/("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0},"function":{pattern:/((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,lookbehind:!0},"class-name":{pattern:/(\bclass\s+)\w+/i,lookbehind:!0},keyword:/\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|pass|print|raise|return|try|while|with|yield)\b/,builtin:/\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,"boolean":/\b(?:True|False|None)\b/,number:/(?:\b(?=\d)|\B(?=\.))(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*\.?\d*|\.\d+)(?:e[+-]?\d+)?j?\b/i,operator:/[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:or|and|not)\b/,punctuation:/[{}[\];(),.:]/};

/***/ }),
/* 1129 */
/***/ (function(module, exports) {

Prism.languages.q={string:/"(?:\\.|[^"\\\r\n])*"/,comment:[{pattern:/([\t )\]}])\/.*/,lookbehind:!0,greedy:!0},{pattern:/(^|\r?\n|\r)\/[\t ]*(?:(?:\r?\n|\r)(?:.*(?:\r?\n|\r))*?(?:\\(?=[\t ]*(?:\r?\n|\r))|$)|\S.*)/,lookbehind:!0,greedy:!0},{pattern:/^\\[\t ]*(?:\r?\n|\r)[\s\S]+/m,greedy:!0},{pattern:/^#!.+/m,greedy:!0}],symbol:/`(?::\S+|[\w.]*)/,datetime:{pattern:/0N[mdzuvt]|0W[dtz]|\d{4}\.\d\d(?:m|\.\d\d(?:T(?:\d\d(?::\d\d(?::\d\d(?:[.:]\d\d\d)?)?)?)?)?[dz]?)|\d\d:\d\d(?::\d\d(?:[.:]\d\d\d)?)?[uvt]?/,alias:"number"},number:/\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\da-fA-F]+|\d+\.?\d*(?:e[+-]?\d+)?[hjfeb]?)/,keyword:/\\\w+\b|\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\b/,adverb:{pattern:/['\/\\]:?|\beach\b/,alias:"function"},verb:{pattern:/(?:\B\.\B|\b[01]:|<[=>]?|>=?|[:+\-*%,!?_~=|$&#@^]):?/,alias:"operator"},punctuation:/[(){}\[\];.]/};

/***/ }),
/* 1130 */
/***/ (function(module, exports) {

Prism.languages.qore=Prism.languages.extend("clike",{comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:\/\/|#).*)/,lookbehind:!0},string:{pattern:/("|')(\\[\s\S]|(?!\1)[^\\])*\1/,greedy:!0},variable:/\$(?!\d)\w+\b/,keyword:/\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\b/,number:/\b(?:0b[01]+|0x[\da-f]*\.?[\da-fp\-]+|\d*\.?\d+e?\d*[df]|\d*\.?\d+)\b/i,"boolean":/\b(?:true|false)\b/i,operator:{pattern:/(^|[^.])(?:\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\|[|=]?|[*\/%^]=?|[~?])/,lookbehind:!0},"function":/\$?\b(?!\d)\w+(?=\()/});

/***/ }),
/* 1131 */
/***/ (function(module, exports) {

Prism.languages.r={comment:/#.*/,string:{pattern:/(['"])(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0},"percent-operator":{pattern:/%[^%\s]*%/,alias:"operator"},"boolean":/\b(?:TRUE|FALSE)\b/,ellipsis:/\.\.(?:\.|\d+)/,number:[/\b(?:NaN|Inf)\b/,/(?:\b0x[\dA-Fa-f]+(?:\.\d*)?|\b\d+\.?\d*|\B\.\d+)(?:[EePp][+-]?\d+)?[iL]?/],keyword:/\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\b/,operator:/->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\|\|?|[+*\/^$@~]/,punctuation:/[(){}\[\],;]/};

/***/ }),
/* 1132 */
/***/ (function(module, exports) {

Prism.languages.reason=Prism.languages.extend("clike",{comment:{pattern:/(^|[^\\])\/\*[\s\S]*?\*\//,lookbehind:!0},string:{pattern:/"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,greedy:!0},"class-name":/\b[A-Z]\w*/,keyword:/\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\b/,operator:/\.{3}|:[:=]|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\-*\/]\.?|\b(?:mod|land|lor|lxor|lsl|lsr|asr)\b/}),Prism.languages.insertBefore("reason","class-name",{character:{pattern:/'(?:\\x[\da-f]{2}|\\o[0-3][0-7][0-7]|\\\d{3}|\\.|[^'\\\r\n])'/,alias:"string"},constructor:{pattern:/\b[A-Z]\w*\b(?!\s*\.)/,alias:"variable"},label:{pattern:/\b[a-z]\w*(?=::)/,alias:"symbol"}}),delete Prism.languages.reason.function;

/***/ }),
/* 1133 */
/***/ (function(module, exports) {

Prism.languages.renpy={comment:{pattern:/(^|[^\\])#.+/,lookbehind:!0},string:{pattern:/("""|''')[\s\S]+?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2|(?:^#?(?:(?:[0-9a-fA-F]{2}){3}|(?:[0-9a-fA-F]){3})$)/m,greedy:!0},"function":/[a-z_]\w*(?=\()/i,property:/\b(?:insensitive|idle|hover|selected_idle|selected_hover|background|position|alt|xpos|ypos|pos|xanchor|yanchor|anchor|xalign|yalign|align|xcenter|ycenter|xofsset|yoffset|ymaximum|maximum|xmaximum|xminimum|yminimum|minimum|xsize|ysizexysize|xfill|yfill|area|antialias|black_color|bold|caret|color|first_indent|font|size|italic|justify|kerning|language|layout|line_leading|line_overlap_split|line_spacing|min_width|newline_indent|outlines|rest_indent|ruby_style|slow_cps|slow_cps_multiplier|strikethrough|text_align|underline|hyperlink_functions|vertical|hinting|foreground|left_margin|xmargin|top_margin|bottom_margin|ymargin|left_padding|right_padding|xpadding|top_padding|bottom_padding|ypadding|size_group|child|hover_sound|activate_sound|mouse|focus_mask|keyboard_focus|bar_vertical|bar_invert|bar_resizing|left_gutter|right_gutter|top_gutter|bottom_gutter|left_bar|right_bar|top_bar|bottom_bar|thumb|thumb_shadow|thumb_offset|unscrollable|spacing|first_spacing|box_reverse|box_wrap|order_reverse|fit_first|ysize|thumbnail_width|thumbnail_height|help|text_ypos|text_xpos|idle_color|hover_color|selected_idle_color|selected_hover_color|insensitive_color|alpha|insensitive_background|hover_background|zorder|value|width|xadjustment|xanchoraround|xaround|xinitial|xoffset|xzoom|yadjustment|yanchoraround|yaround|yinitial|yzoom|zoom|ground|height|text_style|text_y_fudge|selected_insensitive|has_sound|has_music|has_voice|focus|hovered|image_style|length|minwidth|mousewheel|offset|prefix|radius|range|right_margin|rotate|rotate_pad|developer|screen_width|screen_height|window_title|name|version|windows_icon|default_fullscreen|default_text_cps|default_afm_time|main_menu_music|sample_sound|enter_sound|exit_sound|save_directory|enter_transition|exit_transition|intra_transition|main_game_transition|game_main_transition|end_splash_transition|end_game_transition|after_load_transition|window_show_transition|window_hide_transition|adv_nvl_transition|nvl_adv_transition|enter_yesno_transition|exit_yesno_transition|enter_replay_transition|exit_replay_transition|say_attribute_transition|directory_name|executable_name|include_update|window_icon|modal|google_play_key|google_play_salt|drag_name|drag_handle|draggable|dragged|droppable|dropped|narrator_menu|action|default_afm_enable|version_name|version_tuple|inside|fadeout|fadein|layers|layer_clipping|linear|scrollbars|side_xpos|side_ypos|side_spacing|edgescroll|drag_joined|drag_raise|drop_shadow|drop_shadow_color|subpixel|easein|easeout|time|crop|auto|update|get_installed_packages|can_update|UpdateVersion|Update|overlay_functions|translations|window_left_padding|show_side_image|show_two_window)\b/,tag:/\b(?:label|image|menu|[hv]box|frame|text|imagemap|imagebutton|bar|vbar|screen|textbutton|buttoscreenn|fixed|grid|input|key|mousearea|side|timer|viewport|window|hotspot|hotbar|self|button|drag|draggroup|tag|mm_menu_frame|nvl|block|parallel)\b|\$/,keyword:/\b(?:as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|yield|adjustment|alignaround|allow|angle|around|box_layout|cache|changed|child_size|clicked|clipping|corner1|corner2|default|delay|exclude|scope|slow|slow_abortable|slow_done|sound|style_group|substitute|suffix|transform_anchor|transpose|unhovered|config|theme|mm_root|gm_root|rounded_window|build|disabled_text|disabled|widget_selected|widget_text|widget_hover|widget|updater|behind|call|expression|hide|init|jump|onlayer|python|renpy|scene|set|show|transform|play|queue|stop|pause|define|window|repeat|contains|choice|on|function|event|animation|clockwise|counterclockwise|circles|knot|null|None|random|has|add|use|fade|dissolve|style|store|id|voice|center|left|right|less_rounded|music|movie|clear|persistent|ui)\b/,"boolean":/\b(?:[Tt]rue|[Ff]alse)\b/,number:/(?:\b(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*\.?\d*)|\B\.\d+)(?:e[+-]?\d+)?j?/i,operator:/[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:or|and|not|with|at)\b/,punctuation:/[{}[\];(),.:]/};

/***/ }),
/* 1134 */
/***/ (function(module, exports) {

Prism.languages.rest={table:[{pattern:/(\s*)(?:\+[=-]+)+\+(?:\r?\n|\r)(?:\1(?:[+|].+)+[+|](?:\r?\n|\r))+\1(?:\+[=-]+)+\+/,lookbehind:!0,inside:{punctuation:/\||(?:\+[=-]+)+\+/}},{pattern:/(\s*)(?:=+ +)+=+(?:(?:\r?\n|\r)\1.+)+(?:\r?\n|\r)\1(?:=+ +)+=+(?=(?:\r?\n|\r){2}|\s*$)/,lookbehind:!0,inside:{punctuation:/[=-]+/}}],"substitution-def":{pattern:/(^\s*\.\. )\|(?:[^|\s](?:[^|]*[^|\s])?)\| [^:]+::/m,lookbehind:!0,inside:{substitution:{pattern:/^\|(?:[^|\s]|[^|\s][^|]*[^|\s])\|/,alias:"attr-value",inside:{punctuation:/^\||\|$/}},directive:{pattern:/( +)[^:]+::/,lookbehind:!0,alias:"function",inside:{punctuation:/::$/}}}},"link-target":[{pattern:/(^\s*\.\. )\[[^\]]+\]/m,lookbehind:!0,alias:"string",inside:{punctuation:/^\[|\]$/}},{pattern:/(^\s*\.\. )_(?:`[^`]+`|(?:[^:\\]|\\.)+):/m,lookbehind:!0,alias:"string",inside:{punctuation:/^_|:$/}}],directive:{pattern:/(^\s*\.\. )[^:]+::/m,lookbehind:!0,alias:"function",inside:{punctuation:/::$/}},comment:{pattern:/(^\s*\.\.)(?:(?: .+)?(?:(?:\r?\n|\r).+)+| .+)(?=(?:\r?\n|\r){2}|$)/m,lookbehind:!0},title:[{pattern:/^(([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\2+)(?:\r?\n|\r).+(?:\r?\n|\r)\1$/m,inside:{punctuation:/^[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]+|[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]+$/,important:/.+/}},{pattern:/(^|(?:\r?\n|\r){2}).+(?:\r?\n|\r)([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\2+(?=\r?\n|\r|$)/,lookbehind:!0,inside:{punctuation:/[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]+$/,important:/.+/}}],hr:{pattern:/((?:\r?\n|\r){2})([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\2{3,}(?=(?:\r?\n|\r){2})/,lookbehind:!0,alias:"punctuation"},field:{pattern:/(^\s*):[^:\r\n]+:(?= )/m,lookbehind:!0,alias:"attr-name"},"command-line-option":{pattern:/(^\s*)(?:[+-][a-z\d]|(?:--|\/)[a-z\d-]+)(?:[ =](?:[a-z][\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\d]|(?:--|\/)[a-z\d-]+)(?:[ =](?:[a-z][\w-]*|<[^<>]+>))?)*(?=(?:\r?\n|\r)? {2,}\S)/im,lookbehind:!0,alias:"symbol"},"literal-block":{pattern:/::(?:\r?\n|\r){2}([ \t]+).+(?:(?:\r?\n|\r)\1.+)*/,inside:{"literal-block-punctuation":{pattern:/^::/,alias:"punctuation"}}},"quoted-literal-block":{pattern:/::(?:\r?\n|\r){2}([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]).*(?:(?:\r?\n|\r)\1.*)*/,inside:{"literal-block-punctuation":{pattern:/^(?:::|([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\1*)/m,alias:"punctuation"}}},"list-bullet":{pattern:/(^\s*)(?:[*+\-•‣⁃]|\(?(?:\d+|[a-z]|[ivxdclm]+)\)|(?:\d+|[a-z]|[ivxdclm]+)\.)(?= )/im,lookbehind:!0,alias:"punctuation"},"doctest-block":{pattern:/(^\s*)>>> .+(?:(?:\r?\n|\r).+)*/m,lookbehind:!0,inside:{punctuation:/^>>>/}},inline:[{pattern:/(^|[\s\-:\/'"<(\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\*\*?|``?|\|)(?!\s).*?[^\s]\2(?=[\s\-.,:;!?\\\/'")\]}]|$))/m,lookbehind:!0,inside:{bold:{pattern:/(^\*\*).+(?=\*\*$)/,lookbehind:!0},italic:{pattern:/(^\*).+(?=\*$)/,lookbehind:!0},"inline-literal":{pattern:/(^``).+(?=``$)/,lookbehind:!0,alias:"symbol"},role:{pattern:/^:[^:]+:|:[^:]+:$/,alias:"function",inside:{punctuation:/^:|:$/}},"interpreted-text":{pattern:/(^`).+(?=`$)/,lookbehind:!0,alias:"attr-value"},substitution:{pattern:/(^\|).+(?=\|$)/,lookbehind:!0,alias:"attr-value"},punctuation:/\*\*?|``?|\|/}}],link:[{pattern:/\[[^\]]+\]_(?=[\s\-.,:;!?\\\/'")\]}]|$)/,alias:"string",inside:{punctuation:/^\[|\]_$/}},{pattern:/(?:\b[a-z\d](?:[_.:+]?[a-z\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\s\-.,:;!?\\\/'")\]}]|$)/i,alias:"string",inside:{punctuation:/^_?`|`$|`?_?_$/}}],punctuation:{pattern:/(^\s*)(?:\|(?= |$)|(?:---?|—|\.\.|__)(?= )|\.\.$)/m,lookbehind:!0}};

/***/ }),
/* 1135 */
/***/ (function(module, exports) {

Prism.languages.rip={comment:/#.*/,keyword:/(?:=>|->)|\b(?:class|if|else|switch|case|return|exit|try|catch|finally|raise)\b/,builtin:/@|\bSystem\b/,"boolean":/\b(?:true|false)\b/,date:/\b\d{4}-\d{2}-\d{2}\b/,time:/\b\d{2}:\d{2}:\d{2}\b/,datetime:/\b\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\b/,character:/\B`[^\s`'",.:;#\/\\()<>\[\]{}]\b/,regex:{pattern:/(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\\\r\n])+\/(?=\s*($|[\r\n,.;})]))/,lookbehind:!0,greedy:!0},symbol:/:[^\d\s`'",.:;#\/\\()<>\[\]{}][^\s`'",.:;#\/\\()<>\[\]{}]*/,string:{pattern:/("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0},number:/[+-]?(?:(?:\d+\.\d+)|(?:\d+))/,punctuation:/(?:\.{2,3})|[`,.:;=\/\\()<>\[\]{}]/,reference:/[^\d\s`'",.:;#\/\\()<>\[\]{}][^\s`'",.:;#\/\\()<>\[\]{}]*/};

/***/ }),
/* 1136 */
/***/ (function(module, exports) {

Prism.languages.roboconf={comment:/#.*/,keyword:{pattern:/(^|\s)(?:(?:facet|instance of)(?=[ \t]+[\w-]+[ \t]*\{)|(?:external|import)\b)/,lookbehind:!0},component:{pattern:/[\w-]+(?=[ \t]*\{)/,alias:"variable"},property:/[\w.-]+(?=[ \t]*:)/,value:{pattern:/(=[ \t]*)[^,;]+/,lookbehind:!0,alias:"attr-value"},optional:{pattern:/\(optional\)/,alias:"builtin"},wildcard:{pattern:/(\.)\*/,lookbehind:!0,alias:"operator"},punctuation:/[{},.;:=]/};

/***/ }),
/* 1137 */
/***/ (function(module, exports) {

!function(e){e.languages.ruby=e.languages.extend("clike",{comment:[/#.*/,{pattern:/^=begin(?:\r?\n|\r)(?:.*(?:\r?\n|\r))*?=end/m,greedy:!0}],keyword:/\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\b/});var n={pattern:/#\{[^}]+\}/,inside:{delimiter:{pattern:/^#\{|\}$/,alias:"tag"},rest:e.languages.ruby}};e.languages.insertBefore("ruby","keyword",{regex:[{pattern:/%r([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\((?:[^()\\]|\\[\s\S])*\)[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\[(?:[^\[\]\\]|\\[\s\S])*\][gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r<(?:[^<>\\]|\\[\s\S])*>[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\\\r\n])+\/[gim]{0,3}(?=\s*($|[\r\n,.;})]))/,lookbehind:!0,greedy:!0}],variable:/[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,symbol:{pattern:/(^|[^:]):[a-zA-Z_]\w*(?:[?!]|\b)/,lookbehind:!0}}),e.languages.insertBefore("ruby","number",{builtin:/\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\b/,constant:/\b[A-Z]\w*(?:[?!]|\b)/}),e.languages.ruby.string=[{pattern:/%[qQiIwWxs]?([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\((?:[^()\\]|\\[\s\S])*\)/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\[(?:[^\[\]\\]|\\[\s\S])*\]/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?<(?:[^<>\\]|\\[\s\S])*>/,greedy:!0,inside:{interpolation:n}},{pattern:/("|')(?:#\{[^}]+\}|\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0,inside:{interpolation:n}}]}(Prism);

/***/ }),
/* 1138 */
/***/ (function(module, exports) {

Prism.languages.rust={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?\*\//,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0}],string:[{pattern:/b?r(#*)"(?:\\.|(?!"\1)[^\\\r\n])*"\1/,greedy:!0},{pattern:/b?"(?:\\.|[^\\\r\n"])*"/,greedy:!0}],"char":{pattern:/b?'(?:\\(?:x[0-7][\da-fA-F]|u{(?:[\da-fA-F]_*){1,6}|.)|[^\\\r\n\t'])'/,alias:"string"},"lifetime-annotation":{pattern:/'[^\s>']+/,alias:"symbol"},keyword:/\b(?:abstract|alignof|as|be|box|break|const|continue|crate|do|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|struct|super|true|trait|type|typeof|unsafe|unsized|use|virtual|where|while|yield)\b/,attribute:{pattern:/#!?\[.+?\]/,greedy:!0,alias:"attr-name"},"function":[/\w+(?=\s*\()/,/\w+!(?=\s*\(|\[)/],"macro-rules":{pattern:/\w+!/,alias:"function"},number:/\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\d(?:_?\d)*)?\.?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\b/,"closure-params":{pattern:/\|[^|]*\|(?=\s*[{-])/,inside:{punctuation:/[|:,]/,operator:/[&*]/}},punctuation:/[{}[\];(),:]|\.+|->/,operator:/[-+*\/%!^]=?|=[=>]?|@|&[&=]?|\|[|=]?|<<?=?|>>?=?/};

/***/ }),
/* 1139 */
/***/ (function(module, exports) {

Prism.languages.sas={datalines:{pattern:/^\s*(?:(?:data)?lines|cards);[\s\S]+?(?:\r?\n|\r);/im,alias:"string",inside:{keyword:{pattern:/^(\s*)(?:(?:data)?lines|cards)/i,lookbehind:!0},punctuation:/;/}},comment:[{pattern:/(^\s*|;\s*)\*.*;/m,lookbehind:!0},/\/\*[\s\S]+?\*\//],datetime:{pattern:/'[^']+'(?:dt?|t)\b/i,alias:"number"},string:{pattern:/(["'])(?:\1\1|(?!\1)[\s\S])*\1/,greedy:!0},keyword:/\b(?:data|else|format|if|input|proc\s\w+|quit|run|then)\b/i,number:/\b(?:[\da-f]+x|\d+(?:\.\d+)?(?:e[+-]?\d+)?)/i,operator:/\*\*?|\|\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\/=&]|[~¬^]=?|\b(?:eq|ne|gt|lt|ge|le|in|not)\b/i,punctuation:/[$%@.(){}\[\];,\\]/};

/***/ }),
/* 1140 */
/***/ (function(module, exports) {

!function(e){e.languages.sass=e.languages.extend("css",{comment:{pattern:/^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t]+.+)*/m,lookbehind:!0}}),e.languages.insertBefore("sass","atrule",{"atrule-line":{pattern:/^(?:[ \t]*)[@+=].+/m,inside:{atrule:/(?:@[\w-]+|[+=])/m}}}),delete e.languages.sass.atrule;var a=/\$[-\w]+|#\{\$[-\w]+\}/,t=[/[+*\/%]|[=!]=|<=?|>=?|\b(?:and|or|not)\b/,{pattern:/(\s+)-(?=\s)/,lookbehind:!0}];e.languages.insertBefore("sass","property",{"variable-line":{pattern:/^[ \t]*\$.+/m,inside:{punctuation:/:/,variable:a,operator:t}},"property-line":{pattern:/^[ \t]*(?:[^:\s]+ *:.*|:[^:\s]+.*)/m,inside:{property:[/[^:\s]+(?=\s*:)/,{pattern:/(:)[^:\s]+/,lookbehind:!0}],punctuation:/:/,variable:a,operator:t,important:e.languages.sass.important}}}),delete e.languages.sass.property,delete e.languages.sass.important,delete e.languages.sass.selector,e.languages.insertBefore("sass","punctuation",{selector:{pattern:/([ \t]*)\S(?:,?[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,?[^,\r\n]+)*)*/,lookbehind:!0}})}(Prism);

/***/ }),
/* 1141 */
/***/ (function(module, exports) {

Prism.languages.scala=Prism.languages.extend("java",{keyword:/<-|=>|\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\b/,string:[{pattern:/"""[\s\S]*?"""/,greedy:!0},{pattern:/("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0}],builtin:/\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\b/,number:/\b0x[\da-f]*\.?[\da-f]+|(?:\b\d+\.?\d*|\B\.\d+)(?:e\d+)?[dfl]?/i,symbol:/'[^\d\s\\]\w*/}),delete Prism.languages.scala["class-name"],delete Prism.languages.scala["function"];

/***/ }),
/* 1142 */
/***/ (function(module, exports) {

Prism.languages.scheme={comment:/;.*/,string:{pattern:/"(?:[^"\\\r\n]|\\.)*"|'[^('\s]*/,greedy:!0},keyword:{pattern:/(\()(?:define(?:-syntax|-library|-values)?|(?:case-)?lambda|let(?:\*|rec)?(?:-values)?|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-rules)/,lookbehind:!0},builtin:{pattern:/(\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\/cc|append|abs|apply|eval)\b|null\?|pair\?|boolean\?|eof-object\?|char\?|procedure\?|number\?|port\?|string\?|vector\?|symbol\?|bytevector\?)/,lookbehind:!0},number:{pattern:/(\s|[()])[-+]?\d*\.?\d+(?:\s*[-+]\s*\d*\.?\d+i)?\b/,lookbehind:!0},"boolean":/#[tf]/,operator:{pattern:/(\()(?:[-+*%\/]|[<>]=?|=>?)/,lookbehind:!0},"function":{pattern:/(\()[^\s()]*(?=\s)/,lookbehind:!0},punctuation:/[()]/};

/***/ }),
/* 1143 */
/***/ (function(module, exports) {

Prism.languages.scss=Prism.languages.extend("css",{comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0},atrule:{pattern:/@[\w-]+(?:\([^()]+\)|[^(])*?(?=\s+[{;])/,inside:{rule:/@[\w-]+/}},url:/(?:[-a-z]+-)*url(?=\()/i,selector:{pattern:/(?=\S)[^@;{}()]?(?:[^@;{}()]|&|#\{\$[-\w]+\})+(?=\s*\{(?:\}|\s|[^}]+[:{][^}]+))/m,inside:{parent:{pattern:/&/,alias:"important"},placeholder:/%[-\w]+/,variable:/\$[-\w]+|#\{\$[-\w]+\}/}}}),Prism.languages.insertBefore("scss","atrule",{keyword:[/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i,{pattern:/( +)(?:from|through)(?= )/,lookbehind:!0}]}),Prism.languages.scss.property={pattern:/(?:[\w-]|\$[-\w]+|#\{\$[-\w]+\})+(?=\s*:)/i,inside:{variable:/\$[-\w]+|#\{\$[-\w]+\}/}},Prism.languages.insertBefore("scss","important",{variable:/\$[-\w]+|#\{\$[-\w]+\}/}),Prism.languages.insertBefore("scss","function",{placeholder:{pattern:/%[-\w]+/,alias:"selector"},statement:{pattern:/\B!(?:default|optional)\b/i,alias:"keyword"},"boolean":/\b(?:true|false)\b/,"null":/\bnull\b/,operator:{pattern:/(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|or|not)(?=\s)/,lookbehind:!0}}),Prism.languages.scss.atrule.inside.rest=Prism.languages.scss;

/***/ }),
/* 1144 */
/***/ (function(module, exports) {

Prism.languages.smalltalk={comment:/"(?:""|[^"])+"/,string:/'(?:''|[^'])+'/,symbol:/#[\da-z]+|#(?:-|([+\/\\*~<>=@%|&?!])\1?)|#(?=\()/i,"block-arguments":{pattern:/(\[\s*):[^\[|]*\|/,lookbehind:!0,inside:{variable:/:[\da-z]+/i,punctuation:/\|/}},"temporary-variables":{pattern:/\|[^|]+\|/,inside:{variable:/[\da-z]+/i,punctuation:/\|/}},keyword:/\b(?:nil|true|false|self|super|new)\b/,character:{pattern:/\$./,alias:"string"},number:[/\d+r-?[\dA-Z]+(?:\.[\dA-Z]+)?(?:e-?\d+)?/,/\b\d+(?:\.\d+)?(?:e-?\d+)?/],operator:/[<=]=?|:=|~[~=]|\/\/?|\\\\|>[>=]?|[!^+\-*&|,@]/,punctuation:/[.;:?\[\](){}]/};

/***/ }),
/* 1145 */
/***/ (function(module, exports) {

!function(e){e.languages.smarty={comment:/\{\*[\s\S]*?\*\}/,delimiter:{pattern:/^\{|\}$/i,alias:"punctuation"},string:/(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,number:/\b0x[\dA-Fa-f]+|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][-+]?\d+)?/,variable:[/\$(?!\d)\w+/,/#(?!\d)\w+#/,{pattern:/(\.|->)(?!\d)\w+/,lookbehind:!0},{pattern:/(\[)(?!\d)\w+(?=\])/,lookbehind:!0}],"function":[{pattern:/(\|\s*)@?(?!\d)\w+/,lookbehind:!0},/^\/?(?!\d)\w+/,/(?!\d)\w+(?=\()/],"attr-name":{pattern:/\w+\s*=\s*(?:(?!\d)\w+)?/,inside:{variable:{pattern:/(=\s*)(?!\d)\w+/,lookbehind:!0},operator:/=/}},punctuation:[/[\[\]().,:`]|->/],operator:[/[+\-*\/%]|==?=?|[!<>]=?|&&|\|\|?/,/\bis\s+(?:not\s+)?(?:div|even|odd)(?:\s+by)?\b/,/\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\b/],keyword:/\b(?:false|off|on|no|true|yes)\b/},e.languages.insertBefore("smarty","tag",{"smarty-comment":{pattern:/\{\*[\s\S]*?\*\}/,alias:["smarty","comment"]}}),e.hooks.add("before-tokenize",function(t){var a=/\{\*[\s\S]*?\*\}|\{[\s\S]+?\}/g,n="{literal}",o="{/literal}",r=!1;e.languages["markup-templating"].buildPlaceholders(t,"smarty",a,function(e){return e===o&&(r=!1),r?!1:(e===n&&(r=!0),!0)})}),e.hooks.add("after-tokenize",function(t){e.languages["markup-templating"].tokenizePlaceholders(t,"smarty")})}(Prism);

/***/ }),
/* 1146 */
/***/ (function(module, exports) {

!function(e){var a=/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,t=/\b\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\b|\b0x[\dA-F]+\b/;e.languages.soy={comment:[/\/\*[\s\S]*?\*\//,{pattern:/(\s)\/\/.*/,lookbehind:!0,greedy:!0}],"command-arg":{pattern:/({+\/?\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\s+)\.?[\w.]+/,lookbehind:!0,alias:"string",inside:{punctuation:/\./}},parameter:{pattern:/({+\/?\s*@?param\??\s+)\.?[\w.]+/,lookbehind:!0,alias:"variable"},keyword:[{pattern:/({+\/?[^\S\r\n]*)(?:\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\??|rb|sp|switch|template|xid)/,lookbehind:!0},/\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\b/],delimiter:{pattern:/^{+\/?|\/?}+$/,alias:"punctuation"},property:/\w+(?==)/,variable:{pattern:/\$[^\W\d]\w*(?:\??(?:\.\w+|\[[^\]]+]))*/,inside:{string:{pattern:a,greedy:!0},number:t,punctuation:/[\[\].?]/}},string:{pattern:a,greedy:!0},"function":[/\w+(?=\()/,{pattern:/(\|[^\S\r\n]*)\w+/,lookbehind:!0}],"boolean":/\b(?:true|false)\b/,number:t,operator:/\?:?|<=?|>=?|==?|!=|[+*\/%-]|\b(?:and|not|or)\b/,punctuation:/[{}()\[\]|.,:]/},e.hooks.add("before-tokenize",function(a){var t=/{{.+?}}|{.+?}|\s\/\/.*|\/\*[\s\S]*?\*\//g,n="{literal}",l="{/literal}",r=!1;e.languages["markup-templating"].buildPlaceholders(a,"soy",t,function(e){return e===l&&(r=!1),r?!1:(e===n&&(r=!0),!0)})}),e.hooks.add("after-tokenize",function(a){e.languages["markup-templating"].tokenizePlaceholders(a,"soy")})}(Prism);

/***/ }),
/* 1147 */
/***/ (function(module, exports) {

Prism.languages.sql={comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,lookbehind:!0},string:{pattern:/(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\])*\2/,greedy:!0,lookbehind:!0},variable:/@[\w.$]+|@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,"function":/\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,keyword:/\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,"boolean":/\b(?:TRUE|FALSE|NULL)\b/i,number:/\b0x[\da-f]+\b|\b\d+\.?\d*|\B\.\d+\b/i,operator:/[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,punctuation:/[;[\]()`,.]/};

/***/ }),
/* 1148 */
/***/ (function(module, exports) {

!function(n){var t={url:/url\((["']?).*?\1\)/i,string:{pattern:/("|')(?:(?!\1)[^\\\r\n]|\\(?:\r\n|[\s\S]))*\1/,greedy:!0},interpolation:null,func:null,important:/\B!(?:important|optional)\b/i,keyword:{pattern:/(^|\s+)(?:(?:if|else|for|return|unless)(?=\s+|$)|@[\w-]+)/,lookbehind:!0},hexcode:/#[\da-f]{3,6}/i,number:/\b\d+(?:\.\d+)?%?/,"boolean":/\b(?:true|false)\b/,operator:[/~|[+!\/%<>?=]=?|[-:]=|\*[*=]?|\.+|&&|\|\||\B-\B|\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\b/],punctuation:/[{}()\[\];:,]/};t.interpolation={pattern:/\{[^\r\n}:]+\}/,alias:"variable",inside:{delimiter:{pattern:/^{|}$/,alias:"punctuation"},rest:t}},t.func={pattern:/[\w-]+\([^)]*\).*/,inside:{"function":/^[^(]+/,rest:t}},n.languages.stylus={comment:{pattern:/(^|[^\\])(\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0},"atrule-declaration":{pattern:/(^\s*)@.+/m,lookbehind:!0,inside:{atrule:/^@[\w-]+/,rest:t}},"variable-declaration":{pattern:/(^[ \t]*)[\w$-]+\s*.?=[ \t]*(?:(?:\{[^}]*\}|.+)|$)/m,lookbehind:!0,inside:{variable:/^\S+/,rest:t}},statement:{pattern:/(^[ \t]*)(?:if|else|for|return|unless)[ \t]+.+/m,lookbehind:!0,inside:{keyword:/^\S+/,rest:t}},"property-declaration":{pattern:/((?:^|\{)([ \t]*))(?:[\w-]|\{[^}\r\n]+\})+(?:\s*:\s*|[ \t]+)[^{\r\n]*(?:;|[^{\r\n,](?=$)(?!(\r?\n|\r)(?:\{|\2[ \t]+)))/m,lookbehind:!0,inside:{property:{pattern:/^[^\s:]+/,inside:{interpolation:t.interpolation}},rest:t}},selector:{pattern:/(^[ \t]*)(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\))?|\{[^}\r\n]+\})+)(?:(?:\r?\n|\r)(?:\1(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\))?|\{[^}\r\n]+\})+)))*(?:,$|\{|(?=(?:\r?\n|\r)(?:\{|\1[ \t]+)))/m,lookbehind:!0,inside:{interpolation:t.interpolation,punctuation:/[{},]/}},func:t.func,string:t.string,interpolation:t.interpolation,punctuation:/[{}()\[\];:.]/}}(Prism);

/***/ }),
/* 1149 */
/***/ (function(module, exports) {

Prism.languages.swift=Prism.languages.extend("clike",{string:{pattern:/("|')(\\(?:\((?:[^()]|\([^)]+\))+\)|\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0,inside:{interpolation:{pattern:/\\\((?:[^()]|\([^)]+\))+\)/,inside:{delimiter:{pattern:/^\\\(|\)$/,alias:"variable"}}}}},keyword:/\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\b/,number:/\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,constant:/\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,atrule:/@\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\b/,builtin:/\b(?:[A-Z]\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\b/}),Prism.languages.swift.string.inside.interpolation.inside.rest=Prism.languages.swift;

/***/ }),
/* 1150 */
/***/ (function(module, exports) {

Prism.languages.tap={fail:/not ok[^#{\n\r]*/,pass:/ok[^#{\n\r]*/,pragma:/pragma [+-][a-z]+/,bailout:/bail out!.*/i,version:/TAP version \d+/i,plan:/\d+\.\.\d+(?: +#.*)?/,subtest:{pattern:/# Subtest(?:: .*)?/,greedy:!0},punctuation:/[{}]/,directive:/#.*/,yamlish:{pattern:/(^[^\S\r\n]*)---(?:\r\n?|\n)(?:.*(?:\r\n?|\n))*?[^\S\r\n]*\.\.\.$/m,lookbehind:!0,inside:Prism.languages.yaml,alias:"language-yaml"}};

/***/ }),
/* 1151 */
/***/ (function(module, exports) {

Prism.languages.tcl={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0},string:{pattern:/"(?:[^"\\\r\n]|\\(?:\r\n|[\s\S]))*"/,greedy:!0},variable:[{pattern:/(\$)(?:::)?(?:[a-zA-Z0-9]+::)*\w+/,lookbehind:!0},{pattern:/(\$){[^}]+}/,lookbehind:!0},{pattern:/(^\s*set[ \t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\w+/m,lookbehind:!0}],"function":{pattern:/(^\s*proc[ \t]+)[^\s]+/m,lookbehind:!0},builtin:[{pattern:/(^\s*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\b/m,lookbehind:!0},/\b(?:elseif|else)\b/],scope:{pattern:/(^\s*)(?:global|upvar|variable)\b/m,lookbehind:!0,alias:"constant"},keyword:{pattern:/(^\s*|\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\b/m,lookbehind:!0},operator:/!=?|\*\*?|==|&&?|\|\|?|<[=<]?|>[=>]?|[-+~\/%?^]|\b(?:eq|ne|in|ni)\b/,punctuation:/[{}()\[\]]/};

/***/ }),
/* 1152 */
/***/ (function(module, exports) {

!function(e){var i="(?:\\([^|)]+\\)|\\[[^\\]]+\\]|\\{[^}]+\\})+",n={css:{pattern:/\{[^}]+\}/,inside:{rest:e.languages.css}},"class-id":{pattern:/(\()[^)]+(?=\))/,lookbehind:!0,alias:"attr-value"},lang:{pattern:/(\[)[^\]]+(?=\])/,lookbehind:!0,alias:"attr-value"},punctuation:/[\\\/]\d+|\S/};e.languages.textile=e.languages.extend("markup",{phrase:{pattern:/(^|\r|\n)\S[\s\S]*?(?=$|\r?\n\r?\n|\r\r)/,lookbehind:!0,inside:{"block-tag":{pattern:RegExp("^[a-z]\\w*(?:"+i+"|[<>=()])*\\."),inside:{modifier:{pattern:RegExp("(^[a-z]\\w*)(?:"+i+"|[<>=()])+(?=\\.)"),lookbehind:!0,inside:n},tag:/^[a-z]\w*/,punctuation:/\.$/}},list:{pattern:RegExp("^[*#]+(?:"+i+")?\\s+.+","m"),inside:{modifier:{pattern:RegExp("(^[*#]+)"+i),lookbehind:!0,inside:n},punctuation:/^[*#]+/}},table:{pattern:RegExp("^(?:(?:"+i+"|[<>=()^~])+\\.\\s*)?(?:\\|(?:(?:"+i+"|[<>=()^~_]|[\\\\/]\\d+)+\\.)?[^|]*)+\\|","m"),inside:{modifier:{pattern:RegExp("(^|\\|(?:\\r?\\n|\\r)?)(?:"+i+"|[<>=()^~_]|[\\\\/]\\d+)+(?=\\.)"),lookbehind:!0,inside:n},punctuation:/\||^\./}},inline:{pattern:RegExp("(\\*\\*|__|\\?\\?|[*_%@+\\-^~])(?:"+i+")?.+?\\1"),inside:{bold:{pattern:RegExp("(^(\\*\\*?)(?:"+i+")?).+?(?=\\2)"),lookbehind:!0},italic:{pattern:RegExp("(^(__?)(?:"+i+")?).+?(?=\\2)"),lookbehind:!0},cite:{pattern:RegExp("(^\\?\\?(?:"+i+")?).+?(?=\\?\\?)"),lookbehind:!0,alias:"string"},code:{pattern:RegExp("(^@(?:"+i+")?).+?(?=@)"),lookbehind:!0,alias:"keyword"},inserted:{pattern:RegExp("(^\\+(?:"+i+")?).+?(?=\\+)"),lookbehind:!0},deleted:{pattern:RegExp("(^-(?:"+i+")?).+?(?=-)"),lookbehind:!0},span:{pattern:RegExp("(^%(?:"+i+")?).+?(?=%)"),lookbehind:!0},modifier:{pattern:RegExp("(^\\*\\*|__|\\?\\?|[*_%@+\\-^~])"+i),lookbehind:!0,inside:n},punctuation:/[*_%?@+\-^~]+/}},"link-ref":{pattern:/^\[[^\]]+\]\S+$/m,inside:{string:{pattern:/(\[)[^\]]+(?=\])/,lookbehind:!0},url:{pattern:/(\])\S+$/,lookbehind:!0},punctuation:/[\[\]]/}},link:{pattern:RegExp('"(?:'+i+')?[^"]+":.+?(?=[^\\w/]?(?:\\s|$))'),inside:{text:{pattern:RegExp('(^"(?:'+i+')?)[^"]+(?=")'),lookbehind:!0},modifier:{pattern:RegExp('(^")'+i),lookbehind:!0,inside:n},url:{pattern:/(:).+/,lookbehind:!0},punctuation:/[":]/}},image:{pattern:RegExp("!(?:"+i+"|[<>=()])*[^!\\s()]+(?:\\([^)]+\\))?!(?::.+?(?=[^\\w/]?(?:\\s|$)))?"),inside:{source:{pattern:RegExp("(^!(?:"+i+"|[<>=()])*)[^!\\s()]+(?:\\([^)]+\\))?(?=!)"),lookbehind:!0,alias:"url"},modifier:{pattern:RegExp("(^!)(?:"+i+"|[<>=()])+"),lookbehind:!0,inside:n},url:{pattern:/(:).+/,lookbehind:!0},punctuation:/[!:]/}},footnote:{pattern:/\b\[\d+\]/,alias:"comment",inside:{punctuation:/\[|\]/}},acronym:{pattern:/\b[A-Z\d]+\([^)]+\)/,inside:{comment:{pattern:/(\()[^)]+(?=\))/,lookbehind:!0},punctuation:/[()]/}},mark:{pattern:/\b\((?:TM|R|C)\)/,alias:"comment",inside:{punctuation:/[()]/}}}}});var t={inline:e.languages.textile.phrase.inside.inline,link:e.languages.textile.phrase.inside.link,image:e.languages.textile.phrase.inside.image,footnote:e.languages.textile.phrase.inside.footnote,acronym:e.languages.textile.phrase.inside.acronym,mark:e.languages.textile.phrase.inside.mark};e.languages.textile.tag.pattern=/<\/?(?!\d)[a-z0-9]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i,e.languages.textile.phrase.inside.inline.inside.bold.inside=t,e.languages.textile.phrase.inside.inline.inside.italic.inside=t,e.languages.textile.phrase.inside.inline.inside.inserted.inside=t,e.languages.textile.phrase.inside.inline.inside.deleted.inside=t,e.languages.textile.phrase.inside.inline.inside.span.inside=t,e.languages.textile.phrase.inside.table.inside.inline=t.inline,e.languages.textile.phrase.inside.table.inside.link=t.link,e.languages.textile.phrase.inside.table.inside.image=t.image,e.languages.textile.phrase.inside.table.inside.footnote=t.footnote,e.languages.textile.phrase.inside.table.inside.acronym=t.acronym,e.languages.textile.phrase.inside.table.inside.mark=t.mark}(Prism);

/***/ }),
/* 1153 */
/***/ (function(module, exports) {

var typescript=Prism.util.clone(Prism.languages.typescript);Prism.languages.tsx=Prism.languages.extend("jsx",typescript);

/***/ }),
/* 1154 */
/***/ (function(module, exports) {

!function(e){e.languages.tt2=e.languages.extend("clike",{comment:{pattern:/#.*|\[%#[\s\S]*?%\]/,lookbehind:!0},keyword:/\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\b/,punctuation:/[[\]{},()]/}),delete e.languages.tt2.operator,delete e.languages.tt2.variable,e.languages.insertBefore("tt2","number",{operator:/=[>=]?|!=?|<=?|>=?|&&|\|\|?|\b(?:and|or|not)\b/,variable:{pattern:/[a-z]\w*(?:\s*\.\s*(?:\d+|\$?[a-z]\w*))*/i}}),delete e.languages.tt2.delimiter,e.languages.insertBefore("tt2","keyword",{delimiter:{pattern:/^(?:\[%|%%)-?|-?%]$/,alias:"punctuation"}}),e.languages.insertBefore("tt2","string",{"single-quoted-string":{pattern:/'[^\\']*(?:\\[\s\S][^\\']*)*'/,greedy:!0,alias:"string"},"double-quoted-string":{pattern:/"[^\\"]*(?:\\[\s\S][^\\"]*)*"/,greedy:!0,alias:"string",inside:{variable:{pattern:/\$(?:[a-z]\w*(?:\.(?:\d+|\$?[a-z]\w*))*)/i}}}}),delete e.languages.tt2.string,e.hooks.add("before-tokenize",function(t){var a=/\[%[\s\S]+?%\]/g;e.languages["markup-templating"].buildPlaceholders(t,"tt2",a)}),e.hooks.add("after-tokenize",function(t){e.languages["markup-templating"].tokenizePlaceholders(t,"tt2")})}(Prism);

/***/ }),
/* 1155 */
/***/ (function(module, exports) {

Prism.languages.twig={comment:/\{#[\s\S]*?#\}/,tag:{pattern:/\{\{[\s\S]*?\}\}|\{%[\s\S]*?%\}/,inside:{ld:{pattern:/^(?:\{\{-?|\{%-?\s*\w+)/,inside:{punctuation:/^(?:\{\{|\{%)-?/,keyword:/\w+/}},rd:{pattern:/-?(?:%\}|\}\})$/,inside:{punctuation:/.*/}},string:{pattern:/("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,inside:{punctuation:/^['"]|['"]$/}},keyword:/\b(?:even|if|odd)\b/,"boolean":/\b(?:true|false|null)\b/,number:/\b0x[\dA-Fa-f]+|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][-+]?\d+)?/,operator:[{pattern:/(\s)(?:and|b-and|b-xor|b-or|ends with|in|is|matches|not|or|same as|starts with)(?=\s)/,lookbehind:!0},/[=<>]=?|!=|\*\*?|\/\/?|\?:?|[-+~%|]/],property:/\b[a-zA-Z_]\w*\b/,punctuation:/[()\[\]{}:.,]/}},other:{pattern:/\S(?:[\s\S]*\S)?/,inside:Prism.languages.markup}};

/***/ }),
/* 1156 */
/***/ (function(module, exports) {

Prism.languages.typescript=Prism.languages.extend("javascript",{keyword:/\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield|module|declare|constructor|namespace|abstract|require|type)\b/,builtin:/\b(?:string|Function|any|number|boolean|Array|symbol|console)\b/}),Prism.languages.ts=Prism.languages.typescript;

/***/ }),
/* 1157 */
/***/ (function(module, exports) {

Prism.languages.vbnet=Prism.languages.extend("basic",{keyword:/(?:\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDEC|CDBL|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEFAULT|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LINE INPUT|LET|LIB|LIKE|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPERATOR|OPEN|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHORT|SINGLE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SYNCLOCK|SWAP|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\$|\b)/i,comment:[{pattern:/(?:!|REM\b).+/i,inside:{keyword:/^REM/i}},{pattern:/(^|[^\\:])'.*/,lookbehind:!0}]});

/***/ }),
/* 1158 */
/***/ (function(module, exports) {

!function(e){e.languages.velocity=e.languages.extend("markup",{});var n={variable:{pattern:/(^|[^\\](?:\\\\)*)\$!?(?:[a-z][\w-]*(?:\([^)]*\))?(?:\.[a-z][\w-]*(?:\([^)]*\))?|\[[^\]]+])*|{[^}]+})/i,lookbehind:!0,inside:{}},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},number:/\b\d+\b/,"boolean":/\b(?:true|false)\b/,operator:/[=!<>]=?|[+*\/%-]|&&|\|\||\.\.|\b(?:eq|g[et]|l[et]|n(?:e|ot))\b/,punctuation:/[(){}[\]:,.]/};n.variable.inside={string:n.string,"function":{pattern:/([^\w-])[a-z][\w-]*(?=\()/,lookbehind:!0},number:n.number,"boolean":n["boolean"],punctuation:n.punctuation},e.languages.insertBefore("velocity","comment",{unparsed:{pattern:/(^|[^\\])#\[\[[\s\S]*?]]#/,lookbehind:!0,greedy:!0,inside:{punctuation:/^#\[\[|]]#$/}},"velocity-comment":[{pattern:/(^|[^\\])#\*[\s\S]*?\*#/,lookbehind:!0,greedy:!0,alias:"comment"},{pattern:/(^|[^\\])##.*/,lookbehind:!0,greedy:!0,alias:"comment"}],directive:{pattern:/(^|[^\\](?:\\\\)*)#@?(?:[a-z][\w-]*|{[a-z][\w-]*})(?:\s*\((?:[^()]|\([^()]*\))*\))?/i,lookbehind:!0,inside:{keyword:{pattern:/^#@?(?:[a-z][\w-]*|{[a-z][\w-]*})|\bin\b/,inside:{punctuation:/[{}]/}},rest:n}},variable:n.variable}),e.languages.velocity.tag.inside["attr-value"].inside.rest=e.languages.velocity}(Prism);

/***/ }),
/* 1159 */
/***/ (function(module, exports) {

Prism.languages.verilog={comment:/\/\/.*|\/\*[\s\S]*?\*\//,string:{pattern:/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,greedy:!0},property:/\B\$\w+\b/,constant:/\B`\w+\b/,"function":/\w+(?=\()/,keyword:/\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|class|case|casex|casez|cell|chandle|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endspecify|endsequence|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_onevent|pulsestyle_ondetect|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\b/,important:/\b(?:always_latch|always_comb|always_ff|always)\b ?@?/,number:/\B##?\d+|(?:\b\d+)?'[odbh] ?[\da-fzx_?]+|\b\d*[._]?\d+(?:e[-+]?\d+)?/i,operator:/[-+{}^~%*\/?=!<>&|]+/,punctuation:/[[\];(),.:]/};

/***/ }),
/* 1160 */
/***/ (function(module, exports) {

Prism.languages.vhdl={comment:/--.+/,"vhdl-vectors":{pattern:/\b[oxb]"[\da-f_]+"|"[01uxzwlh-]+"/i,alias:"number"},"quoted-function":{pattern:/"\S+?"(?=\()/,alias:"function"},string:/"(?:[^\\"\r\n]|\\(?:\r\n|[\s\S]))*"/,constant:/\b(?:use|library)\b/i,keyword:/\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\b/i,"boolean":/\b(?:true|false)\b/i,"function":/\w+(?=\()/,number:/'[01uxzwlh-]'|\b(?:\d+#[\da-f_.]+#|\d[\d_.]*)(?:e[-+]?\d+)?/i,operator:/[<>]=?|:=|[-+*\/&=]|\b(?:abs|not|mod|rem|sll|srl|sla|sra|rol|ror|and|or|nand|xnor|xor|nor)\b/i,punctuation:/[{}[\];(),.:]/};

/***/ }),
/* 1161 */
/***/ (function(module, exports) {

Prism.languages.vim={string:/"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\r\n]|'')*'/,comment:/".*/,"function":/\w+(?=\()/,keyword:/\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|sm|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\b/,builtin:/\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\b/,number:/\b(?:0x[\da-f]+|\d+(?:\.\d+)?)\b/i,operator:/\|\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\/%?]|\b(?:is(?:not)?)\b/,punctuation:/[{}[\](),;:]/};

/***/ }),
/* 1162 */
/***/ (function(module, exports) {

Prism.languages["visual-basic"]={comment:{pattern:/(?:['‘’]|REM\b).*/i,inside:{keyword:/^REM/i}},directive:{pattern:/#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\S\r\n]_[^\S\r\n]*(?:\r\n?|\n)|.)+/i,alias:"comment",greedy:!0},string:{pattern:/["“”](?:["“”]{2}|[^"“”])*["“”]C?/i,greedy:!0},date:{pattern:/#[^\S\r\n]*(?:\d+([\/-])\d+\1\d+(?:[^\S\r\n]+(?:\d+[^\S\r\n]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[^\S\r\n]*(?:AM|PM))?))?|(?:\d+[^\S\r\n]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[^\S\r\n]*(?:AM|PM))?))[^\S\r\n]*#/i,alias:"builtin"},number:/(?:(?:\b\d+(?:\.\d+)?|\.\d+)(?:E[+-]?\d+)?|&[HO][\dA-F]+)(?:U?[ILS]|[FRD])?/i,"boolean":/\b(?:True|False|Nothing)\b/i,keyword:/\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\b/i,operator:[/[+\-*\/\\^<=>&#@$%!]/,{pattern:/([^\S\r\n])_(?=[^\S\r\n]*[\r\n])/,lookbehind:!0}],punctuation:/[{}().,:?]/},Prism.languages.vb=Prism.languages["visual-basic"];

/***/ }),
/* 1163 */
/***/ (function(module, exports) {

Prism.languages.wasm={comment:[/\(;[\s\S]*?;\)/,{pattern:/;;.*/,greedy:!0}],string:{pattern:/"(?:\\[\s\S]|[^"\\])*"/,greedy:!0},keyword:[{pattern:/\b(?:align|offset)=/,inside:{operator:/=/}},{pattern:/\b(?:(?:f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))?|memory\.(?:grow|size))\b/,inside:{punctuation:/\./}},/\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\b/],variable:/\$[\w!#$%&'*+\-.\/:<=>?@\\^_`|~]+/i,number:/[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/,punctuation:/[()]/};

/***/ }),
/* 1164 */
/***/ (function(module, exports) {

Prism.languages.wiki=Prism.languages.extend("markup",{"block-comment":{pattern:/(^|[^\\])\/\*[\s\S]*?\*\//,lookbehind:!0,alias:"comment"},heading:{pattern:/^(=+).+?\1/m,inside:{punctuation:/^=+|=+$/,important:/.+/}},emphasis:{pattern:/('{2,5}).+?\1/,inside:{"bold italic":{pattern:/(''''').+?(?=\1)/,lookbehind:!0},bold:{pattern:/(''')[^'](?:.*?[^'])?(?=\1)/,lookbehind:!0},italic:{pattern:/('')[^'](?:.*?[^'])?(?=\1)/,lookbehind:!0},punctuation:/^''+|''+$/}},hr:{pattern:/^-{4,}/m,alias:"punctuation"},url:[/ISBN +(?:97[89][ -]?)?(?:\d[ -]?){9}[\dx]\b|(?:RFC|PMID) +\d+/i,/\[\[.+?\]\]|\[.+?\]/],variable:[/__[A-Z]+__/,/\{{3}.+?\}{3}/,/\{\{.+?\}\}/],symbol:[/^#redirect/im,/~{3,5}/],"table-tag":{pattern:/((?:^|[|!])[|!])[^|\r\n]+\|(?!\|)/m,lookbehind:!0,inside:{"table-bar":{pattern:/\|$/,alias:"punctuation"},rest:Prism.languages.markup.tag.inside}},punctuation:/^(?:\{\||\|\}|\|-|[*#:;!|])|\|\||!!/m}),Prism.languages.insertBefore("wiki","tag",{nowiki:{pattern:/<(nowiki|pre|source)\b[\s\S]*?>[\s\S]*?<\/\1>/i,inside:{tag:{pattern:/<(?:nowiki|pre|source)\b[\s\S]*?>|<\/(?:nowiki|pre|source)>/i,inside:Prism.languages.markup.tag.inside}}}});

/***/ }),
/* 1165 */
/***/ (function(module, exports) {

!function(n){n.languages.xeora=n.languages.extend("markup",{constant:{pattern:/\$(?:DomainContents|PageRenderDuration)\$/,inside:{punctuation:{pattern:/\$/}}},variable:{pattern:/\$@?(?:#+|[-+*~=^])?[\w.]+\$/,inside:{punctuation:{pattern:/[$.]/},operator:{pattern:/#+|[-+*~=^@]/}}},"function-inline":{pattern:/\$F:[-\w.]+\?[-\w.]+(?:,(?:\|?(?:[-#.^+*~]*(?:[\w+][^$]*)|=(?:[\S+][^$]*)|@[-#]*(?:\w+.)[\w+.]+)?)*)?\$/,inside:{variable:{pattern:/(?:[,|])@?(?:#+|[-+*~=^])?[\w.]+/,inside:{punctuation:{pattern:/[,.|]/},operator:{pattern:/#+|[-+*~=^@]/}}},punctuation:{pattern:/\$\w:|[$:?.,|]/}},alias:"function"},"function-block":{pattern:/\$XF:{[-\w.]+\?[-\w.]+(?:,(?:\|?(?:[-#.^+*~]*(?:[\w+][^$]*)|=(?:[\S+][^$]*)|@[-#]*(?:\w+.)[\w+.]+)?)*)?}:XF\$/,inside:{punctuation:{pattern:/[$:{}?.,|]/}},alias:"function"},"directive-inline":{pattern:/\$\w(?:#\d+\+?)?(?:\[[-\w.]+])?:[-\/\w.]+\$/,inside:{punctuation:{pattern:/\$(?:\w:|C(?:\[|#\d))?|[:{[\]]/,inside:{tag:{pattern:/#\d/}}}},alias:"function"},"directive-block-open":{pattern:/\$\w+:{|\$\w(?:#\d+\+?)?(?:\[[-\w.]+])?:[-\w.]+:{(![A-Z]+)?/,inside:{punctuation:{pattern:/\$(?:\w:|C(?:\[|#\d))?|[:{[\]]/,inside:{tag:{pattern:/#\d/}}},attribute:{pattern:/![A-Z]+$/,inside:{punctuation:{pattern:/!/}},alias:"keyword"}},alias:"function"},"directive-block-separator":{pattern:/}:[-\w.]+:{/,inside:{punctuation:{pattern:/[:{}]/}},alias:"function"},"directive-block-close":{pattern:/}:[-\w.]+\$/,inside:{punctuation:{pattern:/[:{}$]/}},alias:"function"}}),n.languages.insertBefore("inside","punctuation",{variable:n.languages.xeora["function-inline"].inside.variable},n.languages.xeora["function-block"]),n.languages.xeoracube=n.languages.xeora}(Prism);

/***/ }),
/* 1166 */
/***/ (function(module, exports) {

Prism.languages.xojo={comment:{pattern:/(?:'|\/\/|Rem\b).+/i,inside:{keyword:/^Rem/i}},string:{pattern:/"(?:""|[^"])*"/,greedy:!0},number:[/(?:\b\d+\.?\d*|\B\.\d+)(?:E[+-]?\d+)?/i,/&[bchou][a-z\d]+/i],symbol:/#(?:If|Else|ElseIf|Endif|Pragma)\b/i,keyword:/\b(?:AddHandler|App|Array|As(?:signs)?|By(?:Ref|Val)|Break|Call|Case|Catch|Const|Continue|CurrentMethodName|Declare|Dim|Do(?:wnTo)?|Each|Else(?:If)?|End|Exit|Extends|False|Finally|For|Global|If|In|Lib|Loop|Me|Next|Nil|Optional|ParamArray|Raise(?:Event)?|ReDim|Rem|RemoveHandler|Return|Select|Self|Soft|Static|Step|Super|Then|To|True|Try|Ubound|Until|Using|Wend|While)\b/i,operator:/<[=>]?|>=?|[+\-*\/\\^=]|\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|Xor|WeakAddressOf)\b/i,punctuation:/[.,;:()]/};

/***/ }),
/* 1167 */
/***/ (function(module, exports) {

!function(e){e.languages.xquery=e.languages.extend("markup",{"xquery-comment":{pattern:/\(:[\s\S]*?:\)/,greedy:!0,alias:"comment"},string:{pattern:/(["'])(?:\1\1|(?!\1)[\s\S])*\1/,greedy:!0},extension:{pattern:/\(#.+?#\)/,alias:"symbol"},variable:/\$[\w-:]+/,axis:{pattern:/(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,lookbehind:!0,alias:"operator"},"keyword-operator":{pattern:/(^|[^:-])\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\b(?=$|[^:-])/,lookbehind:!0,alias:"operator"},keyword:{pattern:/(^|[^:-])\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\b(?=$|[^:-])/,lookbehind:!0},"function":/[\w-]+(?::[\w-]+)*(?=\s*\()/,"xquery-element":{pattern:/(element\s+)[\w-]+(?::[\w-]+)*/,lookbehind:!0,alias:"tag"},"xquery-attribute":{pattern:/(attribute\s+)[\w-]+(?::[\w-]+)*/,lookbehind:!0,alias:"attr-name"},builtin:{pattern:/(^|[^:-])\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\b(?=$|[^:-])/,lookbehind:!0},number:/\b\d+(?:\.\d+)?(?:E[+-]?\d+)?/,operator:[/[+*=?|@]|\.\.?|:=|!=|<[=<]?|>[=>]?/,{pattern:/(\s)-(?=\s)/,lookbehind:!0}],punctuation:/[[\](){},;:\/]/}),e.languages.xquery.tag.pattern=/<\/?(?!\d)[^\s>\/=$<%]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i,e.languages.xquery.tag.inside["attr-value"].pattern=/=(?:("|')(?:\\[\s\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\1)[^\\])*\1|[^\s'">=]+)/i,e.languages.xquery.tag.inside["attr-value"].inside.punctuation=/^="|"$/,e.languages.xquery.tag.inside["attr-value"].inside.expression={pattern:/{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,inside:{rest:e.languages.xquery},alias:"language-xquery"};var t=function(e){return"string"==typeof e?e:"string"==typeof e.content?e.content:e.content.map(t).join("")},n=function(a){for(var o=[],i=0;i<a.length;i++){var r=a[i],s=!1;if("string"!=typeof r&&("tag"===r.type&&r.content[0]&&"tag"===r.content[0].type?"</"===r.content[0].content[0].content?o.length>0&&o[o.length-1].tagName===t(r.content[0].content[1])&&o.pop():"/>"===r.content[r.content.length-1].content||o.push({tagName:t(r.content[0].content[1]),openedBraces:0}):!(o.length>0&&"punctuation"===r.type&&"{"===r.content)||a[i+1]&&"punctuation"===a[i+1].type&&"{"===a[i+1].content||a[i-1]&&"plain-text"===a[i-1].type&&"{"===a[i-1].content?o.length>0&&o[o.length-1].openedBraces>0&&"punctuation"===r.type&&"}"===r.content?o[o.length-1].openedBraces--:"comment"!==r.type&&(s=!0):o[o.length-1].openedBraces++),(s||"string"==typeof r)&&o.length>0&&0===o[o.length-1].openedBraces){var l=t(r);i<a.length-1&&("string"==typeof a[i+1]||"plain-text"===a[i+1].type)&&(l+=t(a[i+1]),a.splice(i+1,1)),i>0&&("string"==typeof a[i-1]||"plain-text"===a[i-1].type)&&(l=t(a[i-1])+l,a.splice(i-1,1),i--),a[i]=/^\s+$/.test(l)?l:new e.Token("plain-text",l,null,l)}r.content&&"string"!=typeof r.content&&n(r.content)}};e.hooks.add("after-tokenize",function(e){"xquery"===e.language&&n(e.tokens)})}(Prism);

/***/ }),
/* 1168 */
/***/ (function(module, exports) {

Prism.languages.yaml={scalar:{pattern:/([\-:]\s*(?:![^\s]+)?[ \t]*[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)[^\r\n]+(?:\2[^\r\n]+)*)/,lookbehind:!0,alias:"string"},comment:/#.*/,key:{pattern:/(\s*(?:^|[:\-,[{\r\n?])[ \t]*(?:![^\s]+)?[ \t]*)[^\r\n{[\]},#\s]+?(?=\s*:\s)/,lookbehind:!0,alias:"atrule"},directive:{pattern:/(^[ \t]*)%.+/m,lookbehind:!0,alias:"important"},datetime:{pattern:/([:\-,[{]\s*(?:![^\s]+)?[ \t]*)(?:\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?)?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?)(?=[ \t]*(?:$|,|]|}))/m,lookbehind:!0,alias:"number"},"boolean":{pattern:/([:\-,[{]\s*(?:![^\s]+)?[ \t]*)(?:true|false)[ \t]*(?=$|,|]|})/im,lookbehind:!0,alias:"important"},"null":{pattern:/([:\-,[{]\s*(?:![^\s]+)?[ \t]*)(?:null|~)[ \t]*(?=$|,|]|})/im,lookbehind:!0,alias:"important"},string:{pattern:/([:\-,[{]\s*(?:![^\s]+)?[ \t]*)("|')(?:(?!\2)[^\\\r\n]|\\.)*\2(?=[ \t]*(?:$|,|]|}))/m,lookbehind:!0,greedy:!0},number:{pattern:/([:\-,[{]\s*(?:![^\s]+)?[ \t]*)[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+\.?\d*|\.?\d+)(?:e[+-]?\d+)?|\.inf|\.nan)[ \t]*(?=$|,|]|})/im,lookbehind:!0},tag:/![^\s]+/,important:/[&*][\w]+/,punctuation:/---|[:[\]{}\-,|>?]|\.\.\./};

/***/ }),
/* 1169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Controller__ = __webpack_require__(1170);
/**
 * @module components/codemirror/main
 * @license MPL-2.0
 */



__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', () => {
  __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.on('components/notes/form', 'ready', opt => new __WEBPACK_IMPORTED_MODULE_1__Controller__["a" /* default */](opt).init());
});

/***/ }),
/* 1170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__View__ = __webpack_require__(1171);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Editor__ = __webpack_require__(1173);
/**
 * @module components/codemirror/Controller
 */








const log = __WEBPACK_IMPORTED_MODULE_3_debug___default()('lav:components/codemirror/Controller');

/**
 * Codemirror editor controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Radio channel.
     *
     * @prop {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('components/editor');
    }

    /**
     * Note form view channel.
     *
     * @prop {Object}
     */
    get formChannel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('components/notes/form');
    }

    /**
     * App configs.
     *
     * @prop {Object}
     */
    get configs() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Configs', 'findConfigs');
    }

    initialize() {
        // Create debounced methods
        this.autoSave = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.debounce(this.autoSave, 1000);
        this.onScroll = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.debounce(this.onScroll, 10);

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.bindAll(this, 'onChange', 'onScroll', 'onCursorActivity');
    }

    onDestroy() {
        log('destroyed');
        this.channel.stopReplying();
        this.editor.instance.toTextArea();
    }

    /**
     * Initialize the editor.
     */
    init() {
        // Render the view
        this.show();

        // Initialize Codemirror
        this.editor = new __WEBPACK_IMPORTED_MODULE_5__Editor__["a" /* default */](__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({ configs: this.configs }, this.options));
        this.editor.init();

        // Start listening to events
        this.listenToEvents();
        this.updatePreview();
    }

    /**
     * Render the view.
     */
    show() {
        this.view = new __WEBPACK_IMPORTED_MODULE_4__View__["a" /* default */]({
            model: this.options.model,
            configs: this.configs
        });

        this.formChannel.request('showChildView', 'editor', this.view);
        return this;
    }

    /**
     * Start listening to events.
     *
     * @listens this.channel#getData
     * @listens this.channel#focus
     * @listens this.channel#makeLink
     * @listens this.channel#makeImage
     */
    listenToEvents() {
        // Listen to view events
        this.listenTo(this.view, 'destroy', this.destroy);
        this.listenTo(this.view, 'click:button', this.onClickButton);
        this.listenTo(this.view.model, 'synced', this.onModelSynced);

        // Listen to form view events
        this.listenTo(this.formChannel, 'change:mode', this.onChangeMode);
        this.listenTo(this.channel, 'focus', () => this.editor.instance.focus());

        // Listen to Codemirror events
        window.dispatchEvent(new Event('resize'));
        this.editor.instance.on('change', this.onChange);
        this.editor.instance.on('scroll', this.onScroll);
        this.editor.instance.on('cursorActivity', this.onCursorActivity);

        // Start replying to requests
        this.channel.reply({
            getContent: this.getContent,
            getData: this.getData,
            makeLink: this.makeLink,
            makeImage: this.makeImage
        }, this);

        // Trigger "init" to inform that a model is being edited
        this.channel.trigger('init', { model: this.view.model });
        return this;
    }

    /**
     * Return the current content.
     *
     * @returns {String}
     */
    getContent() {
        return this.editor.instance.getValue();
    }

    /**
     * Update the preview.
     *
     * @returns {Promise}
     */
    updatePreview() {
        const { attributes } = this.view.model;
        const data = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({}, attributes, {
            content: this.getContent()
        });

        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/markdown', 'render', data).then(content => this.view.trigger('change:editor', { content }));
    }

    /**
     * If a WYSIWYG buttons is clicked, call a switable editor method.
     * For instance, if action of the button is equal to bold,
     * call "boldAction" method.
     *
     * @param {Object} data = {}
     * @param {String} data.action
     */
    onClickButton(data = {}) {
        if (this.editor[`${data.action}Action`]) {
            this.editor[`${data.action}Action`]();
        }
    }

    /**
     * Update Codemirror value. The method is called after synchronizing the model.
     */
    onModelSynced() {
        const cursor = this.editor.instance.getCursor();

        // Update the content
        const content = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.cleanXSS(this.view.model.get('content'), true);
        this.editor.instance.setValue(content);

        // Update cursor position
        this.editor.instance.setCursor(cursor);
    }

    /**
     * Editor mode is changed.
     *
     * @param {Object} data
     * @param {String} data.mode - fullscreen, preview, normal
     */
    onChangeMode(data) {
        window.dispatchEvent(new Event('resize'));
        this.view.trigger('change:mode', data);
    }

    /**
     * Text in the editor changed.
     */
    onChange() {
        log('change');
        this.view.model.trigger('update:stats', { content: this.getContent() });

        this.updatePreview();
        this.autoSave();
    }

    /**
     * Trigger save:auto event.
     */
    autoSave() {
        // Set content only if a user isn't using P2P sync
        if (this.configs.cloudStorage !== 'p2p') {
            this.view.model.set('content', this.getContent());
        }

        this.formChannel.trigger('save:auto');
    }

    /**
     * Synchronize the editor's scroll position with the preview's.
     *
     * @param {Object} e
     */
    onScroll(e) {
        // Don't do anything
        if (!e.doc.scrollTop) {
            this.view.ui.previewScroll.scrollTop(0);
            return;
        }

        // Get the visible range of the text in the editor
        const info = this.editor.instance.getScrollInfo();
        const lineNumber = this.editor.instance.lineAtHeight(info.top, 'local');
        const range = this.editor.instance.getRange({ line: 0, ch: null }, { line: lineNumber, ch: null });

        // Convert the text to Markdown
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/markdown', 'render', { content: range }).then(html => this.syncPreviewScroll(e.doc, html));
    }

    /**
     * Synchronize the editor's scroll position with the preview's.
     *
     * @param {Object} doc
     * @param {String} html
     */
    syncPreviewScroll(doc, html) {
        const temp = this.createSyncFragment(html);
        const lines = temp.children;

        const { preview, previewScroll } = this.view.ui;
        const els = preview[0].children;
        const newPos = els[lines.length].offsetTop;

        /**
         * If the scroll position is on the same element,
         * change it according to the difference of scroll positions in the editor.
         */
        if (this.scrollTop && this.scrollPos === newPos) {
            this.view.ui.previewScroll.scrollTop(previewScroll.scrollTop() + (doc.scrollTop - this.scrollTop));
            this.scrollTop = doc.scrollTop;
            return;
        }

        // Scroll to the last visible element's position
        previewScroll.animate({ scrollTop: newPos }, 70, 'swing');

        this.scrollPos = newPos;
        this.scrollTop = doc.scrollTop;
    }

    /**
     * Create a temporary HTML fragment to calculate the scroll position
     * of the preview.
     *
     * @param {String} html
     * @returns {Object}
     */
    createSyncFragment(html) {
        const fragment = document.createDocumentFragment();
        const temp = document.createElement('div');
        temp.innerHTML = html;
        fragment.appendChild(temp);
        return temp;
    }

    /**
     * Editor's cursor position changed.
     */
    onCursorActivity() {
        const state = this.editor.getState();
        this.$btns = this.$btns || $('.editor--btns .btn');

        // Make a specific button active depending on the type of the element under cursor
        this.$btns.removeClass('btn-primary');
        for (let i = 0; i < state.length; i++) {
            const btn = `$btn${state[i]}`;
            this[btn] = this[btn] || $(`.editor--btns [data-state="${state[i]}"]`);
            this[`$btn${state[i]}`].addClass('btn-primary');
        }

        // Update lines in footer
        this.view.trigger('update:footer', {
            currentLine: this.editor.getCursor().start.line + 1,
            numberOfLines: this.editor.instance.lineCount()
        });
    }

    /**
     * Return data from the editor including content, tags, tasks, files, etc...
     *
     * @returns {Object}
     */
    getData() {
        const content = this.getContent();
        const keys = ['tags', 'tasks', 'taskCompleted', 'taskAll', 'files'];

        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/markdown', 'parse', { content }).then(env => {
            return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.pick(env, keys), { content });
        });
    }

    /**
     * Make a markdown link.
     *
     * @param {Object} data
     * @param {String} data.text
     * @param {String} data.url
     * @returns {String}
     */
    makeLink(data) {
        return `[${data.text}](${data.url})`;
    }

    /**
     * Make a markdown image.
     *
     * @param {Object} data
     * @param {String} data.text - alt text
     * @param {String} data.url
     * @returns {String}
     */
    makeImage(data) {
        return `!${this.makeLink(data)}`;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(15)))

/***/ }),
/* 1171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_jquery__);
/**
 * @module components/codemirror/View
 */





/**
 * Codemirror editor view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1172);
        return __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'layout--body container-fluid';
    }

    ui() {
        return {
            preview: '#wmd-preview',
            previewScroll: '.editor--preview',
            bar: '.editor--bar'
        };
    }

    events() {
        return {
            'click .editor--btns .btn': 'onClickButton',
            'click .editor--col--btn': 'showColumn'
        };
    }

    initialize() {
        this.options.mode = this.options.configs.editMode;
        this.$footer = __WEBPACK_IMPORTED_MODULE_3_jquery___default()('#editor--footer--lines');
        this.$layoutBody = __WEBPACK_IMPORTED_MODULE_3_jquery___default()('.layout--body.-scroll.-form');

        this.listenTo(this, 'change:mode', this.onChangeMode);
        this.listenTo(this, 'change:editor', this.onChangeEditor);
        this.listenTo(this, 'update:footer', this.updateFooter);
        this.$layoutBody.on('scroll', () => this.onScroll());
    }

    onDestroy() {
        this.$layoutBody.off('scroll');
    }

    /**
     * Trigger editor:action event.
     *
     * @param {Object} e
     */
    onClickButton(e) {
        e.preventDefault();
        const action = this.$(e.currentTarget).attr('data-action');

        if (action) {
            this.trigger('click:button', { action });
        }
    }

    /**
     * Shows either the preview or the editor.
     *
     * @param {Object} e
     */
    showColumn(e) {
        const $btn = this.$(e.currentTarget);
        const col = $btn.attr('data-col');
        const hideCol = col === 'left' ? 'right' : 'left';

        // Add 'active' class to the button
        this.$('.editor--col--btn.active').removeClass('active');
        $btn.addClass('active');

        // Show only one column
        this.$(`.-${hideCol}`).removeClass('-show');
        this.$(`.-${col}`).addClass('-show');
    }

    /**
     * Editor mode has changed.
     *
     * @param {Object} data
     */
    onChangeMode(data) {
        this.options.mode = data.mode;

        if (data.mode !== 'normal') {
            // Make the editor visible by scrolling back
            this.$layoutBody.scrollTop(0);

            // Change WYSIWYG bar width
            this.ui.bar.css('width', 'initial');
            return this.ui.bar.removeClass('-fixed');
        }
    }

    /**
     * Text in the editor was changed.
     *
     * @param {Object} data
     */
    onChangeEditor(data) {
        this.ui.preview.html(data.content);

        if (!this.isFirst) {
            this.isFirst = true;
            return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.trigger('components/editor', 'render', this);
        }

        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.trigger('components/editor', 'preview:refresh', data);
    }

    /**
     * Update footer.
     *
     * @param {Object} data
     */
    updateFooter(data) {
        this.$footer.html(__WEBPACK_IMPORTED_MODULE_2_underscore___default.a.i18n('Line of', data));
    }

    /**
     * Scroll position of the document has changed.
     */
    onScroll() {
        // If editor mode is not 'normal' mode, don't do anything
        if (this.options.mode !== 'normal') {
            return;
        }

        // Fix WYSIWYG bar on top
        if (this.$layoutBody.scrollTop() > this.ui.bar.offset().top) {
            this.ui.bar.css('width', this.$layoutBody.width());
            return this.ui.bar.addClass('-fixed');
        }

        this.ui.bar.css('width', 'initial');
        return this.ui.bar.removeClass('-fixed');
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1172 */
/***/ (function(module, exports) {

module.exports = "<div class=\"editor--bar dropdown text-center\">\n    <div class=\"btn-group editor--btns\">\n        <span data-action=\"bold\" data-state=\"strong\" class=\"btn btn--wysiwyg\">\n            <i class=\"icon-bold\"></i>\n        </span>\n        <span data-action=\"italic\" data-state=\"em\" class=\"btn btn--wysiwyg\">\n            <i class=\"icon-italic\"></i>\n        </span>\n        <span data-action=\"heading\" data-state=\"header\" class=\"btn btn--wysiwyg\">\n            <i class=\"icon-font\"></i>\n        </span>\n    </div>\n\n    <div class=\"btn-group editor--btns\">\n        <span data-action=\"link\" data-state=\"link\" class=\"btn btn--wysiwyg\">\n            <i class=\"icon-globe\"></i>\n        </span>\n        <span data-action=\"checkbox\" class=\"btn btn--wysiwyg\">\n            <i class=\"icon-check\"></i>\n        </span>\n        <span data-action=\"attachment\" class=\"btn btn--wysiwyg\">\n            <i class=\"icon-picture\"></i>\n        </span>\n        <span data-action=\"code\" data-state=\"comment\" class=\"btn btn--wysiwyg\">\n            <i class=\"icon-code\"></i>\n        </span>\n    </div>\n\n    <div class=\"btn-group editor--btns\">\n        <span data-action=\"numberedList\" data-state=\"ordered-list\" class=\"btn btn--wysiwyg\">\n            <i class=\"icon-list-numbered\"></i>\n        </span>\n        <span data-action=\"list\" data-state=\"unordered-list\" class=\"btn btn--wysiwyg\">\n            <i class=\"icon-list-bullet\"></i>\n        </span>\n        <span data-action=\"hr\" data-state=\"hr\" class=\"btn btn--wysiwyg\">\n            <i class=\"icon-minus\"></i>\n        </span>\n    </div>\n\n    <div class=\"btn-group editor--btns\">\n        <span data-action=\"undo\" class=\"btn btn--wysiwyg\">\n            <i class=\"icon-reply\"></i>\n        </span>\n        <span data-action=\"redo\" class=\"btn btn--wysiwyg\">\n            <i class=\"icon-share\"></i>\n        </span>\n    </div>\n</div>\n\n<div class=\"btn-group btn-group-justified hidden -show\">\n    <div class=\"btn-group\">\n        <button data-col=\"left\" class=\"btn btn-default active editor--col--btn\">\n            {{_.i18n('Editor')}}\n        </button>\n    </div>\n    <div class=\"btn-group\">\n        <button data-col=\"right\" class=\"btn btn-default editor--col--btn\">\n            {{_.i18n('Preview')}}\n        </button>\n    </div>\n</div>\n\n<div class=\"editor--row\">\n    <div class=\"editor--layout -left -show\">\n        <textarea class=\"editor--input\" id=\"editor--input\" name=\"content\">{=_.cleanXSS(content)}</textarea>\n    </div>\n\n    <div class=\"editor--layout -right\">\n        <div class=\"editor--preview\">\n            <div id=\"wmd-preview\" class=\"editor--preview--block\"></div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 1173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_codemirror__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_codemirror___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_codemirror__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_codemirror_mode_gfm_gfm__ = __webpack_require__(1174);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_codemirror_mode_gfm_gfm___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_codemirror_mode_gfm_gfm__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_codemirror_mode_markdown_markdown__ = __webpack_require__(384);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_codemirror_mode_markdown_markdown___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_codemirror_mode_markdown_markdown__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_codemirror_addon_edit_continuelist__ = __webpack_require__(1177);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_codemirror_addon_edit_continuelist___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_codemirror_addon_edit_continuelist__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_codemirror_addon_mode_overlay__ = __webpack_require__(385);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_codemirror_addon_mode_overlay___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_codemirror_addon_mode_overlay__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_codemirror_keymap_vim__ = __webpack_require__(1178);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_codemirror_keymap_vim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_codemirror_keymap_vim__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_codemirror_keymap_emacs__ = __webpack_require__(1180);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_codemirror_keymap_emacs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_codemirror_keymap_emacs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_codemirror_keymap_sublime__ = __webpack_require__(1181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_codemirror_keymap_sublime___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_codemirror_keymap_sublime__);
/**
 * @module components/codemirror/Editor
 */











/**
 * Codemirror class.
 * Configure Codemirror and add extra keybindings.
 *
 * @class
 * @license MPL-2.0
 */
class Codemirror {

    /**
     * Keybindings for Codemirror.
     *
     * @prop {Object}
     */
    get extraKeys() {
        return {
            'Cmd-B': this.boldAction,
            'Ctrl-B': this.boldAction,

            'Cmd-I': this.italicAction,
            'Ctrl-I': this.italicAction,

            'Cmd-H': this.headingAction,
            'Ctrl-H': this.headingAction,

            'Cmd-L': this.linkAction,
            'Ctrl-L': this.linkAction,

            'Cmd-K': this.codeAction,
            'Ctrl-K': this.codeAction,

            'Cmd-O': this.numberedListAction,
            'Ctrl-O': this.numberedListAction,

            'Cmd-U': this.listAction,
            'Ctrl-U': this.listAction,

            // Ctrl+d - divider
            'Cmd-G': this.attachmentAction,
            'Ctrl-G': this.attachmentAction,

            // Ctrl+d - divider
            'Cmd-D': this.hrAction,
            'Ctrl-D': this.hrAction,

            // Ctrl+. - indent line
            'Ctrl-.': 'indentMore',
            'Shift-Ctrl-.': 'indentLess',
            'Cmd-.': 'indentMore',
            'Shift-Cmd-.': 'indentLess',

            Enter: 'newlineAndIndentContinueMarkdownList'
        };
    }

    /**
     * Regular expressions for Markdown elements.
     *
     * @prop {Object}
     */
    get marks() {
        return {
            strong: {
                tag: ['**', '__'],
                start: /(\*\*|__)(?![\s\S]*(\*\*|__))/,
                end: /(\*\*|__)/
            },
            em: {
                tag: ['*', '_'],
                start: /(\*|_)(?![\s\S]*(\*|_))/,
                end: /(\*|_)/
            },
            strikethrough: {
                tag: ['~~'],
                start: /(\*\*|~~)(?![\s\S]*(\*\*|~~))/,
                end: /(\*\*|~~)/
            },
            code: {
                tag: '```\r\n',
                tagEnd: '\r\n```'
            },
            checkbox: {
                tag: '[ ] ',
                tagEnd: '\r\n'
            },
            'unordered-list': {
                replace: /^(\s*)(\*|\-|\+)\s+/, // eslint-disable-line
                tag: '* '
            },
            'ordered-list': {
                replace: /^(\s*)\d+\.\s+/,
                tag: '1. '
            }
        };
    }

    constructor(options) {
        this.options = options;

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.bindAll(this, 'boldAction', 'italicAction', 'headingAction', 'linkAction', 'codeAction', 'checkboxAction', 'numberedListAction', 'listAction', 'attachmentAction', 'hrAction');
    }

    /**
     * Initialize Codemirror editor.
     */
    init() {
        const $input = document.getElementById('editor--input');

        /**
         * Codemirror instance.
         *
         * @prop {Object}
         */
        this.instance = __WEBPACK_IMPORTED_MODULE_2_codemirror___default.a.fromTextArea($input, {
            mode: {
                name: 'gfm',
                gitHubSpice: false
            },
            keyMap: this.options.configs.textEditor || 'default',
            lineNumbers: this.options.configs.lineNumbers || false,
            matchBrackets: true,
            lineWrapping: true,
            indentUnit: parseInt(this.options.configs.indentUnit, 10),
            extraKeys: this.extraKeys,
            inputStyle: 'contenteditable',
            spellcheck: true
        });
    }

    /**
     * Return the starting and ending position of the currently active text.
     *
     * @returns {Object}
     */
    getCursor() {
        return {
            start: this.instance.getCursor('start'),
            end: this.instance.getCursor('end')
        };
    }

    /**
     * Return the state of the element under the cursor.
     *
     * @param {Number} pos=this.instance.getCursor'start'
     * @returns {Array}
     */
    getState(pos = this.instance.getCursor('start')) {
        const state = this.instance.getTokenAt(pos);

        if (!state.type) {
            return [];
        }

        state.type = state.type.split(' ');

        if (__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.indexOf(state.type, 'variable-2') !== -1) {
            if (/^\s*\d+\.\s/.test(this.instance.getLine(pos.line))) {
                state.type.push('ordered-list');
            } else {
                state.type.push('unordered-list');
            }
        }

        return state.type;
    }

    /**
     * Make the selected text strong.
     */
    boldAction() {
        this.toggleBlock('strong');
    }

    /**
     * Make the selected text italicized.
     */
    italicAction() {
        this.toggleBlock('em');
    }

    /**
     * Toggle a Markdown block.
     *
     * @param {String} type - strong, em, etc...
     */
    toggleBlock(type) {
        const stat = this.getState();
        let cursor;

        // The text is already [strong|italic|etc]
        if (__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.indexOf(stat, type) !== -1) {
            cursor = this.removeMarkdownTag(type);
        } else {
            cursor = this.addMarkdownTag(type);
        }

        this.instance.setSelection(cursor.start, cursor.end);
        this.instance.focus();
    }

    /**
     * Wrap selected text with a Markdown tag.
     *
     * @param {String} type - strong, em, etc...
     * @returns {Object} cursor positions
     */
    addMarkdownTag(type) {
        const { start, end } = this.getCursor();
        let text = this.instance.getSelection();

        for (let i = 0; i < this.marks[type].tag.length - 1; i++) {
            text = text.split(this.marks[type].tag[i]).join('');
        }

        this.instance.replaceSelection(this.marks[type].tag[0] + text + this.marks[type].tag[0]);
        start.ch += this.marks[type].tag[0].length;
        end.ch = start.ch + text.length;
        return { start, end };
    }

    /**
     * Remove markdown tags from the text under cursor.
     *
     * @param {String} type - strong, em, etc...
     * @returns {Object} cursor positions
     */
    removeMarkdownTag(type) {
        const { start, end } = this.getCursor();
        const text = this.instance.getLine(start.line);
        let startText = text.slice(0, start.ch);
        let endText = text.slice(start.ch);

        // Remove Markdown tags from the text
        startText = startText.replace(this.marks[type].start, '');
        endText = endText.replace(this.marks[type].end, '');

        this.replaceRange(startText + endText, start.line);
        start.ch -= this.marks[type].tag[0].length;
        end.ch -= this.marks[type].tag[0].length;
        return { start, end };
    }

    /**
     * Create headings.
     */
    headingAction() {
        const { start, end } = this.getCursor();

        for (let i = start.line; i <= end.line; i++) {
            this.toggleHeading(i);
        }
    }

    /**
     * Convert text on a line to a headline.
     *
     * @param {Number} i - line number
     */
    toggleHeading(i) {
        let text = this.instance.getLine(i);
        const headingLvl = text.search(/[^#]/);

        // Create a default headline text if there is no text on the line
        if (headingLvl === -1) {
            text = '# Heading';
            this.replaceRange(text, i);
            return this.instance.setSelection({ line: i, ch: 2 }, { line: i, ch: 9 });
        }

        // Increase headline level up to 6th
        if (headingLvl < 6) {
            text = headingLvl > 0 ? text.substr(headingLvl + 1) : text;
            text = `${new Array(headingLvl + 2).join('#')} ${text}`;
        } else {
            text = text.substr(headingLvl + 1);
        }

        this.replaceRange(text, i);
    }

    /**
     * Replace text on a line.
     *
     * @param {String} text
     * @param {Number} line
     */
    replaceRange(text, line) {
        this.instance.replaceRange(text, { line, ch: 0 }, { line, ch: 99999999999999 });
        this.instance.focus();
    }

    /**
     * Show a dialog to attach images or files.
     */
    attachmentAction() {
        const dialog = __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('components/fileDialog', 'show', {
            model: this.options.model
        });

        if (!dialog) {
            return;
        }

        return dialog.then(text => {
            if (text && text.length) {
                this.instance.replaceSelection(text, true);
                this.instance.focus();
            }
        });
    }

    /**
     * Show a link dialog.
     */
    linkAction() {
        const dialog = __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('components/linkDialog', 'show');

        if (!dialog) {
            return;
        }

        return dialog.then(link => {
            if (!link || !link.length) {
                return;
            }

            const cursor = this.instance.getCursor('start');
            const text = this.instance.getSelection() || 'Link';

            this.instance.replaceSelection(`[${text}](${link})`);
            this.instance.setSelection({ line: cursor.line, ch: cursor.ch + 1 }, { line: cursor.line, ch: cursor.ch + text.length + 1 });
            this.instance.focus();
        });
    }

    /**
     * Create a divider.
     */
    hrAction() {
        const start = this.instance.getCursor('start');
        this.instance.replaceSelection('\r\r-----\r\r');

        start.line += 4;
        start.ch = 0;
        this.instance.setSelection(start, start);
        this.instance.focus();
    }

    /**
     * Create a code block.
     */
    codeAction() {
        const state = this.getState();
        const { start, end } = this.getCursor();

        // Do nothing if the text under cursor is already a code block
        if (__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.indexOf(state, 'code') !== -1) {
            return;
        }

        const text = this.instance.getSelection();
        this.instance.replaceSelection(this.marks.code.tag + text + this.marks.code.tagEnd);

        this.instance.setSelection({ line: start.line + 1, ch: start.ch }, { line: end.line + 1, ch: end.ch });
        this.instance.focus();
    }

    /**
     * Create a checkbox
     */
    checkboxAction() {
        // const state = this.getState();
        const { start, end } = this.getCursor();

        const text = this.instance.getSelection();
        this.instance.replaceSelection(this.marks.checkbox.tag + text + this.marks.checkbox.tagEnd);

        this.instance.setSelection({ line: start.line + 1, ch: start.ch }, { line: end.line + 1, ch: end.ch });
        this.instance.focus();
    }

    /**
     * Convert selected text to unordered list.
     */
    listAction() {
        this.toggleLists('unordered-list');
    }

    /**
     * Convert selected text to ordered list.
     */
    numberedListAction() {
        this.toggleLists('ordered-list', 1);
    }

    /**
     * Convert several selected lines to ordered or unordered lists.
     *
     * @param {String} type - unordered-list|ordered-list
     * @param {Number} order
     */
    toggleLists(type, order) {
        const { start, end } = this.getCursor();
        const state = this.getState();

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(new Array(end.line - start.line + 1), (val, i) => {
            const line = start.line + i;
            this.toggleList({ type, line, state, order });

            if (order) {
                order++; // eslint-disable-line
            }
        });
    }

    /**
     * Convert text on a line to an ordered or unordered list.
     *
     * @param {Object} data
     */
    toggleList(data) {
        let text = this.instance.getLine(data.line);

        // If it is a list, convert it to normal text
        if (__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.indexOf(data.state, data.type) !== -1) {
            text = text.replace(this.marks[data.type].replace, '$1');
        } else if (data.order) {
            text = `${data.order}. ${text}`;
        } else {
            text = this.marks[data.type].tag + text;
        }

        this.replaceRange(text, data.line);
    }

    /**
     * Redo the last action in Codemirror.
     */
    redoAction() {
        this.instance.redo();
    }

    /**
     * Undo the last action in Codemirror.
     */
    undoAction() {
        this.instance.undo();
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Codemirror;


/***/ }),
/* 1174 */
/***/ (function(module, exports, __webpack_require__) {

// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE

(function(mod) {
  if (true) // CommonJS
    mod(__webpack_require__(32), __webpack_require__(384), __webpack_require__(385));
  else if (typeof define == "function" && define.amd) // AMD
    define(["../../lib/codemirror", "../markdown/markdown", "../../addon/mode/overlay"], mod);
  else // Plain browser env
    mod(CodeMirror);
})(function(CodeMirror) {
"use strict";

var urlRE = /^((?:(?:aaas?|about|acap|adiumxtra|af[ps]|aim|apt|attachment|aw|beshare|bitcoin|bolo|callto|cap|chrome(?:-extension)?|cid|coap|com-eventbrite-attendee|content|crid|cvs|data|dav|dict|dlna-(?:playcontainer|playsingle)|dns|doi|dtn|dvb|ed2k|facetime|feed|file|finger|fish|ftp|geo|gg|git|gizmoproject|go|gopher|gtalk|h323|hcp|https?|iax|icap|icon|im|imap|info|ipn|ipp|irc[6s]?|iris(?:\.beep|\.lwz|\.xpc|\.xpcs)?|itms|jar|javascript|jms|keyparc|lastfm|ldaps?|magnet|mailto|maps|market|message|mid|mms|ms-help|msnim|msrps?|mtqp|mumble|mupdate|mvn|news|nfs|nih?|nntp|notes|oid|opaquelocktoken|palm|paparazzi|platform|pop|pres|proxy|psyc|query|res(?:ource)?|rmi|rsync|rtmp|rtsp|secondlife|service|session|sftp|sgn|shttp|sieve|sips?|skype|sm[bs]|snmp|soap\.beeps?|soldat|spotify|ssh|steam|svn|tag|teamspeak|tel(?:net)?|tftp|things|thismessage|tip|tn3270|tv|udp|unreal|urn|ut2004|vemmi|ventrilo|view-source|webcal|wss?|wtai|wyciwyg|xcon(?:-userid)?|xfire|xmlrpc\.beeps?|xmpp|xri|ymsgr|z39\.50[rs]?):(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]|\([^\s()<>]*\))+(?:\([^\s()<>]*\)|[^\s`*!()\[\]{};:'".,<>?«»“”‘’]))/i

CodeMirror.defineMode("gfm", function(config, modeConfig) {
  var codeDepth = 0;
  function blankLine(state) {
    state.code = false;
    return null;
  }
  var gfmOverlay = {
    startState: function() {
      return {
        code: false,
        codeBlock: false,
        ateSpace: false
      };
    },
    copyState: function(s) {
      return {
        code: s.code,
        codeBlock: s.codeBlock,
        ateSpace: s.ateSpace
      };
    },
    token: function(stream, state) {
      state.combineTokens = null;

      // Hack to prevent formatting override inside code blocks (block and inline)
      if (state.codeBlock) {
        if (stream.match(/^```+/)) {
          state.codeBlock = false;
          return null;
        }
        stream.skipToEnd();
        return null;
      }
      if (stream.sol()) {
        state.code = false;
      }
      if (stream.sol() && stream.match(/^```+/)) {
        stream.skipToEnd();
        state.codeBlock = true;
        return null;
      }
      // If this block is changed, it may need to be updated in Markdown mode
      if (stream.peek() === '`') {
        stream.next();
        var before = stream.pos;
        stream.eatWhile('`');
        var difference = 1 + stream.pos - before;
        if (!state.code) {
          codeDepth = difference;
          state.code = true;
        } else {
          if (difference === codeDepth) { // Must be exact
            state.code = false;
          }
        }
        return null;
      } else if (state.code) {
        stream.next();
        return null;
      }
      // Check if space. If so, links can be formatted later on
      if (stream.eatSpace()) {
        state.ateSpace = true;
        return null;
      }
      if (stream.sol() || state.ateSpace) {
        state.ateSpace = false;
        if (modeConfig.gitHubSpice !== false) {
          if(stream.match(/^(?:[a-zA-Z0-9\-_]+\/)?(?:[a-zA-Z0-9\-_]+@)?(?=.{0,6}\d)(?:[a-f0-9]{7,40}\b)/)) {
            // User/Project@SHA
            // User@SHA
            // SHA
            state.combineTokens = true;
            return "link";
          } else if (stream.match(/^(?:[a-zA-Z0-9\-_]+\/)?(?:[a-zA-Z0-9\-_]+)?#[0-9]+\b/)) {
            // User/Project#Num
            // User#Num
            // #Num
            state.combineTokens = true;
            return "link";
          }
        }
      }
      if (stream.match(urlRE) &&
          stream.string.slice(stream.start - 2, stream.start) != "](" &&
          (stream.start == 0 || /\W/.test(stream.string.charAt(stream.start - 1)))) {
        // URLs
        // Taken from http://daringfireball.net/2010/07/improved_regex_for_matching_urls
        // And then (issue #1160) simplified to make it not crash the Chrome Regexp engine
        // And then limited url schemes to the CommonMark list, so foo:bar isn't matched as a URL
        state.combineTokens = true;
        return "link";
      }
      stream.next();
      return null;
    },
    blankLine: blankLine
  };

  var markdownConfig = {
    taskLists: true,
    strikethrough: true,
    emoji: true
  };
  for (var attr in modeConfig) {
    markdownConfig[attr] = modeConfig[attr];
  }
  markdownConfig.name = "markdown";
  return CodeMirror.overlayMode(CodeMirror.getMode(config, markdownConfig), gfmOverlay);

}, "markdown");

  CodeMirror.defineMIME("text/x-gfm", "gfm");
});


/***/ }),
/* 1175 */
/***/ (function(module, exports, __webpack_require__) {

// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE

(function(mod) {
  if (true) // CommonJS
    mod(__webpack_require__(32));
  else if (typeof define == "function" && define.amd) // AMD
    define(["../../lib/codemirror"], mod);
  else // Plain browser env
    mod(CodeMirror);
})(function(CodeMirror) {
"use strict";

var htmlConfig = {
  autoSelfClosers: {'area': true, 'base': true, 'br': true, 'col': true, 'command': true,
                    'embed': true, 'frame': true, 'hr': true, 'img': true, 'input': true,
                    'keygen': true, 'link': true, 'meta': true, 'param': true, 'source': true,
                    'track': true, 'wbr': true, 'menuitem': true},
  implicitlyClosed: {'dd': true, 'li': true, 'optgroup': true, 'option': true, 'p': true,
                     'rp': true, 'rt': true, 'tbody': true, 'td': true, 'tfoot': true,
                     'th': true, 'tr': true},
  contextGrabbers: {
    'dd': {'dd': true, 'dt': true},
    'dt': {'dd': true, 'dt': true},
    'li': {'li': true},
    'option': {'option': true, 'optgroup': true},
    'optgroup': {'optgroup': true},
    'p': {'address': true, 'article': true, 'aside': true, 'blockquote': true, 'dir': true,
          'div': true, 'dl': true, 'fieldset': true, 'footer': true, 'form': true,
          'h1': true, 'h2': true, 'h3': true, 'h4': true, 'h5': true, 'h6': true,
          'header': true, 'hgroup': true, 'hr': true, 'menu': true, 'nav': true, 'ol': true,
          'p': true, 'pre': true, 'section': true, 'table': true, 'ul': true},
    'rp': {'rp': true, 'rt': true},
    'rt': {'rp': true, 'rt': true},
    'tbody': {'tbody': true, 'tfoot': true},
    'td': {'td': true, 'th': true},
    'tfoot': {'tbody': true},
    'th': {'td': true, 'th': true},
    'thead': {'tbody': true, 'tfoot': true},
    'tr': {'tr': true}
  },
  doNotIndent: {"pre": true},
  allowUnquoted: true,
  allowMissing: true,
  caseFold: true
}

var xmlConfig = {
  autoSelfClosers: {},
  implicitlyClosed: {},
  contextGrabbers: {},
  doNotIndent: {},
  allowUnquoted: false,
  allowMissing: false,
  allowMissingTagName: false,
  caseFold: false
}

CodeMirror.defineMode("xml", function(editorConf, config_) {
  var indentUnit = editorConf.indentUnit
  var config = {}
  var defaults = config_.htmlMode ? htmlConfig : xmlConfig
  for (var prop in defaults) config[prop] = defaults[prop]
  for (var prop in config_) config[prop] = config_[prop]

  // Return variables for tokenizers
  var type, setStyle;

  function inText(stream, state) {
    function chain(parser) {
      state.tokenize = parser;
      return parser(stream, state);
    }

    var ch = stream.next();
    if (ch == "<") {
      if (stream.eat("!")) {
        if (stream.eat("[")) {
          if (stream.match("CDATA[")) return chain(inBlock("atom", "]]>"));
          else return null;
        } else if (stream.match("--")) {
          return chain(inBlock("comment", "-->"));
        } else if (stream.match("DOCTYPE", true, true)) {
          stream.eatWhile(/[\w\._\-]/);
          return chain(doctype(1));
        } else {
          return null;
        }
      } else if (stream.eat("?")) {
        stream.eatWhile(/[\w\._\-]/);
        state.tokenize = inBlock("meta", "?>");
        return "meta";
      } else {
        type = stream.eat("/") ? "closeTag" : "openTag";
        state.tokenize = inTag;
        return "tag bracket";
      }
    } else if (ch == "&") {
      var ok;
      if (stream.eat("#")) {
        if (stream.eat("x")) {
          ok = stream.eatWhile(/[a-fA-F\d]/) && stream.eat(";");
        } else {
          ok = stream.eatWhile(/[\d]/) && stream.eat(";");
        }
      } else {
        ok = stream.eatWhile(/[\w\.\-:]/) && stream.eat(";");
      }
      return ok ? "atom" : "error";
    } else {
      stream.eatWhile(/[^&<]/);
      return null;
    }
  }
  inText.isInText = true;

  function inTag(stream, state) {
    var ch = stream.next();
    if (ch == ">" || (ch == "/" && stream.eat(">"))) {
      state.tokenize = inText;
      type = ch == ">" ? "endTag" : "selfcloseTag";
      return "tag bracket";
    } else if (ch == "=") {
      type = "equals";
      return null;
    } else if (ch == "<") {
      state.tokenize = inText;
      state.state = baseState;
      state.tagName = state.tagStart = null;
      var next = state.tokenize(stream, state);
      return next ? next + " tag error" : "tag error";
    } else if (/[\'\"]/.test(ch)) {
      state.tokenize = inAttribute(ch);
      state.stringStartCol = stream.column();
      return state.tokenize(stream, state);
    } else {
      stream.match(/^[^\s\u00a0=<>\"\']*[^\s\u00a0=<>\"\'\/]/);
      return "word";
    }
  }

  function inAttribute(quote) {
    var closure = function(stream, state) {
      while (!stream.eol()) {
        if (stream.next() == quote) {
          state.tokenize = inTag;
          break;
        }
      }
      return "string";
    };
    closure.isInAttribute = true;
    return closure;
  }

  function inBlock(style, terminator) {
    return function(stream, state) {
      while (!stream.eol()) {
        if (stream.match(terminator)) {
          state.tokenize = inText;
          break;
        }
        stream.next();
      }
      return style;
    }
  }

  function doctype(depth) {
    return function(stream, state) {
      var ch;
      while ((ch = stream.next()) != null) {
        if (ch == "<") {
          state.tokenize = doctype(depth + 1);
          return state.tokenize(stream, state);
        } else if (ch == ">") {
          if (depth == 1) {
            state.tokenize = inText;
            break;
          } else {
            state.tokenize = doctype(depth - 1);
            return state.tokenize(stream, state);
          }
        }
      }
      return "meta";
    };
  }

  function Context(state, tagName, startOfLine) {
    this.prev = state.context;
    this.tagName = tagName;
    this.indent = state.indented;
    this.startOfLine = startOfLine;
    if (config.doNotIndent.hasOwnProperty(tagName) || (state.context && state.context.noIndent))
      this.noIndent = true;
  }
  function popContext(state) {
    if (state.context) state.context = state.context.prev;
  }
  function maybePopContext(state, nextTagName) {
    var parentTagName;
    while (true) {
      if (!state.context) {
        return;
      }
      parentTagName = state.context.tagName;
      if (!config.contextGrabbers.hasOwnProperty(parentTagName) ||
          !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {
        return;
      }
      popContext(state);
    }
  }

  function baseState(type, stream, state) {
    if (type == "openTag") {
      state.tagStart = stream.column();
      return tagNameState;
    } else if (type == "closeTag") {
      return closeTagNameState;
    } else {
      return baseState;
    }
  }
  function tagNameState(type, stream, state) {
    if (type == "word") {
      state.tagName = stream.current();
      setStyle = "tag";
      return attrState;
    } else if (config.allowMissingTagName && type == "endTag") {
      setStyle = "tag bracket";
      return attrState(type, stream, state);
    } else {
      setStyle = "error";
      return tagNameState;
    }
  }
  function closeTagNameState(type, stream, state) {
    if (type == "word") {
      var tagName = stream.current();
      if (state.context && state.context.tagName != tagName &&
          config.implicitlyClosed.hasOwnProperty(state.context.tagName))
        popContext(state);
      if ((state.context && state.context.tagName == tagName) || config.matchClosing === false) {
        setStyle = "tag";
        return closeState;
      } else {
        setStyle = "tag error";
        return closeStateErr;
      }
    } else if (config.allowMissingTagName && type == "endTag") {
      setStyle = "tag bracket";
      return closeState(type, stream, state);
    } else {
      setStyle = "error";
      return closeStateErr;
    }
  }

  function closeState(type, _stream, state) {
    if (type != "endTag") {
      setStyle = "error";
      return closeState;
    }
    popContext(state);
    return baseState;
  }
  function closeStateErr(type, stream, state) {
    setStyle = "error";
    return closeState(type, stream, state);
  }

  function attrState(type, _stream, state) {
    if (type == "word") {
      setStyle = "attribute";
      return attrEqState;
    } else if (type == "endTag" || type == "selfcloseTag") {
      var tagName = state.tagName, tagStart = state.tagStart;
      state.tagName = state.tagStart = null;
      if (type == "selfcloseTag" ||
          config.autoSelfClosers.hasOwnProperty(tagName)) {
        maybePopContext(state, tagName);
      } else {
        maybePopContext(state, tagName);
        state.context = new Context(state, tagName, tagStart == state.indented);
      }
      return baseState;
    }
    setStyle = "error";
    return attrState;
  }
  function attrEqState(type, stream, state) {
    if (type == "equals") return attrValueState;
    if (!config.allowMissing) setStyle = "error";
    return attrState(type, stream, state);
  }
  function attrValueState(type, stream, state) {
    if (type == "string") return attrContinuedState;
    if (type == "word" && config.allowUnquoted) {setStyle = "string"; return attrState;}
    setStyle = "error";
    return attrState(type, stream, state);
  }
  function attrContinuedState(type, stream, state) {
    if (type == "string") return attrContinuedState;
    return attrState(type, stream, state);
  }

  return {
    startState: function(baseIndent) {
      var state = {tokenize: inText,
                   state: baseState,
                   indented: baseIndent || 0,
                   tagName: null, tagStart: null,
                   context: null}
      if (baseIndent != null) state.baseIndent = baseIndent
      return state
    },

    token: function(stream, state) {
      if (!state.tagName && stream.sol())
        state.indented = stream.indentation();

      if (stream.eatSpace()) return null;
      type = null;
      var style = state.tokenize(stream, state);
      if ((style || type) && style != "comment") {
        setStyle = null;
        state.state = state.state(type || style, stream, state);
        if (setStyle)
          style = setStyle == "error" ? style + " error" : setStyle;
      }
      return style;
    },

    indent: function(state, textAfter, fullLine) {
      var context = state.context;
      // Indent multi-line strings (e.g. css).
      if (state.tokenize.isInAttribute) {
        if (state.tagStart == state.indented)
          return state.stringStartCol + 1;
        else
          return state.indented + indentUnit;
      }
      if (context && context.noIndent) return CodeMirror.Pass;
      if (state.tokenize != inTag && state.tokenize != inText)
        return fullLine ? fullLine.match(/^(\s*)/)[0].length : 0;
      // Indent the starts of attribute names.
      if (state.tagName) {
        if (config.multilineTagIndentPastTag !== false)
          return state.tagStart + state.tagName.length + 2;
        else
          return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);
      }
      if (config.alignCDATA && /<!\[CDATA\[/.test(textAfter)) return 0;
      var tagAfter = textAfter && /^<(\/)?([\w_:\.-]*)/.exec(textAfter);
      if (tagAfter && tagAfter[1]) { // Closing tag spotted
        while (context) {
          if (context.tagName == tagAfter[2]) {
            context = context.prev;
            break;
          } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {
            context = context.prev;
          } else {
            break;
          }
        }
      } else if (tagAfter) { // Opening tag spotted
        while (context) {
          var grabbers = config.contextGrabbers[context.tagName];
          if (grabbers && grabbers.hasOwnProperty(tagAfter[2]))
            context = context.prev;
          else
            break;
        }
      }
      while (context && context.prev && !context.startOfLine)
        context = context.prev;
      if (context) return context.indent + indentUnit;
      else return state.baseIndent || 0;
    },

    electricInput: /<\/[\s\w:]+>$/,
    blockCommentStart: "<!--",
    blockCommentEnd: "-->",

    configuration: config.htmlMode ? "html" : "xml",
    helperType: config.htmlMode ? "html" : "xml",

    skipAttribute: function(state) {
      if (state.state == attrValueState)
        state.state = attrState
    }
  };
});

CodeMirror.defineMIME("text/xml", "xml");
CodeMirror.defineMIME("application/xml", "xml");
if (!CodeMirror.mimeModes.hasOwnProperty("text/html"))
  CodeMirror.defineMIME("text/html", {name: "xml", htmlMode: true});

});


/***/ }),
/* 1176 */
/***/ (function(module, exports, __webpack_require__) {

// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE

(function(mod) {
  if (true) // CommonJS
    mod(__webpack_require__(32));
  else if (typeof define == "function" && define.amd) // AMD
    define(["../lib/codemirror"], mod);
  else // Plain browser env
    mod(CodeMirror);
})(function(CodeMirror) {
  "use strict";

  CodeMirror.modeInfo = [
    {name: "APL", mime: "text/apl", mode: "apl", ext: ["dyalog", "apl"]},
    {name: "PGP", mimes: ["application/pgp", "application/pgp-encrypted", "application/pgp-keys", "application/pgp-signature"], mode: "asciiarmor", ext: ["asc", "pgp", "sig"]},
    {name: "ASN.1", mime: "text/x-ttcn-asn", mode: "asn.1", ext: ["asn", "asn1"]},
    {name: "Asterisk", mime: "text/x-asterisk", mode: "asterisk", file: /^extensions\.conf$/i},
    {name: "Brainfuck", mime: "text/x-brainfuck", mode: "brainfuck", ext: ["b", "bf"]},
    {name: "C", mime: "text/x-csrc", mode: "clike", ext: ["c", "h", "ino"]},
    {name: "C++", mime: "text/x-c++src", mode: "clike", ext: ["cpp", "c++", "cc", "cxx", "hpp", "h++", "hh", "hxx"], alias: ["cpp"]},
    {name: "Cobol", mime: "text/x-cobol", mode: "cobol", ext: ["cob", "cpy"]},
    {name: "C#", mime: "text/x-csharp", mode: "clike", ext: ["cs"], alias: ["csharp"]},
    {name: "Clojure", mime: "text/x-clojure", mode: "clojure", ext: ["clj", "cljc", "cljx"]},
    {name: "ClojureScript", mime: "text/x-clojurescript", mode: "clojure", ext: ["cljs"]},
    {name: "Closure Stylesheets (GSS)", mime: "text/x-gss", mode: "css", ext: ["gss"]},
    {name: "CMake", mime: "text/x-cmake", mode: "cmake", ext: ["cmake", "cmake.in"], file: /^CMakeLists.txt$/},
    {name: "CoffeeScript", mimes: ["application/vnd.coffeescript", "text/coffeescript", "text/x-coffeescript"], mode: "coffeescript", ext: ["coffee"], alias: ["coffee", "coffee-script"]},
    {name: "Common Lisp", mime: "text/x-common-lisp", mode: "commonlisp", ext: ["cl", "lisp", "el"], alias: ["lisp"]},
    {name: "Cypher", mime: "application/x-cypher-query", mode: "cypher", ext: ["cyp", "cypher"]},
    {name: "Cython", mime: "text/x-cython", mode: "python", ext: ["pyx", "pxd", "pxi"]},
    {name: "Crystal", mime: "text/x-crystal", mode: "crystal", ext: ["cr"]},
    {name: "CSS", mime: "text/css", mode: "css", ext: ["css"]},
    {name: "CQL", mime: "text/x-cassandra", mode: "sql", ext: ["cql"]},
    {name: "D", mime: "text/x-d", mode: "d", ext: ["d"]},
    {name: "Dart", mimes: ["application/dart", "text/x-dart"], mode: "dart", ext: ["dart"]},
    {name: "diff", mime: "text/x-diff", mode: "diff", ext: ["diff", "patch"]},
    {name: "Django", mime: "text/x-django", mode: "django"},
    {name: "Dockerfile", mime: "text/x-dockerfile", mode: "dockerfile", file: /^Dockerfile$/},
    {name: "DTD", mime: "application/xml-dtd", mode: "dtd", ext: ["dtd"]},
    {name: "Dylan", mime: "text/x-dylan", mode: "dylan", ext: ["dylan", "dyl", "intr"]},
    {name: "EBNF", mime: "text/x-ebnf", mode: "ebnf"},
    {name: "ECL", mime: "text/x-ecl", mode: "ecl", ext: ["ecl"]},
    {name: "edn", mime: "application/edn", mode: "clojure", ext: ["edn"]},
    {name: "Eiffel", mime: "text/x-eiffel", mode: "eiffel", ext: ["e"]},
    {name: "Elm", mime: "text/x-elm", mode: "elm", ext: ["elm"]},
    {name: "Embedded Javascript", mime: "application/x-ejs", mode: "htmlembedded", ext: ["ejs"]},
    {name: "Embedded Ruby", mime: "application/x-erb", mode: "htmlembedded", ext: ["erb"]},
    {name: "Erlang", mime: "text/x-erlang", mode: "erlang", ext: ["erl"]},
    {name: "Esper", mime: "text/x-esper", mode: "sql"},
    {name: "Factor", mime: "text/x-factor", mode: "factor", ext: ["factor"]},
    {name: "FCL", mime: "text/x-fcl", mode: "fcl"},
    {name: "Forth", mime: "text/x-forth", mode: "forth", ext: ["forth", "fth", "4th"]},
    {name: "Fortran", mime: "text/x-fortran", mode: "fortran", ext: ["f", "for", "f77", "f90"]},
    {name: "F#", mime: "text/x-fsharp", mode: "mllike", ext: ["fs"], alias: ["fsharp"]},
    {name: "Gas", mime: "text/x-gas", mode: "gas", ext: ["s"]},
    {name: "Gherkin", mime: "text/x-feature", mode: "gherkin", ext: ["feature"]},
    {name: "GitHub Flavored Markdown", mime: "text/x-gfm", mode: "gfm", file: /^(readme|contributing|history).md$/i},
    {name: "Go", mime: "text/x-go", mode: "go", ext: ["go"]},
    {name: "Groovy", mime: "text/x-groovy", mode: "groovy", ext: ["groovy", "gradle"], file: /^Jenkinsfile$/},
    {name: "HAML", mime: "text/x-haml", mode: "haml", ext: ["haml"]},
    {name: "Haskell", mime: "text/x-haskell", mode: "haskell", ext: ["hs"]},
    {name: "Haskell (Literate)", mime: "text/x-literate-haskell", mode: "haskell-literate", ext: ["lhs"]},
    {name: "Haxe", mime: "text/x-haxe", mode: "haxe", ext: ["hx"]},
    {name: "HXML", mime: "text/x-hxml", mode: "haxe", ext: ["hxml"]},
    {name: "ASP.NET", mime: "application/x-aspx", mode: "htmlembedded", ext: ["aspx"], alias: ["asp", "aspx"]},
    {name: "HTML", mime: "text/html", mode: "htmlmixed", ext: ["html", "htm", "handlebars", "hbs"], alias: ["xhtml"]},
    {name: "HTTP", mime: "message/http", mode: "http"},
    {name: "IDL", mime: "text/x-idl", mode: "idl", ext: ["pro"]},
    {name: "Pug", mime: "text/x-pug", mode: "pug", ext: ["jade", "pug"], alias: ["jade"]},
    {name: "Java", mime: "text/x-java", mode: "clike", ext: ["java"]},
    {name: "Java Server Pages", mime: "application/x-jsp", mode: "htmlembedded", ext: ["jsp"], alias: ["jsp"]},
    {name: "JavaScript", mimes: ["text/javascript", "text/ecmascript", "application/javascript", "application/x-javascript", "application/ecmascript"],
     mode: "javascript", ext: ["js"], alias: ["ecmascript", "js", "node"]},
    {name: "JSON", mimes: ["application/json", "application/x-json"], mode: "javascript", ext: ["json", "map"], alias: ["json5"]},
    {name: "JSON-LD", mime: "application/ld+json", mode: "javascript", ext: ["jsonld"], alias: ["jsonld"]},
    {name: "JSX", mime: "text/jsx", mode: "jsx", ext: ["jsx"]},
    {name: "Jinja2", mime: "null", mode: "jinja2", ext: ["j2", "jinja", "jinja2"]},
    {name: "Julia", mime: "text/x-julia", mode: "julia", ext: ["jl"]},
    {name: "Kotlin", mime: "text/x-kotlin", mode: "clike", ext: ["kt"]},
    {name: "LESS", mime: "text/x-less", mode: "css", ext: ["less"]},
    {name: "LiveScript", mime: "text/x-livescript", mode: "livescript", ext: ["ls"], alias: ["ls"]},
    {name: "Lua", mime: "text/x-lua", mode: "lua", ext: ["lua"]},
    {name: "Markdown", mime: "text/x-markdown", mode: "markdown", ext: ["markdown", "md", "mkd"]},
    {name: "mIRC", mime: "text/mirc", mode: "mirc"},
    {name: "MariaDB SQL", mime: "text/x-mariadb", mode: "sql"},
    {name: "Mathematica", mime: "text/x-mathematica", mode: "mathematica", ext: ["m", "nb"]},
    {name: "Modelica", mime: "text/x-modelica", mode: "modelica", ext: ["mo"]},
    {name: "MUMPS", mime: "text/x-mumps", mode: "mumps", ext: ["mps"]},
    {name: "MS SQL", mime: "text/x-mssql", mode: "sql"},
    {name: "mbox", mime: "application/mbox", mode: "mbox", ext: ["mbox"]},
    {name: "MySQL", mime: "text/x-mysql", mode: "sql"},
    {name: "Nginx", mime: "text/x-nginx-conf", mode: "nginx", file: /nginx.*\.conf$/i},
    {name: "NSIS", mime: "text/x-nsis", mode: "nsis", ext: ["nsh", "nsi"]},
    {name: "NTriples", mimes: ["application/n-triples", "application/n-quads", "text/n-triples"],
     mode: "ntriples", ext: ["nt", "nq"]},
    {name: "Objective-C", mime: "text/x-objectivec", mode: "clike", ext: ["m", "mm"], alias: ["objective-c", "objc"]},
    {name: "OCaml", mime: "text/x-ocaml", mode: "mllike", ext: ["ml", "mli", "mll", "mly"]},
    {name: "Octave", mime: "text/x-octave", mode: "octave", ext: ["m"]},
    {name: "Oz", mime: "text/x-oz", mode: "oz", ext: ["oz"]},
    {name: "Pascal", mime: "text/x-pascal", mode: "pascal", ext: ["p", "pas"]},
    {name: "PEG.js", mime: "null", mode: "pegjs", ext: ["jsonld"]},
    {name: "Perl", mime: "text/x-perl", mode: "perl", ext: ["pl", "pm"]},
    {name: "PHP", mimes: ["text/x-php", "application/x-httpd-php", "application/x-httpd-php-open"], mode: "php", ext: ["php", "php3", "php4", "php5", "php7", "phtml"]},
    {name: "Pig", mime: "text/x-pig", mode: "pig", ext: ["pig"]},
    {name: "Plain Text", mime: "text/plain", mode: "null", ext: ["txt", "text", "conf", "def", "list", "log"]},
    {name: "PLSQL", mime: "text/x-plsql", mode: "sql", ext: ["pls"]},
    {name: "PowerShell", mime: "application/x-powershell", mode: "powershell", ext: ["ps1", "psd1", "psm1"]},
    {name: "Properties files", mime: "text/x-properties", mode: "properties", ext: ["properties", "ini", "in"], alias: ["ini", "properties"]},
    {name: "ProtoBuf", mime: "text/x-protobuf", mode: "protobuf", ext: ["proto"]},
    {name: "Python", mime: "text/x-python", mode: "python", ext: ["BUILD", "bzl", "py", "pyw"], file: /^(BUCK|BUILD)$/},
    {name: "Puppet", mime: "text/x-puppet", mode: "puppet", ext: ["pp"]},
    {name: "Q", mime: "text/x-q", mode: "q", ext: ["q"]},
    {name: "R", mime: "text/x-rsrc", mode: "r", ext: ["r", "R"], alias: ["rscript"]},
    {name: "reStructuredText", mime: "text/x-rst", mode: "rst", ext: ["rst"], alias: ["rst"]},
    {name: "RPM Changes", mime: "text/x-rpm-changes", mode: "rpm"},
    {name: "RPM Spec", mime: "text/x-rpm-spec", mode: "rpm", ext: ["spec"]},
    {name: "Ruby", mime: "text/x-ruby", mode: "ruby", ext: ["rb"], alias: ["jruby", "macruby", "rake", "rb", "rbx"]},
    {name: "Rust", mime: "text/x-rustsrc", mode: "rust", ext: ["rs"]},
    {name: "SAS", mime: "text/x-sas", mode: "sas", ext: ["sas"]},
    {name: "Sass", mime: "text/x-sass", mode: "sass", ext: ["sass"]},
    {name: "Scala", mime: "text/x-scala", mode: "clike", ext: ["scala"]},
    {name: "Scheme", mime: "text/x-scheme", mode: "scheme", ext: ["scm", "ss"]},
    {name: "SCSS", mime: "text/x-scss", mode: "css", ext: ["scss"]},
    {name: "Shell", mimes: ["text/x-sh", "application/x-sh"], mode: "shell", ext: ["sh", "ksh", "bash"], alias: ["bash", "sh", "zsh"], file: /^PKGBUILD$/},
    {name: "Sieve", mime: "application/sieve", mode: "sieve", ext: ["siv", "sieve"]},
    {name: "Slim", mimes: ["text/x-slim", "application/x-slim"], mode: "slim", ext: ["slim"]},
    {name: "Smalltalk", mime: "text/x-stsrc", mode: "smalltalk", ext: ["st"]},
    {name: "Smarty", mime: "text/x-smarty", mode: "smarty", ext: ["tpl"]},
    {name: "Solr", mime: "text/x-solr", mode: "solr"},
    {name: "SML", mime: "text/x-sml", mode: "mllike", ext: ["sml", "sig", "fun", "smackspec"]},
    {name: "Soy", mime: "text/x-soy", mode: "soy", ext: ["soy"], alias: ["closure template"]},
    {name: "SPARQL", mime: "application/sparql-query", mode: "sparql", ext: ["rq", "sparql"], alias: ["sparul"]},
    {name: "Spreadsheet", mime: "text/x-spreadsheet", mode: "spreadsheet", alias: ["excel", "formula"]},
    {name: "SQL", mime: "text/x-sql", mode: "sql", ext: ["sql"]},
    {name: "SQLite", mime: "text/x-sqlite", mode: "sql"},
    {name: "Squirrel", mime: "text/x-squirrel", mode: "clike", ext: ["nut"]},
    {name: "Stylus", mime: "text/x-styl", mode: "stylus", ext: ["styl"]},
    {name: "Swift", mime: "text/x-swift", mode: "swift", ext: ["swift"]},
    {name: "sTeX", mime: "text/x-stex", mode: "stex"},
    {name: "LaTeX", mime: "text/x-latex", mode: "stex", ext: ["text", "ltx", "tex"], alias: ["tex"]},
    {name: "SystemVerilog", mime: "text/x-systemverilog", mode: "verilog", ext: ["v", "sv", "svh"]},
    {name: "Tcl", mime: "text/x-tcl", mode: "tcl", ext: ["tcl"]},
    {name: "Textile", mime: "text/x-textile", mode: "textile", ext: ["textile"]},
    {name: "TiddlyWiki ", mime: "text/x-tiddlywiki", mode: "tiddlywiki"},
    {name: "Tiki wiki", mime: "text/tiki", mode: "tiki"},
    {name: "TOML", mime: "text/x-toml", mode: "toml", ext: ["toml"]},
    {name: "Tornado", mime: "text/x-tornado", mode: "tornado"},
    {name: "troff", mime: "text/troff", mode: "troff", ext: ["1", "2", "3", "4", "5", "6", "7", "8", "9"]},
    {name: "TTCN", mime: "text/x-ttcn", mode: "ttcn", ext: ["ttcn", "ttcn3", "ttcnpp"]},
    {name: "TTCN_CFG", mime: "text/x-ttcn-cfg", mode: "ttcn-cfg", ext: ["cfg"]},
    {name: "Turtle", mime: "text/turtle", mode: "turtle", ext: ["ttl"]},
    {name: "TypeScript", mime: "application/typescript", mode: "javascript", ext: ["ts"], alias: ["ts"]},
    {name: "TypeScript-JSX", mime: "text/typescript-jsx", mode: "jsx", ext: ["tsx"], alias: ["tsx"]},
    {name: "Twig", mime: "text/x-twig", mode: "twig"},
    {name: "Web IDL", mime: "text/x-webidl", mode: "webidl", ext: ["webidl"]},
    {name: "VB.NET", mime: "text/x-vb", mode: "vb", ext: ["vb"]},
    {name: "VBScript", mime: "text/vbscript", mode: "vbscript", ext: ["vbs"]},
    {name: "Velocity", mime: "text/velocity", mode: "velocity", ext: ["vtl"]},
    {name: "Verilog", mime: "text/x-verilog", mode: "verilog", ext: ["v"]},
    {name: "VHDL", mime: "text/x-vhdl", mode: "vhdl", ext: ["vhd", "vhdl"]},
    {name: "Vue.js Component", mimes: ["script/x-vue", "text/x-vue"], mode: "vue", ext: ["vue"]},
    {name: "XML", mimes: ["application/xml", "text/xml"], mode: "xml", ext: ["xml", "xsl", "xsd", "svg"], alias: ["rss", "wsdl", "xsd"]},
    {name: "XQuery", mime: "application/xquery", mode: "xquery", ext: ["xy", "xquery"]},
    {name: "Yacas", mime: "text/x-yacas", mode: "yacas", ext: ["ys"]},
    {name: "YAML", mimes: ["text/x-yaml", "text/yaml"], mode: "yaml", ext: ["yaml", "yml"], alias: ["yml"]},
    {name: "Z80", mime: "text/x-z80", mode: "z80", ext: ["z80"]},
    {name: "mscgen", mime: "text/x-mscgen", mode: "mscgen", ext: ["mscgen", "mscin", "msc"]},
    {name: "xu", mime: "text/x-xu", mode: "mscgen", ext: ["xu"]},
    {name: "msgenny", mime: "text/x-msgenny", mode: "mscgen", ext: ["msgenny"]}
  ];
  // Ensure all modes have a mime property for backwards compatibility
  for (var i = 0; i < CodeMirror.modeInfo.length; i++) {
    var info = CodeMirror.modeInfo[i];
    if (info.mimes) info.mime = info.mimes[0];
  }

  CodeMirror.findModeByMIME = function(mime) {
    mime = mime.toLowerCase();
    for (var i = 0; i < CodeMirror.modeInfo.length; i++) {
      var info = CodeMirror.modeInfo[i];
      if (info.mime == mime) return info;
      if (info.mimes) for (var j = 0; j < info.mimes.length; j++)
        if (info.mimes[j] == mime) return info;
    }
    if (/\+xml$/.test(mime)) return CodeMirror.findModeByMIME("application/xml")
    if (/\+json$/.test(mime)) return CodeMirror.findModeByMIME("application/json")
  };

  CodeMirror.findModeByExtension = function(ext) {
    for (var i = 0; i < CodeMirror.modeInfo.length; i++) {
      var info = CodeMirror.modeInfo[i];
      if (info.ext) for (var j = 0; j < info.ext.length; j++)
        if (info.ext[j] == ext) return info;
    }
  };

  CodeMirror.findModeByFileName = function(filename) {
    for (var i = 0; i < CodeMirror.modeInfo.length; i++) {
      var info = CodeMirror.modeInfo[i];
      if (info.file && info.file.test(filename)) return info;
    }
    var dot = filename.lastIndexOf(".");
    var ext = dot > -1 && filename.substring(dot + 1, filename.length);
    if (ext) return CodeMirror.findModeByExtension(ext);
  };

  CodeMirror.findModeByName = function(name) {
    name = name.toLowerCase();
    for (var i = 0; i < CodeMirror.modeInfo.length; i++) {
      var info = CodeMirror.modeInfo[i];
      if (info.name.toLowerCase() == name) return info;
      if (info.alias) for (var j = 0; j < info.alias.length; j++)
        if (info.alias[j].toLowerCase() == name) return info;
    }
  };
});


/***/ }),
/* 1177 */
/***/ (function(module, exports, __webpack_require__) {

// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE

(function(mod) {
  if (true) // CommonJS
    mod(__webpack_require__(32));
  else if (typeof define == "function" && define.amd) // AMD
    define(["../../lib/codemirror"], mod);
  else // Plain browser env
    mod(CodeMirror);
})(function(CodeMirror) {
  "use strict";

  var listRE = /^(\s*)(>[> ]*|[*+-] \[[x ]\]\s|[*+-]\s|(\d+)([.)]))(\s*)/,
      emptyListRE = /^(\s*)(>[> ]*|[*+-] \[[x ]\]|[*+-]|(\d+)[.)])(\s*)$/,
      unorderedListRE = /[*+-]\s/;

  CodeMirror.commands.newlineAndIndentContinueMarkdownList = function(cm) {
    if (cm.getOption("disableInput")) return CodeMirror.Pass;
    var ranges = cm.listSelections(), replacements = [];
    for (var i = 0; i < ranges.length; i++) {
      var pos = ranges[i].head;
      var eolState = cm.getStateAfter(pos.line);
      var inList = eolState.list !== false;
      var inQuote = eolState.quote !== 0;

      var line = cm.getLine(pos.line), match = listRE.exec(line);
      var cursorBeforeBullet = /^\s*$/.test(line.slice(0, pos.ch));
      if (!ranges[i].empty() || (!inList && !inQuote) || !match || cursorBeforeBullet) {
        cm.execCommand("newlineAndIndent");
        return;
      }
      if (emptyListRE.test(line)) {
        if (!/>\s*$/.test(line)) cm.replaceRange("", {
          line: pos.line, ch: 0
        }, {
          line: pos.line, ch: pos.ch + 1
        });
        replacements[i] = "\n";
      } else {
        var indent = match[1], after = match[5];
        var numbered = !(unorderedListRE.test(match[2]) || match[2].indexOf(">") >= 0);
        var bullet = numbered ? (parseInt(match[3], 10) + 1) + match[4] : match[2].replace("x", " ");
        replacements[i] = "\n" + indent + bullet + after;

        if (numbered) incrementRemainingMarkdownListNumbers(cm, pos);
      }
    }

    cm.replaceSelections(replacements);
  };

  // Auto-updating Markdown list numbers when a new item is added to the
  // middle of a list
  function incrementRemainingMarkdownListNumbers(cm, pos) {
    var startLine = pos.line, lookAhead = 0, skipCount = 0;
    var startItem = listRE.exec(cm.getLine(startLine)), startIndent = startItem[1];

    do {
      lookAhead += 1;
      var nextLineNumber = startLine + lookAhead;
      var nextLine = cm.getLine(nextLineNumber), nextItem = listRE.exec(nextLine);

      if (nextItem) {
        var nextIndent = nextItem[1];
        var newNumber = (parseInt(startItem[3], 10) + lookAhead - skipCount);
        var nextNumber = (parseInt(nextItem[3], 10)), itemNumber = nextNumber;

        if (startIndent === nextIndent && !isNaN(nextNumber)) {
          if (newNumber === nextNumber) itemNumber = nextNumber + 1;
          if (newNumber > nextNumber) itemNumber = newNumber + 1;
          cm.replaceRange(
            nextLine.replace(listRE, nextIndent + itemNumber + nextItem[4] + nextItem[5]),
          {
            line: nextLineNumber, ch: 0
          }, {
            line: nextLineNumber, ch: nextLine.length
          });
        } else {
          if (startIndent.length > nextIndent.length) return;
          // This doesn't run if the next line immediatley indents, as it is
          // not clear of the users intention (new indented item or same level)
          if ((startIndent.length < nextIndent.length) && (lookAhead === 1)) return;
          skipCount += 1;
        }
      }
    } while (nextItem);
  }
});


/***/ }),
/* 1178 */
/***/ (function(module, exports, __webpack_require__) {

// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE

/**
 * Supported keybindings:
 *   Too many to list. Refer to defaultKeyMap below.
 *
 * Supported Ex commands:
 *   Refer to defaultExCommandMap below.
 *
 * Registers: unnamed, -, a-z, A-Z, 0-9
 *   (Does not respect the special case for number registers when delete
 *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )
 *   TODO: Implement the remaining registers.
 *
 * Marks: a-z, A-Z, and 0-9
 *   TODO: Implement the remaining special marks. They have more complex
 *       behavior.
 *
 * Events:
 *  'vim-mode-change' - raised on the editor anytime the current mode changes,
 *                      Event object: {mode: "visual", subMode: "linewise"}
 *
 * Code structure:
 *  1. Default keymap
 *  2. Variable declarations and short basic helpers
 *  3. Instance (External API) implementation
 *  4. Internal state tracking objects (input state, counter) implementation
 *     and instantiation
 *  5. Key handler (the main command dispatcher) implementation
 *  6. Motion, operator, and action implementations
 *  7. Helper functions for the key handler, motions, operators, and actions
 *  8. Set up Vim to work as a keymap for CodeMirror.
 *  9. Ex command implementations.
 */

(function(mod) {
  if (true) // CommonJS
    mod(__webpack_require__(32), __webpack_require__(386), __webpack_require__(1179), __webpack_require__(387));
  else if (typeof define == "function" && define.amd) // AMD
    define(["../lib/codemirror", "../addon/search/searchcursor", "../addon/dialog/dialog", "../addon/edit/matchbrackets"], mod);
  else // Plain browser env
    mod(CodeMirror);
})(function(CodeMirror) {
  'use strict';

  var defaultKeymap = [
    // Key to key mapping. This goes first to make it possible to override
    // existing mappings.
    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },
    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },
    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },
    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },
    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },
    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},
    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },
    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },
    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },
    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },
    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },
    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },
    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },
    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },
    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },
    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },
    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },
    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},
    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },
    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },
    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },
    { keys: '<End>', type: 'keyToKey', toKeys: '$' },
    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },
    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },
    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },
    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },
    // Motions
    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},
    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},
    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},
    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},
    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},
    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},
    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},
    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},
    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},
    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},
    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},
    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},
    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},
    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},
    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},
    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},
    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},
    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},
    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},
    { keys: '(', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: false }},
    { keys: ')', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: true }},
    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},
    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},
    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},
    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},
    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},
    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},
    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },
    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },
    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},
    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},
    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},
    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},
    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},
    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},
    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},
    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},
    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},
    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},
    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},
    { keys: '\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},
    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},
    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },
    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },
    { keys: ']\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },
    { keys: '[\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },
    // the next two aren't motions but must come before more general motion declarations
    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},
    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},
    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},
    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},
    { keys: '|', type: 'motion', motion: 'moveToColumn'},
    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},
    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},
    // Operators
    { keys: 'd', type: 'operator', operator: 'delete' },
    { keys: 'y', type: 'operator', operator: 'yank' },
    { keys: 'c', type: 'operator', operator: 'change' },
    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},
    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},
    { keys: 'g~', type: 'operator', operator: 'changeCase' },
    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },
    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },
    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},
    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},
    // Operator-Motion dual commands
    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},
    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},
    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},
    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},
    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},
    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},
    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},
    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},
    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},
    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},
    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },
    // Actions
    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},
    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},
    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},
    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},
    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },
    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },
    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },
    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },
    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },
    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },
    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },
    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },
    { keys: 'v', type: 'action', action: 'toggleVisualMode' },
    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},
    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},
    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},
    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },
    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },
    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},
    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},
    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },
    { keys: '@<character>', type: 'action', action: 'replayMacro' },
    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },
    // Handle Replace-mode as a special case of insert mode.
    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }},
    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },
    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },
    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },
    { keys: '<C-r>', type: 'action', action: 'redo' },
    { keys: 'm<character>', type: 'action', action: 'setMark' },
    { keys: '"<character>', type: 'action', action: 'setRegister' },
    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},
    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },
    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},
    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },
    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},
    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },
    { keys: '.', type: 'action', action: 'repeatLastEdit' },
    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},
    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},
    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },
    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },
    // Text object motions
    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },
    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},
    // Search
    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},
    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},
    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},
    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},
    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},
    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},
    // Ex command
    { keys: ':', type: 'ex' }
  ];

  /**
   * Ex commands
   * Care must be taken when adding to the default Ex command map. For any
   * pair of commands that have a shared prefix, at least one of their
   * shortNames must not match the prefix of the other command.
   */
  var defaultExCommandMap = [
    { name: 'colorscheme', shortName: 'colo' },
    { name: 'map' },
    { name: 'imap', shortName: 'im' },
    { name: 'nmap', shortName: 'nm' },
    { name: 'vmap', shortName: 'vm' },
    { name: 'unmap' },
    { name: 'write', shortName: 'w' },
    { name: 'undo', shortName: 'u' },
    { name: 'redo', shortName: 'red' },
    { name: 'set', shortName: 'se' },
    { name: 'set', shortName: 'se' },
    { name: 'setlocal', shortName: 'setl' },
    { name: 'setglobal', shortName: 'setg' },
    { name: 'sort', shortName: 'sor' },
    { name: 'substitute', shortName: 's', possiblyAsync: true },
    { name: 'nohlsearch', shortName: 'noh' },
    { name: 'yank', shortName: 'y' },
    { name: 'delmarks', shortName: 'delm' },
    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },
    { name: 'global', shortName: 'g' }
  ];

  var Pos = CodeMirror.Pos;

  var Vim = function() {
    function enterVimMode(cm) {
      cm.setOption('disableInput', true);
      cm.setOption('showCursorWhenSelecting', false);
      CodeMirror.signal(cm, "vim-mode-change", {mode: "normal"});
      cm.on('cursorActivity', onCursorActivity);
      maybeInitVimState(cm);
      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));
    }

    function leaveVimMode(cm) {
      cm.setOption('disableInput', false);
      cm.off('cursorActivity', onCursorActivity);
      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));
      cm.state.vim = null;
    }

    function detachVimMap(cm, next) {
      if (this == CodeMirror.keyMap.vim) {
        CodeMirror.rmClass(cm.getWrapperElement(), "cm-fat-cursor");
        if (cm.getOption("inputStyle") == "contenteditable" && document.body.style.caretColor != null) {
          disableFatCursorMark(cm);
          cm.getInputField().style.caretColor = "";
        }
      }

      if (!next || next.attach != attachVimMap)
        leaveVimMode(cm);
    }
    function attachVimMap(cm, prev) {
      if (this == CodeMirror.keyMap.vim) {
        CodeMirror.addClass(cm.getWrapperElement(), "cm-fat-cursor");
        if (cm.getOption("inputStyle") == "contenteditable" && document.body.style.caretColor != null) {
          enableFatCursorMark(cm);
          cm.getInputField().style.caretColor = "transparent";
        }
      }

      if (!prev || prev.attach != attachVimMap)
        enterVimMode(cm);
    }

    function fatCursorMarks(cm) {
      var ranges = cm.listSelections(), result = []
      for (var i = 0; i < ranges.length; i++) {
        var range = ranges[i]
        if (range.empty()) {
          if (range.anchor.ch < cm.getLine(range.anchor.line).length) {
            result.push(cm.markText(range.anchor, Pos(range.anchor.line, range.anchor.ch + 1),
                                    {className: "cm-fat-cursor-mark"}))
          } else {
            var widget = document.createElement("span")
            widget.textContent = "\u00a0"
            widget.className = "cm-fat-cursor-mark"
            result.push(cm.setBookmark(range.anchor, {widget: widget}))
          }
        }
      }
      return result
    }

    function updateFatCursorMark(cm) {
      var marks = cm.state.fatCursorMarks
      if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear()
      cm.state.fatCursorMarks = fatCursorMarks(cm)
    }

    function enableFatCursorMark(cm) {
      cm.state.fatCursorMarks = fatCursorMarks(cm)
      cm.on("cursorActivity", updateFatCursorMark)
    }

    function disableFatCursorMark(cm) {
      var marks = cm.state.fatCursorMarks
      if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear()
      cm.state.fatCursorMarks = null
      cm.off("cursorActivity", updateFatCursorMark)
    }

    // Deprecated, simply setting the keymap works again.
    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {
      if (val && cm.getOption("keyMap") != "vim")
        cm.setOption("keyMap", "vim");
      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption("keyMap")))
        cm.setOption("keyMap", "default");
    });

    function cmKey(key, cm) {
      if (!cm) { return undefined; }
      if (this[key]) { return this[key]; }
      var vimKey = cmKeyToVimKey(key);
      if (!vimKey) {
        return false;
      }
      var cmd = CodeMirror.Vim.findKey(cm, vimKey);
      if (typeof cmd == 'function') {
        CodeMirror.signal(cm, 'vim-keypress', vimKey);
      }
      return cmd;
    }

    var modifiers = {'Shift': 'S', 'Ctrl': 'C', 'Alt': 'A', 'Cmd': 'D', 'Mod': 'A'};
    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};
    function cmKeyToVimKey(key) {
      if (key.charAt(0) == '\'') {
        // Keypress character binding of format "'a'"
        return key.charAt(1);
      }
      var pieces = key.split(/-(?!$)/);
      var lastPiece = pieces[pieces.length - 1];
      if (pieces.length == 1 && pieces[0].length == 1) {
        // No-modifier bindings use literal character bindings above. Skip.
        return false;
      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {
        // Ignore Shift+char bindings as they should be handled by literal character.
        return false;
      }
      var hasCharacter = false;
      for (var i = 0; i < pieces.length; i++) {
        var piece = pieces[i];
        if (piece in modifiers) { pieces[i] = modifiers[piece]; }
        else { hasCharacter = true; }
        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }
      }
      if (!hasCharacter) {
        // Vim does not support modifier only keys.
        return false;
      }
      // TODO: Current bindings expect the character to be lower case, but
      // it looks like vim key notation uses upper case.
      if (isUpperCase(lastPiece)) {
        pieces[pieces.length - 1] = lastPiece.toLowerCase();
      }
      return '<' + pieces.join('-') + '>';
    }

    function getOnPasteFn(cm) {
      var vim = cm.state.vim;
      if (!vim.onPasteFn) {
        vim.onPasteFn = function() {
          if (!vim.insertMode) {
            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));
            actions.enterInsertMode(cm, {}, vim);
          }
        };
      }
      return vim.onPasteFn;
    }

    var numberRegex = /[\d]/;
    var wordCharTest = [CodeMirror.isWordChar, function(ch) {
      return ch && !CodeMirror.isWordChar(ch) && !/\s/.test(ch);
    }], bigWordCharTest = [function(ch) {
      return /\S/.test(ch);
    }];
    function makeKeyRange(start, size) {
      var keys = [];
      for (var i = start; i < start + size; i++) {
        keys.push(String.fromCharCode(i));
      }
      return keys;
    }
    var upperCaseAlphabet = makeKeyRange(65, 26);
    var lowerCaseAlphabet = makeKeyRange(97, 26);
    var numbers = makeKeyRange(48, 10);
    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);
    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '"', '.', ':', '/']);

    function isLine(cm, line) {
      return line >= cm.firstLine() && line <= cm.lastLine();
    }
    function isLowerCase(k) {
      return (/^[a-z]$/).test(k);
    }
    function isMatchableSymbol(k) {
      return '()[]{}'.indexOf(k) != -1;
    }
    function isNumber(k) {
      return numberRegex.test(k);
    }
    function isUpperCase(k) {
      return (/^[A-Z]$/).test(k);
    }
    function isWhiteSpaceString(k) {
      return (/^\s*$/).test(k);
    }
    function isEndOfSentenceSymbol(k) {
      return '.?!'.indexOf(k) != -1;
    }
    function inArray(val, arr) {
      for (var i = 0; i < arr.length; i++) {
        if (arr[i] == val) {
          return true;
        }
      }
      return false;
    }

    var options = {};
    function defineOption(name, defaultValue, type, aliases, callback) {
      if (defaultValue === undefined && !callback) {
        throw Error('defaultValue is required unless callback is provided');
      }
      if (!type) { type = 'string'; }
      options[name] = {
        type: type,
        defaultValue: defaultValue,
        callback: callback
      };
      if (aliases) {
        for (var i = 0; i < aliases.length; i++) {
          options[aliases[i]] = options[name];
        }
      }
      if (defaultValue) {
        setOption(name, defaultValue);
      }
    }

    function setOption(name, value, cm, cfg) {
      var option = options[name];
      cfg = cfg || {};
      var scope = cfg.scope;
      if (!option) {
        return new Error('Unknown option: ' + name);
      }
      if (option.type == 'boolean') {
        if (value && value !== true) {
          return new Error('Invalid argument: ' + name + '=' + value);
        } else if (value !== false) {
          // Boolean options are set to true if value is not defined.
          value = true;
        }
      }
      if (option.callback) {
        if (scope !== 'local') {
          option.callback(value, undefined);
        }
        if (scope !== 'global' && cm) {
          option.callback(value, cm);
        }
      } else {
        if (scope !== 'local') {
          option.value = option.type == 'boolean' ? !!value : value;
        }
        if (scope !== 'global' && cm) {
          cm.state.vim.options[name] = {value: value};
        }
      }
    }

    function getOption(name, cm, cfg) {
      var option = options[name];
      cfg = cfg || {};
      var scope = cfg.scope;
      if (!option) {
        return new Error('Unknown option: ' + name);
      }
      if (option.callback) {
        var local = cm && option.callback(undefined, cm);
        if (scope !== 'global' && local !== undefined) {
          return local;
        }
        if (scope !== 'local') {
          return option.callback();
        }
        return;
      } else {
        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);
        return (local || (scope !== 'local') && option || {}).value;
      }
    }

    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {
      // Option is local. Do nothing for global.
      if (cm === undefined) {
        return;
      }
      // The 'filetype' option proxies to the CodeMirror 'mode' option.
      if (name === undefined) {
        var mode = cm.getOption('mode');
        return mode == 'null' ? '' : mode;
      } else {
        var mode = name == '' ? 'null' : name;
        cm.setOption('mode', mode);
      }
    });

    var createCircularJumpList = function() {
      var size = 100;
      var pointer = -1;
      var head = 0;
      var tail = 0;
      var buffer = new Array(size);
      function add(cm, oldCur, newCur) {
        var current = pointer % size;
        var curMark = buffer[current];
        function useNextSlot(cursor) {
          var next = ++pointer % size;
          var trashMark = buffer[next];
          if (trashMark) {
            trashMark.clear();
          }
          buffer[next] = cm.setBookmark(cursor);
        }
        if (curMark) {
          var markPos = curMark.find();
          // avoid recording redundant cursor position
          if (markPos && !cursorEqual(markPos, oldCur)) {
            useNextSlot(oldCur);
          }
        } else {
          useNextSlot(oldCur);
        }
        useNextSlot(newCur);
        head = pointer;
        tail = pointer - size + 1;
        if (tail < 0) {
          tail = 0;
        }
      }
      function move(cm, offset) {
        pointer += offset;
        if (pointer > head) {
          pointer = head;
        } else if (pointer < tail) {
          pointer = tail;
        }
        var mark = buffer[(size + pointer) % size];
        // skip marks that are temporarily removed from text buffer
        if (mark && !mark.find()) {
          var inc = offset > 0 ? 1 : -1;
          var newCur;
          var oldCur = cm.getCursor();
          do {
            pointer += inc;
            mark = buffer[(size + pointer) % size];
            // skip marks that are the same as current position
            if (mark &&
                (newCur = mark.find()) &&
                !cursorEqual(oldCur, newCur)) {
              break;
            }
          } while (pointer < head && pointer > tail);
        }
        return mark;
      }
      return {
        cachedCursor: undefined, //used for # and * jumps
        add: add,
        move: move
      };
    };

    // Returns an object to track the changes associated insert mode.  It
    // clones the object that is passed in, or creates an empty object one if
    // none is provided.
    var createInsertModeChanges = function(c) {
      if (c) {
        // Copy construction
        return {
          changes: c.changes,
          expectCursorActivityForChange: c.expectCursorActivityForChange
        };
      }
      return {
        // Change list
        changes: [],
        // Set to true on change, false on cursorActivity.
        expectCursorActivityForChange: false
      };
    };

    function MacroModeState() {
      this.latestRegister = undefined;
      this.isPlaying = false;
      this.isRecording = false;
      this.replaySearchQueries = [];
      this.onRecordingDone = undefined;
      this.lastInsertModeChanges = createInsertModeChanges();
    }
    MacroModeState.prototype = {
      exitMacroRecordMode: function() {
        var macroModeState = vimGlobalState.macroModeState;
        if (macroModeState.onRecordingDone) {
          macroModeState.onRecordingDone(); // close dialog
        }
        macroModeState.onRecordingDone = undefined;
        macroModeState.isRecording = false;
      },
      enterMacroRecordMode: function(cm, registerName) {
        var register =
            vimGlobalState.registerController.getRegister(registerName);
        if (register) {
          register.clear();
          this.latestRegister = registerName;
          if (cm.openDialog) {
            this.onRecordingDone = cm.openDialog(
                '(recording)['+registerName+']', null, {bottom:true});
          }
          this.isRecording = true;
        }
      }
    };

    function maybeInitVimState(cm) {
      if (!cm.state.vim) {
        // Store instance state in the CodeMirror object.
        cm.state.vim = {
          inputState: new InputState(),
          // Vim's input state that triggered the last edit, used to repeat
          // motions and operators with '.'.
          lastEditInputState: undefined,
          // Vim's action command before the last edit, used to repeat actions
          // with '.' and insert mode repeat.
          lastEditActionCommand: undefined,
          // When using jk for navigation, if you move from a longer line to a
          // shorter line, the cursor may clip to the end of the shorter line.
          // If j is pressed again and cursor goes to the next line, the
          // cursor should go back to its horizontal position on the longer
          // line if it can. This is to keep track of the horizontal position.
          lastHPos: -1,
          // Doing the same with screen-position for gj/gk
          lastHSPos: -1,
          // The last motion command run. Cleared if a non-motion command gets
          // executed in between.
          lastMotion: null,
          marks: {},
          // Mark for rendering fake cursor for visual mode.
          fakeCursor: null,
          insertMode: false,
          // Repeat count for changes made in insert mode, triggered by key
          // sequences like 3,i. Only exists when insertMode is true.
          insertModeRepeat: undefined,
          visualMode: false,
          // If we are in visual line mode. No effect if visualMode is false.
          visualLine: false,
          visualBlock: false,
          lastSelection: null,
          lastPastedText: null,
          sel: {},
          // Buffer-local/window-local values of vim options.
          options: {}
        };
      }
      return cm.state.vim;
    }
    var vimGlobalState;
    function resetVimGlobalState() {
      vimGlobalState = {
        // The current search query.
        searchQuery: null,
        // Whether we are searching backwards.
        searchIsReversed: false,
        // Replace part of the last substituted pattern
        lastSubstituteReplacePart: undefined,
        jumpList: createCircularJumpList(),
        macroModeState: new MacroModeState,
        // Recording latest f, t, F or T motion command.
        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},
        registerController: new RegisterController({}),
        // search history buffer
        searchHistoryController: new HistoryController(),
        // ex Command history buffer
        exCommandHistoryController : new HistoryController()
      };
      for (var optionName in options) {
        var option = options[optionName];
        option.value = option.defaultValue;
      }
    }

    var lastInsertModeKeyTimer;
    var vimApi= {
      buildKeyMap: function() {
        // TODO: Convert keymap into dictionary format for fast lookup.
      },
      // Testing hook, though it might be useful to expose the register
      // controller anyways.
      getRegisterController: function() {
        return vimGlobalState.registerController;
      },
      // Testing hook.
      resetVimGlobalState_: resetVimGlobalState,

      // Testing hook.
      getVimGlobalState_: function() {
        return vimGlobalState;
      },

      // Testing hook.
      maybeInitVimState_: maybeInitVimState,

      suppressErrorLogging: false,

      InsertModeKey: InsertModeKey,
      map: function(lhs, rhs, ctx) {
        // Add user defined key bindings.
        exCommandDispatcher.map(lhs, rhs, ctx);
      },
      unmap: function(lhs, ctx) {
        exCommandDispatcher.unmap(lhs, ctx);
      },
      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace
      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.
      setOption: setOption,
      getOption: getOption,
      defineOption: defineOption,
      defineEx: function(name, prefix, func){
        if (!prefix) {
          prefix = name;
        } else if (name.indexOf(prefix) !== 0) {
          throw new Error('(Vim.defineEx) "'+prefix+'" is not a prefix of "'+name+'", command not registered');
        }
        exCommands[name]=func;
        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};
      },
      handleKey: function (cm, key, origin) {
        var command = this.findKey(cm, key, origin);
        if (typeof command === 'function') {
          return command();
        }
      },
      /**
       * This is the outermost function called by CodeMirror, after keys have
       * been mapped to their Vim equivalents.
       *
       * Finds a command based on the key (and cached keys if there is a
       * multi-key sequence). Returns `undefined` if no key is matched, a noop
       * function if a partial match is found (multi-key), and a function to
       * execute the bound command if a a key is matched. The function always
       * returns true.
       */
      findKey: function(cm, key, origin) {
        var vim = maybeInitVimState(cm);
        function handleMacroRecording() {
          var macroModeState = vimGlobalState.macroModeState;
          if (macroModeState.isRecording) {
            if (key == 'q') {
              macroModeState.exitMacroRecordMode();
              clearInputState(cm);
              return true;
            }
            if (origin != 'mapping') {
              logKey(macroModeState, key);
            }
          }
        }
        function handleEsc() {
          if (key == '<Esc>') {
            // Clear input state and get back to normal mode.
            clearInputState(cm);
            if (vim.visualMode) {
              exitVisualMode(cm);
            } else if (vim.insertMode) {
              exitInsertMode(cm);
            }
            return true;
          }
        }
        function doKeyToKey(keys) {
          // TODO: prevent infinite recursion.
          var match;
          while (keys) {
            // Pull off one command key, which is either a single character
            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.
            match = (/<\w+-.+?>|<\w+>|./).exec(keys);
            key = match[0];
            keys = keys.substring(match.index + key.length);
            CodeMirror.Vim.handleKey(cm, key, 'mapping');
          }
        }

        function handleKeyInsertMode() {
          if (handleEsc()) { return true; }
          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;
          var keysAreChars = key.length == 1;
          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');
          // Need to check all key substrings in insert mode.
          while (keys.length > 1 && match.type != 'full') {
            var keys = vim.inputState.keyBuffer = keys.slice(1);
            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');
            if (thisMatch.type != 'none') { match = thisMatch; }
          }
          if (match.type == 'none') { clearInputState(cm); return false; }
          else if (match.type == 'partial') {
            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }
            lastInsertModeKeyTimer = window.setTimeout(
              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },
              getOption('insertModeEscKeysTimeout'));
            return !keysAreChars;
          }

          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }
          if (keysAreChars) {
            var selections = cm.listSelections();
            for (var i = 0; i < selections.length; i++) {
              var here = selections[i].head;
              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');
            }
            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();
          }
          clearInputState(cm);
          return match.command;
        }

        function handleKeyNonInsertMode() {
          if (handleMacroRecording() || handleEsc()) { return true; }

          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;
          if (/^[1-9]\d*$/.test(keys)) { return true; }

          var keysMatcher = /^(\d*)(.*)$/.exec(keys);
          if (!keysMatcher) { clearInputState(cm); return false; }
          var context = vim.visualMode ? 'visual' :
                                         'normal';
          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);
          if (match.type == 'none') { clearInputState(cm); return false; }
          else if (match.type == 'partial') { return true; }

          vim.inputState.keyBuffer = '';
          var keysMatcher = /^(\d*)(.*)$/.exec(keys);
          if (keysMatcher[1] && keysMatcher[1] != '0') {
            vim.inputState.pushRepeatDigit(keysMatcher[1]);
          }
          return match.command;
        }

        var command;
        if (vim.insertMode) { command = handleKeyInsertMode(); }
        else { command = handleKeyNonInsertMode(); }
        if (command === false) {
          return !vim.insertMode && key.length === 1 ? function() { return true; } : undefined;
        } else if (command === true) {
          // TODO: Look into using CodeMirror's multi-key handling.
          // Return no-op since we are caching the key. Counts as handled, but
          // don't want act on it just yet.
          return function() { return true; };
        } else {
          return function() {
            return cm.operation(function() {
              cm.curOp.isVimOp = true;
              try {
                if (command.type == 'keyToKey') {
                  doKeyToKey(command.toKeys);
                } else {
                  commandDispatcher.processCommand(cm, vim, command);
                }
              } catch (e) {
                // clear VIM state in case it's in a bad state.
                cm.state.vim = undefined;
                maybeInitVimState(cm);
                if (!CodeMirror.Vim.suppressErrorLogging) {
                  console['log'](e);
                }
                throw e;
              }
              return true;
            });
          };
        }
      },
      handleEx: function(cm, input) {
        exCommandDispatcher.processCommand(cm, input);
      },

      defineMotion: defineMotion,
      defineAction: defineAction,
      defineOperator: defineOperator,
      mapCommand: mapCommand,
      _mapCommand: _mapCommand,

      defineRegister: defineRegister,

      exitVisualMode: exitVisualMode,
      exitInsertMode: exitInsertMode
    };

    // Represents the current input state.
    function InputState() {
      this.prefixRepeat = [];
      this.motionRepeat = [];

      this.operator = null;
      this.operatorArgs = null;
      this.motion = null;
      this.motionArgs = null;
      this.keyBuffer = []; // For matching multi-key commands.
      this.registerName = null; // Defaults to the unnamed register.
    }
    InputState.prototype.pushRepeatDigit = function(n) {
      if (!this.operator) {
        this.prefixRepeat = this.prefixRepeat.concat(n);
      } else {
        this.motionRepeat = this.motionRepeat.concat(n);
      }
    };
    InputState.prototype.getRepeat = function() {
      var repeat = 0;
      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {
        repeat = 1;
        if (this.prefixRepeat.length > 0) {
          repeat *= parseInt(this.prefixRepeat.join(''), 10);
        }
        if (this.motionRepeat.length > 0) {
          repeat *= parseInt(this.motionRepeat.join(''), 10);
        }
      }
      return repeat;
    };

    function clearInputState(cm, reason) {
      cm.state.vim.inputState = new InputState();
      CodeMirror.signal(cm, 'vim-command-done', reason);
    }

    /*
     * Register stores information about copy and paste registers.  Besides
     * text, a register must store whether it is linewise (i.e., when it is
     * pasted, should it insert itself into a new line, or should the text be
     * inserted at the cursor position.)
     */
    function Register(text, linewise, blockwise) {
      this.clear();
      this.keyBuffer = [text || ''];
      this.insertModeChanges = [];
      this.searchQueries = [];
      this.linewise = !!linewise;
      this.blockwise = !!blockwise;
    }
    Register.prototype = {
      setText: function(text, linewise, blockwise) {
        this.keyBuffer = [text || ''];
        this.linewise = !!linewise;
        this.blockwise = !!blockwise;
      },
      pushText: function(text, linewise) {
        // if this register has ever been set to linewise, use linewise.
        if (linewise) {
          if (!this.linewise) {
            this.keyBuffer.push('\n');
          }
          this.linewise = true;
        }
        this.keyBuffer.push(text);
      },
      pushInsertModeChanges: function(changes) {
        this.insertModeChanges.push(createInsertModeChanges(changes));
      },
      pushSearchQuery: function(query) {
        this.searchQueries.push(query);
      },
      clear: function() {
        this.keyBuffer = [];
        this.insertModeChanges = [];
        this.searchQueries = [];
        this.linewise = false;
      },
      toString: function() {
        return this.keyBuffer.join('');
      }
    };

    /**
     * Defines an external register.
     *
     * The name should be a single character that will be used to reference the register.
     * The register should support setText, pushText, clear, and toString(). See Register
     * for a reference implementation.
     */
    function defineRegister(name, register) {
      var registers = vimGlobalState.registerController.registers;
      if (!name || name.length != 1) {
        throw Error('Register name must be 1 character');
      }
      if (registers[name]) {
        throw Error('Register already defined ' + name);
      }
      registers[name] = register;
      validRegisters.push(name);
    }

    /*
     * vim registers allow you to keep many independent copy and paste buffers.
     * See http://usevim.com/2012/04/13/registers/ for an introduction.
     *
     * RegisterController keeps the state of all the registers.  An initial
     * state may be passed in.  The unnamed register '"' will always be
     * overridden.
     */
    function RegisterController(registers) {
      this.registers = registers;
      this.unnamedRegister = registers['"'] = new Register();
      registers['.'] = new Register();
      registers[':'] = new Register();
      registers['/'] = new Register();
    }
    RegisterController.prototype = {
      pushText: function(registerName, operator, text, linewise, blockwise) {
        if (linewise && text.charAt(text.length - 1) !== '\n'){
          text += '\n';
        }
        // Lowercase and uppercase registers refer to the same register.
        // Uppercase just means append.
        var register = this.isValidRegister(registerName) ?
            this.getRegister(registerName) : null;
        // if no register/an invalid register was specified, things go to the
        // default registers
        if (!register) {
          switch (operator) {
            case 'yank':
              // The 0 register contains the text from the most recent yank.
              this.registers['0'] = new Register(text, linewise, blockwise);
              break;
            case 'delete':
            case 'change':
              if (text.indexOf('\n') == -1) {
                // Delete less than 1 line. Update the small delete register.
                this.registers['-'] = new Register(text, linewise);
              } else {
                // Shift down the contents of the numbered registers and put the
                // deleted text into register 1.
                this.shiftNumericRegisters_();
                this.registers['1'] = new Register(text, linewise);
              }
              break;
          }
          // Make sure the unnamed register is set to what just happened
          this.unnamedRegister.setText(text, linewise, blockwise);
          return;
        }

        // If we've gotten to this point, we've actually specified a register
        var append = isUpperCase(registerName);
        if (append) {
          register.pushText(text, linewise);
        } else {
          register.setText(text, linewise, blockwise);
        }
        // The unnamed register always has the same value as the last used
        // register.
        this.unnamedRegister.setText(register.toString(), linewise);
      },
      // Gets the register named @name.  If one of @name doesn't already exist,
      // create it.  If @name is invalid, return the unnamedRegister.
      getRegister: function(name) {
        if (!this.isValidRegister(name)) {
          return this.unnamedRegister;
        }
        name = name.toLowerCase();
        if (!this.registers[name]) {
          this.registers[name] = new Register();
        }
        return this.registers[name];
      },
      isValidRegister: function(name) {
        return name && inArray(name, validRegisters);
      },
      shiftNumericRegisters_: function() {
        for (var i = 9; i >= 2; i--) {
          this.registers[i] = this.getRegister('' + (i - 1));
        }
      }
    };
    function HistoryController() {
        this.historyBuffer = [];
        this.iterator = 0;
        this.initialPrefix = null;
    }
    HistoryController.prototype = {
      // the input argument here acts a user entered prefix for a small time
      // until we start autocompletion in which case it is the autocompleted.
      nextMatch: function (input, up) {
        var historyBuffer = this.historyBuffer;
        var dir = up ? -1 : 1;
        if (this.initialPrefix === null) this.initialPrefix = input;
        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {
          var element = historyBuffer[i];
          for (var j = 0; j <= element.length; j++) {
            if (this.initialPrefix == element.substring(0, j)) {
              this.iterator = i;
              return element;
            }
          }
        }
        // should return the user input in case we reach the end of buffer.
        if (i >= historyBuffer.length) {
          this.iterator = historyBuffer.length;
          return this.initialPrefix;
        }
        // return the last autocompleted query or exCommand as it is.
        if (i < 0 ) return input;
      },
      pushInput: function(input) {
        var index = this.historyBuffer.indexOf(input);
        if (index > -1) this.historyBuffer.splice(index, 1);
        if (input.length) this.historyBuffer.push(input);
      },
      reset: function() {
        this.initialPrefix = null;
        this.iterator = this.historyBuffer.length;
      }
    };
    var commandDispatcher = {
      matchCommand: function(keys, keyMap, inputState, context) {
        var matches = commandMatches(keys, keyMap, context, inputState);
        if (!matches.full && !matches.partial) {
          return {type: 'none'};
        } else if (!matches.full && matches.partial) {
          return {type: 'partial'};
        }

        var bestMatch;
        for (var i = 0; i < matches.full.length; i++) {
          var match = matches.full[i];
          if (!bestMatch) {
            bestMatch = match;
          }
        }
        if (bestMatch.keys.slice(-11) == '<character>') {
          var character = lastChar(keys);
          if (!character) return {type: 'none'};
          inputState.selectedCharacter = character;
        }
        return {type: 'full', command: bestMatch};
      },
      processCommand: function(cm, vim, command) {
        vim.inputState.repeatOverride = command.repeatOverride;
        switch (command.type) {
          case 'motion':
            this.processMotion(cm, vim, command);
            break;
          case 'operator':
            this.processOperator(cm, vim, command);
            break;
          case 'operatorMotion':
            this.processOperatorMotion(cm, vim, command);
            break;
          case 'action':
            this.processAction(cm, vim, command);
            break;
          case 'search':
            this.processSearch(cm, vim, command);
            break;
          case 'ex':
          case 'keyToEx':
            this.processEx(cm, vim, command);
            break;
          default:
            break;
        }
      },
      processMotion: function(cm, vim, command) {
        vim.inputState.motion = command.motion;
        vim.inputState.motionArgs = copyArgs(command.motionArgs);
        this.evalInput(cm, vim);
      },
      processOperator: function(cm, vim, command) {
        var inputState = vim.inputState;
        if (inputState.operator) {
          if (inputState.operator == command.operator) {
            // Typing an operator twice like 'dd' makes the operator operate
            // linewise
            inputState.motion = 'expandToLine';
            inputState.motionArgs = { linewise: true };
            this.evalInput(cm, vim);
            return;
          } else {
            // 2 different operators in a row doesn't make sense.
            clearInputState(cm);
          }
        }
        inputState.operator = command.operator;
        inputState.operatorArgs = copyArgs(command.operatorArgs);
        if (vim.visualMode) {
          // Operating on a selection in visual mode. We don't need a motion.
          this.evalInput(cm, vim);
        }
      },
      processOperatorMotion: function(cm, vim, command) {
        var visualMode = vim.visualMode;
        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);
        if (operatorMotionArgs) {
          // Operator motions may have special behavior in visual mode.
          if (visualMode && operatorMotionArgs.visualLine) {
            vim.visualLine = true;
          }
        }
        this.processOperator(cm, vim, command);
        if (!visualMode) {
          this.processMotion(cm, vim, command);
        }
      },
      processAction: function(cm, vim, command) {
        var inputState = vim.inputState;
        var repeat = inputState.getRepeat();
        var repeatIsExplicit = !!repeat;
        var actionArgs = copyArgs(command.actionArgs) || {};
        if (inputState.selectedCharacter) {
          actionArgs.selectedCharacter = inputState.selectedCharacter;
        }
        // Actions may or may not have motions and operators. Do these first.
        if (command.operator) {
          this.processOperator(cm, vim, command);
        }
        if (command.motion) {
          this.processMotion(cm, vim, command);
        }
        if (command.motion || command.operator) {
          this.evalInput(cm, vim);
        }
        actionArgs.repeat = repeat || 1;
        actionArgs.repeatIsExplicit = repeatIsExplicit;
        actionArgs.registerName = inputState.registerName;
        clearInputState(cm);
        vim.lastMotion = null;
        if (command.isEdit) {
          this.recordLastEdit(vim, inputState, command);
        }
        actions[command.action](cm, actionArgs, vim);
      },
      processSearch: function(cm, vim, command) {
        if (!cm.getSearchCursor) {
          // Search depends on SearchCursor.
          return;
        }
        var forward = command.searchArgs.forward;
        var wholeWordOnly = command.searchArgs.wholeWordOnly;
        getSearchState(cm).setReversed(!forward);
        var promptPrefix = (forward) ? '/' : '?';
        var originalQuery = getSearchState(cm).getQuery();
        var originalScrollPos = cm.getScrollInfo();
        function handleQuery(query, ignoreCase, smartCase) {
          vimGlobalState.searchHistoryController.pushInput(query);
          vimGlobalState.searchHistoryController.reset();
          try {
            updateSearchQuery(cm, query, ignoreCase, smartCase);
          } catch (e) {
            showConfirm(cm, 'Invalid regex: ' + query);
            clearInputState(cm);
            return;
          }
          commandDispatcher.processMotion(cm, vim, {
            type: 'motion',
            motion: 'findNext',
            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }
          });
        }
        function onPromptClose(query) {
          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);
          handleQuery(query, true /** ignoreCase */, true /** smartCase */);
          var macroModeState = vimGlobalState.macroModeState;
          if (macroModeState.isRecording) {
            logSearchQuery(macroModeState, query);
          }
        }
        function onPromptKeyUp(e, query, close) {
          var keyName = CodeMirror.keyName(e), up, offset;
          if (keyName == 'Up' || keyName == 'Down') {
            up = keyName == 'Up' ? true : false;
            offset = e.target ? e.target.selectionEnd : 0;
            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';
            close(query);
            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);
          } else {
            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')
              vimGlobalState.searchHistoryController.reset();
          }
          var parsedQuery;
          try {
            parsedQuery = updateSearchQuery(cm, query,
                true /** ignoreCase */, true /** smartCase */);
          } catch (e) {
            // Swallow bad regexes for incremental search.
          }
          if (parsedQuery) {
            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);
          } else {
            clearSearchHighlight(cm);
            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);
          }
        }
        function onPromptKeyDown(e, query, close) {
          var keyName = CodeMirror.keyName(e);
          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||
              (keyName == 'Backspace' && query == '')) {
            vimGlobalState.searchHistoryController.pushInput(query);
            vimGlobalState.searchHistoryController.reset();
            updateSearchQuery(cm, originalQuery);
            clearSearchHighlight(cm);
            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);
            CodeMirror.e_stop(e);
            clearInputState(cm);
            close();
            cm.focus();
          } else if (keyName == 'Up' || keyName == 'Down') {
            CodeMirror.e_stop(e);
          } else if (keyName == 'Ctrl-U') {
            // Ctrl-U clears input.
            CodeMirror.e_stop(e);
            close('');
          }
        }
        switch (command.searchArgs.querySrc) {
          case 'prompt':
            var macroModeState = vimGlobalState.macroModeState;
            if (macroModeState.isPlaying) {
              var query = macroModeState.replaySearchQueries.shift();
              handleQuery(query, true /** ignoreCase */, false /** smartCase */);
            } else {
              showPrompt(cm, {
                  onClose: onPromptClose,
                  prefix: promptPrefix,
                  desc: searchPromptDesc,
                  onKeyUp: onPromptKeyUp,
                  onKeyDown: onPromptKeyDown
              });
            }
            break;
          case 'wordUnderCursor':
            var word = expandWordUnderCursor(cm, false /** inclusive */,
                true /** forward */, false /** bigWord */,
                true /** noSymbol */);
            var isKeyword = true;
            if (!word) {
              word = expandWordUnderCursor(cm, false /** inclusive */,
                  true /** forward */, false /** bigWord */,
                  false /** noSymbol */);
              isKeyword = false;
            }
            if (!word) {
              return;
            }
            var query = cm.getLine(word.start.line).substring(word.start.ch,
                word.end.ch);
            if (isKeyword && wholeWordOnly) {
                query = '\\b' + query + '\\b';
            } else {
              query = escapeRegex(query);
            }

            // cachedCursor is used to save the old position of the cursor
            // when * or # causes vim to seek for the nearest word and shift
            // the cursor before entering the motion.
            vimGlobalState.jumpList.cachedCursor = cm.getCursor();
            cm.setCursor(word.start);

            handleQuery(query, true /** ignoreCase */, false /** smartCase */);
            break;
        }
      },
      processEx: function(cm, vim, command) {
        function onPromptClose(input) {
          // Give the prompt some time to close so that if processCommand shows
          // an error, the elements don't overlap.
          vimGlobalState.exCommandHistoryController.pushInput(input);
          vimGlobalState.exCommandHistoryController.reset();
          exCommandDispatcher.processCommand(cm, input);
        }
        function onPromptKeyDown(e, input, close) {
          var keyName = CodeMirror.keyName(e), up, offset;
          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||
              (keyName == 'Backspace' && input == '')) {
            vimGlobalState.exCommandHistoryController.pushInput(input);
            vimGlobalState.exCommandHistoryController.reset();
            CodeMirror.e_stop(e);
            clearInputState(cm);
            close();
            cm.focus();
          }
          if (keyName == 'Up' || keyName == 'Down') {
            CodeMirror.e_stop(e);
            up = keyName == 'Up' ? true : false;
            offset = e.target ? e.target.selectionEnd : 0;
            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';
            close(input);
            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);
          } else if (keyName == 'Ctrl-U') {
            // Ctrl-U clears input.
            CodeMirror.e_stop(e);
            close('');
          } else {
            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')
              vimGlobalState.exCommandHistoryController.reset();
          }
        }
        if (command.type == 'keyToEx') {
          // Handle user defined Ex to Ex mappings
          exCommandDispatcher.processCommand(cm, command.exArgs.input);
        } else {
          if (vim.visualMode) {
            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\'<,\'>',
                onKeyDown: onPromptKeyDown, selectValueOnOpen: false});
          } else {
            showPrompt(cm, { onClose: onPromptClose, prefix: ':',
                onKeyDown: onPromptKeyDown});
          }
        }
      },
      evalInput: function(cm, vim) {
        // If the motion command is set, execute both the operator and motion.
        // Otherwise return.
        var inputState = vim.inputState;
        var motion = inputState.motion;
        var motionArgs = inputState.motionArgs || {};
        var operator = inputState.operator;
        var operatorArgs = inputState.operatorArgs || {};
        var registerName = inputState.registerName;
        var sel = vim.sel;
        // TODO: Make sure cm and vim selections are identical outside visual mode.
        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));
        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));
        var oldHead = copyCursor(origHead);
        var oldAnchor = copyCursor(origAnchor);
        var newHead, newAnchor;
        var repeat;
        if (operator) {
          this.recordLastEdit(vim, inputState);
        }
        if (inputState.repeatOverride !== undefined) {
          // If repeatOverride is specified, that takes precedence over the
          // input state's repeat. Used by Ex mode and can be user defined.
          repeat = inputState.repeatOverride;
        } else {
          repeat = inputState.getRepeat();
        }
        if (repeat > 0 && motionArgs.explicitRepeat) {
          motionArgs.repeatIsExplicit = true;
        } else if (motionArgs.noRepeat ||
            (!motionArgs.explicitRepeat && repeat === 0)) {
          repeat = 1;
          motionArgs.repeatIsExplicit = false;
        }
        if (inputState.selectedCharacter) {
          // If there is a character input, stick it in all of the arg arrays.
          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =
              inputState.selectedCharacter;
        }
        motionArgs.repeat = repeat;
        clearInputState(cm);
        if (motion) {
          var motionResult = motions[motion](cm, origHead, motionArgs, vim);
          vim.lastMotion = motions[motion];
          if (!motionResult) {
            return;
          }
          if (motionArgs.toJumplist) {
            var jumpList = vimGlobalState.jumpList;
            // if the current motion is # or *, use cachedCursor
            var cachedCursor = jumpList.cachedCursor;
            if (cachedCursor) {
              recordJumpPosition(cm, cachedCursor, motionResult);
              delete jumpList.cachedCursor;
            } else {
              recordJumpPosition(cm, origHead, motionResult);
            }
          }
          if (motionResult instanceof Array) {
            newAnchor = motionResult[0];
            newHead = motionResult[1];
          } else {
            newHead = motionResult;
          }
          // TODO: Handle null returns from motion commands better.
          if (!newHead) {
            newHead = copyCursor(origHead);
          }
          if (vim.visualMode) {
            if (!(vim.visualBlock && newHead.ch === Infinity)) {
              newHead = clipCursorToContent(cm, newHead, vim.visualBlock);
            }
            if (newAnchor) {
              newAnchor = clipCursorToContent(cm, newAnchor, true);
            }
            newAnchor = newAnchor || oldAnchor;
            sel.anchor = newAnchor;
            sel.head = newHead;
            updateCmSelection(cm);
            updateMark(cm, vim, '<',
                cursorIsBefore(newAnchor, newHead) ? newAnchor
                    : newHead);
            updateMark(cm, vim, '>',
                cursorIsBefore(newAnchor, newHead) ? newHead
                    : newAnchor);
          } else if (!operator) {
            newHead = clipCursorToContent(cm, newHead);
            cm.setCursor(newHead.line, newHead.ch);
          }
        }
        if (operator) {
          if (operatorArgs.lastSel) {
            // Replaying a visual mode operation
            newAnchor = oldAnchor;
            var lastSel = operatorArgs.lastSel;
            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);
            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);
            if (lastSel.visualLine) {
              // Linewise Visual mode: The same number of lines.
              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);
            } else if (lastSel.visualBlock) {
              // Blockwise Visual mode: The same number of lines and columns.
              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);
            } else if (lastSel.head.line == lastSel.anchor.line) {
              // Normal Visual mode within one line: The same number of characters.
              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);
            } else {
              // Normal Visual mode with several lines: The same number of lines, in the
              // last line the same number of characters as in the last line the last time.
              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);
            }
            vim.visualMode = true;
            vim.visualLine = lastSel.visualLine;
            vim.visualBlock = lastSel.visualBlock;
            sel = vim.sel = {
              anchor: newAnchor,
              head: newHead
            };
            updateCmSelection(cm);
          } else if (vim.visualMode) {
            operatorArgs.lastSel = {
              anchor: copyCursor(sel.anchor),
              head: copyCursor(sel.head),
              visualBlock: vim.visualBlock,
              visualLine: vim.visualLine
            };
          }
          var curStart, curEnd, linewise, mode;
          var cmSel;
          if (vim.visualMode) {
            // Init visual op
            curStart = cursorMin(sel.head, sel.anchor);
            curEnd = cursorMax(sel.head, sel.anchor);
            linewise = vim.visualLine || operatorArgs.linewise;
            mode = vim.visualBlock ? 'block' :
                   linewise ? 'line' :
                   'char';
            cmSel = makeCmSelection(cm, {
              anchor: curStart,
              head: curEnd
            }, mode);
            if (linewise) {
              var ranges = cmSel.ranges;
              if (mode == 'block') {
                // Linewise operators in visual block mode extend to end of line
                for (var i = 0; i < ranges.length; i++) {
                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);
                }
              } else if (mode == 'line') {
                ranges[0].head = Pos(ranges[0].head.line + 1, 0);
              }
            }
          } else {
            // Init motion op
            curStart = copyCursor(newAnchor || oldAnchor);
            curEnd = copyCursor(newHead || oldHead);
            if (cursorIsBefore(curEnd, curStart)) {
              var tmp = curStart;
              curStart = curEnd;
              curEnd = tmp;
            }
            linewise = motionArgs.linewise || operatorArgs.linewise;
            if (linewise) {
              // Expand selection to entire line.
              expandSelectionToLine(cm, curStart, curEnd);
            } else if (motionArgs.forward) {
              // Clip to trailing newlines only if the motion goes forward.
              clipToLine(cm, curStart, curEnd);
            }
            mode = 'char';
            var exclusive = !motionArgs.inclusive || linewise;
            cmSel = makeCmSelection(cm, {
              anchor: curStart,
              head: curEnd
            }, mode, exclusive);
          }
          cm.setSelections(cmSel.ranges, cmSel.primary);
          vim.lastMotion = null;
          operatorArgs.repeat = repeat; // For indent in visual mode.
          operatorArgs.registerName = registerName;
          // Keep track of linewise as it affects how paste and change behave.
          operatorArgs.linewise = linewise;
          var operatorMoveTo = operators[operator](
            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);
          if (vim.visualMode) {
            exitVisualMode(cm, operatorMoveTo != null);
          }
          if (operatorMoveTo) {
            cm.setCursor(operatorMoveTo);
          }
        }
      },
      recordLastEdit: function(vim, inputState, actionCommand) {
        var macroModeState = vimGlobalState.macroModeState;
        if (macroModeState.isPlaying) { return; }
        vim.lastEditInputState = inputState;
        vim.lastEditActionCommand = actionCommand;
        macroModeState.lastInsertModeChanges.changes = [];
        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;
      }
    };

    /**
     * typedef {Object{line:number,ch:number}} Cursor An object containing the
     *     position of the cursor.
     */
    // All of the functions below return Cursor objects.
    var motions = {
      moveToTopLine: function(cm, _head, motionArgs) {
        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;
        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));
      },
      moveToMiddleLine: function(cm) {
        var range = getUserVisibleLines(cm);
        var line = Math.floor((range.top + range.bottom) * 0.5);
        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));
      },
      moveToBottomLine: function(cm, _head, motionArgs) {
        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;
        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));
      },
      expandToLine: function(_cm, head, motionArgs) {
        // Expands forward to end of line, and then to next line if repeat is
        // >1. Does not handle backward motion!
        var cur = head;
        return Pos(cur.line + motionArgs.repeat - 1, Infinity);
      },
      findNext: function(cm, _head, motionArgs) {
        var state = getSearchState(cm);
        var query = state.getQuery();
        if (!query) {
          return;
        }
        var prev = !motionArgs.forward;
        // If search is initiated with ? instead of /, negate direction.
        prev = (state.isReversed()) ? !prev : prev;
        highlightSearchMatches(cm, query);
        return findNext(cm, prev/** prev */, query, motionArgs.repeat);
      },
      goToMark: function(cm, _head, motionArgs, vim) {
        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);
        if (pos) {
          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;
        }
        return null;
      },
      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {
        if (vim.visualBlock && motionArgs.sameLine) {
          var sel = vim.sel;
          return [
            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),
            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))
          ];
        } else {
          return ([vim.sel.head, vim.sel.anchor]);
        }
      },
      jumpToMark: function(cm, head, motionArgs, vim) {
        var best = head;
        for (var i = 0; i < motionArgs.repeat; i++) {
          var cursor = best;
          for (var key in vim.marks) {
            if (!isLowerCase(key)) {
              continue;
            }
            var mark = vim.marks[key].find();
            var isWrongDirection = (motionArgs.forward) ?
              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);

            if (isWrongDirection) {
              continue;
            }
            if (motionArgs.linewise && (mark.line == cursor.line)) {
              continue;
            }

            var equal = cursorEqual(cursor, best);
            var between = (motionArgs.forward) ?
              cursorIsBetween(cursor, mark, best) :
              cursorIsBetween(best, mark, cursor);

            if (equal || between) {
              best = mark;
            }
          }
        }

        if (motionArgs.linewise) {
          // Vim places the cursor on the first non-whitespace character of
          // the line if there is one, else it places the cursor at the end
          // of the line, regardless of whether a mark was found.
          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));
        }
        return best;
      },
      moveByCharacters: function(_cm, head, motionArgs) {
        var cur = head;
        var repeat = motionArgs.repeat;
        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;
        return Pos(cur.line, ch);
      },
      moveByLines: function(cm, head, motionArgs, vim) {
        var cur = head;
        var endCh = cur.ch;
        // Depending what our last motion was, we may want to do different
        // things. If our last motion was moving vertically, we want to
        // preserve the HPos from our last horizontal move.  If our last motion
        // was going to the end of a line, moving vertically we should go to
        // the end of the line, etc.
        switch (vim.lastMotion) {
          case this.moveByLines:
          case this.moveByDisplayLines:
          case this.moveByScroll:
          case this.moveToColumn:
          case this.moveToEol:
            endCh = vim.lastHPos;
            break;
          default:
            vim.lastHPos = endCh;
        }
        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);
        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;
        var first = cm.firstLine();
        var last = cm.lastLine();
        // Vim go to line begin or line end when cursor at first/last line and
        // move to previous/next line is triggered.
        if (line < first && cur.line == first){
          return this.moveToStartOfLine(cm, head, motionArgs, vim);
        }else if (line > last && cur.line == last){
            return this.moveToEol(cm, head, motionArgs, vim);
        }
        if (motionArgs.toFirstChar){
          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));
          vim.lastHPos = endCh;
        }
        vim.lastHSPos = cm.charCoords(Pos(line, endCh),'div').left;
        return Pos(line, endCh);
      },
      moveByDisplayLines: function(cm, head, motionArgs, vim) {
        var cur = head;
        switch (vim.lastMotion) {
          case this.moveByDisplayLines:
          case this.moveByScroll:
          case this.moveByLines:
          case this.moveToColumn:
          case this.moveToEol:
            break;
          default:
            vim.lastHSPos = cm.charCoords(cur,'div').left;
        }
        var repeat = motionArgs.repeat;
        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);
        if (res.hitSide) {
          if (motionArgs.forward) {
            var lastCharCoords = cm.charCoords(res, 'div');
            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };
            var res = cm.coordsChar(goalCoords, 'div');
          } else {
            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');
            resCoords.left = vim.lastHSPos;
            res = cm.coordsChar(resCoords, 'div');
          }
        }
        vim.lastHPos = res.ch;
        return res;
      },
      moveByPage: function(cm, head, motionArgs) {
        // CodeMirror only exposes functions that move the cursor page down, so
        // doing this bad hack to move the cursor and move it back. evalInput
        // will move the cursor to where it should be in the end.
        var curStart = head;
        var repeat = motionArgs.repeat;
        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');
      },
      moveByParagraph: function(cm, head, motionArgs) {
        var dir = motionArgs.forward ? 1 : -1;
        return findParagraph(cm, head, motionArgs.repeat, dir);
      },
      moveBySentence: function(cm, head, motionArgs) {
        var dir = motionArgs.forward ? 1 : -1;
        return findSentence(cm, head, motionArgs.repeat, dir);
      },
      moveByScroll: function(cm, head, motionArgs, vim) {
        var scrollbox = cm.getScrollInfo();
        var curEnd = null;
        var repeat = motionArgs.repeat;
        if (!repeat) {
          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());
        }
        var orig = cm.charCoords(head, 'local');
        motionArgs.repeat = repeat;
        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);
        if (!curEnd) {
          return null;
        }
        var dest = cm.charCoords(curEnd, 'local');
        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);
        return curEnd;
      },
      moveByWords: function(cm, head, motionArgs) {
        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,
            !!motionArgs.wordEnd, !!motionArgs.bigWord);
      },
      moveTillCharacter: function(cm, _head, motionArgs) {
        var repeat = motionArgs.repeat;
        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,
            motionArgs.selectedCharacter);
        var increment = motionArgs.forward ? -1 : 1;
        recordLastCharacterSearch(increment, motionArgs);
        if (!curEnd) return null;
        curEnd.ch += increment;
        return curEnd;
      },
      moveToCharacter: function(cm, head, motionArgs) {
        var repeat = motionArgs.repeat;
        recordLastCharacterSearch(0, motionArgs);
        return moveToCharacter(cm, repeat, motionArgs.forward,
            motionArgs.selectedCharacter) || head;
      },
      moveToSymbol: function(cm, head, motionArgs) {
        var repeat = motionArgs.repeat;
        return findSymbol(cm, repeat, motionArgs.forward,
            motionArgs.selectedCharacter) || head;
      },
      moveToColumn: function(cm, head, motionArgs, vim) {
        var repeat = motionArgs.repeat;
        // repeat is equivalent to which column we want to move to!
        vim.lastHPos = repeat - 1;
        vim.lastHSPos = cm.charCoords(head,'div').left;
        return moveToColumn(cm, repeat);
      },
      moveToEol: function(cm, head, motionArgs, vim) {
        var cur = head;
        vim.lastHPos = Infinity;
        var retval= Pos(cur.line + motionArgs.repeat - 1, Infinity);
        var end=cm.clipPos(retval);
        end.ch--;
        vim.lastHSPos = cm.charCoords(end,'div').left;
        return retval;
      },
      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {
        // Go to the start of the line where the text begins, or the end for
        // whitespace-only lines
        var cursor = head;
        return Pos(cursor.line,
                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));
      },
      moveToMatchedSymbol: function(cm, head) {
        var cursor = head;
        var line = cursor.line;
        var ch = cursor.ch;
        var lineText = cm.getLine(line);
        var symbol;
        for (; ch < lineText.length; ch++) {
          symbol = lineText.charAt(ch);
          if (symbol && isMatchableSymbol(symbol)) {
            var style = cm.getTokenTypeAt(Pos(line, ch + 1));
            if (style !== "string" && style !== "comment") {
              break;
            }
          }
        }
        if (ch < lineText.length) {
          var matched = cm.findMatchingBracket(Pos(line, ch));
          return matched.to;
        } else {
          return cursor;
        }
      },
      moveToStartOfLine: function(_cm, head) {
        return Pos(head.line, 0);
      },
      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {
        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();
        if (motionArgs.repeatIsExplicit) {
          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');
        }
        return Pos(lineNum,
                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));
      },
      textObjectManipulation: function(cm, head, motionArgs, vim) {
        // TODO: lots of possible exceptions that can be thrown here. Try da(
        //     outside of a () block.

        // TODO: adding <> >< to this map doesn't work, presumably because
        // they're operators
        var mirroredPairs = {'(': ')', ')': '(',
                             '{': '}', '}': '{',
                             '[': ']', ']': '['};
        var selfPaired = {'\'': true, '"': true};

        var character = motionArgs.selectedCharacter;
        // 'b' refers to  '()' block.
        // 'B' refers to  '{}' block.
        if (character == 'b') {
          character = '(';
        } else if (character == 'B') {
          character = '{';
        }

        // Inclusive is the difference between a and i
        // TODO: Instead of using the additional text object map to perform text
        //     object operations, merge the map into the defaultKeyMap and use
        //     motionArgs to define behavior. Define separate entries for 'aw',
        //     'iw', 'a[', 'i[', etc.
        var inclusive = !motionArgs.textObjectInner;

        var tmp;
        if (mirroredPairs[character]) {
          tmp = selectCompanionObject(cm, head, character, inclusive);
        } else if (selfPaired[character]) {
          tmp = findBeginningAndEnd(cm, head, character, inclusive);
        } else if (character === 'W') {
          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,
                                                     true /** bigWord */);
        } else if (character === 'w') {
          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,
                                                     false /** bigWord */);
        } else if (character === 'p') {
          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);
          motionArgs.linewise = true;
          if (vim.visualMode) {
            if (!vim.visualLine) { vim.visualLine = true; }
          } else {
            var operatorArgs = vim.inputState.operatorArgs;
            if (operatorArgs) { operatorArgs.linewise = true; }
            tmp.end.line--;
          }
        } else {
          // No text object defined for this, don't move.
          return null;
        }

        if (!cm.state.vim.visualMode) {
          return [tmp.start, tmp.end];
        } else {
          return expandSelection(cm, tmp.start, tmp.end);
        }
      },

      repeatLastCharacterSearch: function(cm, head, motionArgs) {
        var lastSearch = vimGlobalState.lastCharacterSearch;
        var repeat = motionArgs.repeat;
        var forward = motionArgs.forward === lastSearch.forward;
        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);
        cm.moveH(-increment, 'char');
        motionArgs.inclusive = forward ? true : false;
        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);
        if (!curEnd) {
          cm.moveH(increment, 'char');
          return head;
        }
        curEnd.ch += increment;
        return curEnd;
      }
    };

    function defineMotion(name, fn) {
      motions[name] = fn;
    }

    function fillArray(val, times) {
      var arr = [];
      for (var i = 0; i < times; i++) {
        arr.push(val);
      }
      return arr;
    }
    /**
     * An operator acts on a text selection. It receives the list of selections
     * as input. The corresponding CodeMirror selection is guaranteed to
    * match the input selection.
     */
    var operators = {
      change: function(cm, args, ranges) {
        var finalHead, text;
        var vim = cm.state.vim;
        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock = vim.visualBlock;
        if (!vim.visualMode) {
          var anchor = ranges[0].anchor,
              head = ranges[0].head;
          text = cm.getRange(anchor, head);
          var lastState = vim.lastEditInputState || {};
          if (lastState.motion == "moveByWords" && !isWhiteSpaceString(text)) {
            // Exclude trailing whitespace if the range is not all whitespace.
            var match = (/\s+$/).exec(text);
            if (match && lastState.motionArgs && lastState.motionArgs.forward) {
              head = offsetCursor(head, 0, - match[0].length);
              text = text.slice(0, - match[0].length);
            }
          }
          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);
          var wasLastLine = cm.firstLine() == cm.lastLine();
          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {
            cm.replaceRange('', prevLineEnd, head);
          } else {
            cm.replaceRange('', anchor, head);
          }
          if (args.linewise) {
            // Push the next line back down, if there is a next line.
            if (!wasLastLine) {
              cm.setCursor(prevLineEnd);
              CodeMirror.commands.newlineAndIndent(cm);
            }
            // make sure cursor ends up at the end of the line.
            anchor.ch = Number.MAX_VALUE;
          }
          finalHead = anchor;
        } else {
          text = cm.getSelection();
          var replacement = fillArray('', ranges.length);
          cm.replaceSelections(replacement);
          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);
        }
        vimGlobalState.registerController.pushText(
            args.registerName, 'change', text,
            args.linewise, ranges.length > 1);
        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);
      },
      // delete is a javascript keyword.
      'delete': function(cm, args, ranges) {
        var finalHead, text;
        var vim = cm.state.vim;
        if (!vim.visualBlock) {
          var anchor = ranges[0].anchor,
              head = ranges[0].head;
          if (args.linewise &&
              head.line != cm.firstLine() &&
              anchor.line == cm.lastLine() &&
              anchor.line == head.line - 1) {
            // Special case for dd on last line (and first line).
            if (anchor.line == cm.firstLine()) {
              anchor.ch = 0;
            } else {
              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));
            }
          }
          text = cm.getRange(anchor, head);
          cm.replaceRange('', anchor, head);
          finalHead = anchor;
          if (args.linewise) {
            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);
          }
        } else {
          text = cm.getSelection();
          var replacement = fillArray('', ranges.length);
          cm.replaceSelections(replacement);
          finalHead = ranges[0].anchor;
        }
        vimGlobalState.registerController.pushText(
            args.registerName, 'delete', text,
            args.linewise, vim.visualBlock);
        var includeLineBreak = vim.insertMode
        return clipCursorToContent(cm, finalHead, includeLineBreak);
      },
      indent: function(cm, args, ranges) {
        var vim = cm.state.vim;
        var startLine = ranges[0].anchor.line;
        var endLine = vim.visualBlock ?
          ranges[ranges.length - 1].anchor.line :
          ranges[0].head.line;
        // In visual mode, n> shifts the selection right n times, instead of
        // shifting n lines right once.
        var repeat = (vim.visualMode) ? args.repeat : 1;
        if (args.linewise) {
          // The only way to delete a newline is to delete until the start of
          // the next line, so in linewise mode evalInput will include the next
          // line. We don't want this in indent, so we go back a line.
          endLine--;
        }
        for (var i = startLine; i <= endLine; i++) {
          for (var j = 0; j < repeat; j++) {
            cm.indentLine(i, args.indentRight);
          }
        }
        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);
      },
      changeCase: function(cm, args, ranges, oldAnchor, newHead) {
        var selections = cm.getSelections();
        var swapped = [];
        var toLower = args.toLower;
        for (var j = 0; j < selections.length; j++) {
          var toSwap = selections[j];
          var text = '';
          if (toLower === true) {
            text = toSwap.toLowerCase();
          } else if (toLower === false) {
            text = toSwap.toUpperCase();
          } else {
            for (var i = 0; i < toSwap.length; i++) {
              var character = toSwap.charAt(i);
              text += isUpperCase(character) ? character.toLowerCase() :
                  character.toUpperCase();
            }
          }
          swapped.push(text);
        }
        cm.replaceSelections(swapped);
        if (args.shouldMoveCursor){
          return newHead;
        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {
          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);
        } else if (args.linewise){
          return oldAnchor;
        } else {
          return cursorMin(ranges[0].anchor, ranges[0].head);
        }
      },
      yank: function(cm, args, ranges, oldAnchor) {
        var vim = cm.state.vim;
        var text = cm.getSelection();
        var endPos = vim.visualMode
          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)
          : oldAnchor;
        vimGlobalState.registerController.pushText(
            args.registerName, 'yank',
            text, args.linewise, vim.visualBlock);
        return endPos;
      }
    };

    function defineOperator(name, fn) {
      operators[name] = fn;
    }

    var actions = {
      jumpListWalk: function(cm, actionArgs, vim) {
        if (vim.visualMode) {
          return;
        }
        var repeat = actionArgs.repeat;
        var forward = actionArgs.forward;
        var jumpList = vimGlobalState.jumpList;

        var mark = jumpList.move(cm, forward ? repeat : -repeat);
        var markPos = mark ? mark.find() : undefined;
        markPos = markPos ? markPos : cm.getCursor();
        cm.setCursor(markPos);
      },
      scroll: function(cm, actionArgs, vim) {
        if (vim.visualMode) {
          return;
        }
        var repeat = actionArgs.repeat || 1;
        var lineHeight = cm.defaultTextHeight();
        var top = cm.getScrollInfo().top;
        var delta = lineHeight * repeat;
        var newPos = actionArgs.forward ? top + delta : top - delta;
        var cursor = copyCursor(cm.getCursor());
        var cursorCoords = cm.charCoords(cursor, 'local');
        if (actionArgs.forward) {
          if (newPos > cursorCoords.top) {
             cursor.line += (newPos - cursorCoords.top) / lineHeight;
             cursor.line = Math.ceil(cursor.line);
             cm.setCursor(cursor);
             cursorCoords = cm.charCoords(cursor, 'local');
             cm.scrollTo(null, cursorCoords.top);
          } else {
             // Cursor stays within bounds.  Just reposition the scroll window.
             cm.scrollTo(null, newPos);
          }
        } else {
          var newBottom = newPos + cm.getScrollInfo().clientHeight;
          if (newBottom < cursorCoords.bottom) {
             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;
             cursor.line = Math.floor(cursor.line);
             cm.setCursor(cursor);
             cursorCoords = cm.charCoords(cursor, 'local');
             cm.scrollTo(
                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);
          } else {
             // Cursor stays within bounds.  Just reposition the scroll window.
             cm.scrollTo(null, newPos);
          }
        }
      },
      scrollToCursor: function(cm, actionArgs) {
        var lineNum = cm.getCursor().line;
        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');
        var height = cm.getScrollInfo().clientHeight;
        var y = charCoords.top;
        var lineHeight = charCoords.bottom - y;
        switch (actionArgs.position) {
          case 'center': y = y - (height / 2) + lineHeight;
            break;
          case 'bottom': y = y - height + lineHeight;
            break;
        }
        cm.scrollTo(null, y);
      },
      replayMacro: function(cm, actionArgs, vim) {
        var registerName = actionArgs.selectedCharacter;
        var repeat = actionArgs.repeat;
        var macroModeState = vimGlobalState.macroModeState;
        if (registerName == '@') {
          registerName = macroModeState.latestRegister;
        }
        while(repeat--){
          executeMacroRegister(cm, vim, macroModeState, registerName);
        }
      },
      enterMacroRecordMode: function(cm, actionArgs) {
        var macroModeState = vimGlobalState.macroModeState;
        var registerName = actionArgs.selectedCharacter;
        if (vimGlobalState.registerController.isValidRegister(registerName)) {
          macroModeState.enterMacroRecordMode(cm, registerName);
        }
      },
      toggleOverwrite: function(cm) {
        if (!cm.state.overwrite) {
          cm.toggleOverwrite(true);
          cm.setOption('keyMap', 'vim-replace');
          CodeMirror.signal(cm, "vim-mode-change", {mode: "replace"});
        } else {
          cm.toggleOverwrite(false);
          cm.setOption('keyMap', 'vim-insert');
          CodeMirror.signal(cm, "vim-mode-change", {mode: "insert"});
        }
      },
      enterInsertMode: function(cm, actionArgs, vim) {
        if (cm.getOption('readOnly')) { return; }
        vim.insertMode = true;
        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;
        var insertAt = (actionArgs) ? actionArgs.insertAt : null;
        var sel = vim.sel;
        var head = actionArgs.head || cm.getCursor('head');
        var height = cm.listSelections().length;
        if (insertAt == 'eol') {
          head = Pos(head.line, lineLength(cm, head.line));
        } else if (insertAt == 'charAfter') {
          head = offsetCursor(head, 0, 1);
        } else if (insertAt == 'firstNonBlank') {
          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);
        } else if (insertAt == 'startOfSelectedArea') {
          if (!vim.visualBlock) {
            if (sel.head.line < sel.anchor.line) {
              head = sel.head;
            } else {
              head = Pos(sel.anchor.line, 0);
            }
          } else {
            head = Pos(
                Math.min(sel.head.line, sel.anchor.line),
                Math.min(sel.head.ch, sel.anchor.ch));
            height = Math.abs(sel.head.line - sel.anchor.line) + 1;
          }
        } else if (insertAt == 'endOfSelectedArea') {
          if (!vim.visualBlock) {
            if (sel.head.line >= sel.anchor.line) {
              head = offsetCursor(sel.head, 0, 1);
            } else {
              head = Pos(sel.anchor.line, 0);
            }
          } else {
            head = Pos(
                Math.min(sel.head.line, sel.anchor.line),
                Math.max(sel.head.ch + 1, sel.anchor.ch));
            height = Math.abs(sel.head.line - sel.anchor.line) + 1;
          }
        } else if (insertAt == 'inplace') {
          if (vim.visualMode){
            return;
          }
        }
        cm.setOption('disableInput', false);
        if (actionArgs && actionArgs.replace) {
          // Handle Replace-mode as a special case of insert mode.
          cm.toggleOverwrite(true);
          cm.setOption('keyMap', 'vim-replace');
          CodeMirror.signal(cm, "vim-mode-change", {mode: "replace"});
        } else {
          cm.toggleOverwrite(false);
          cm.setOption('keyMap', 'vim-insert');
          CodeMirror.signal(cm, "vim-mode-change", {mode: "insert"});
        }
        if (!vimGlobalState.macroModeState.isPlaying) {
          // Only record if not replaying.
          cm.on('change', onChange);
          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);
        }
        if (vim.visualMode) {
          exitVisualMode(cm);
        }
        selectForInsert(cm, head, height);
      },
      toggleVisualMode: function(cm, actionArgs, vim) {
        var repeat = actionArgs.repeat;
        var anchor = cm.getCursor();
        var head;
        // TODO: The repeat should actually select number of characters/lines
        //     equal to the repeat times the size of the previous visual
        //     operation.
        if (!vim.visualMode) {
          // Entering visual mode
          vim.visualMode = true;
          vim.visualLine = !!actionArgs.linewise;
          vim.visualBlock = !!actionArgs.blockwise;
          head = clipCursorToContent(
              cm, Pos(anchor.line, anchor.ch + repeat - 1),
              true /** includeLineBreak */);
          vim.sel = {
            anchor: anchor,
            head: head
          };
          CodeMirror.signal(cm, "vim-mode-change", {mode: "visual", subMode: vim.visualLine ? "linewise" : vim.visualBlock ? "blockwise" : ""});
          updateCmSelection(cm);
          updateMark(cm, vim, '<', cursorMin(anchor, head));
          updateMark(cm, vim, '>', cursorMax(anchor, head));
        } else if (vim.visualLine ^ actionArgs.linewise ||
            vim.visualBlock ^ actionArgs.blockwise) {
          // Toggling between modes
          vim.visualLine = !!actionArgs.linewise;
          vim.visualBlock = !!actionArgs.blockwise;
          CodeMirror.signal(cm, "vim-mode-change", {mode: "visual", subMode: vim.visualLine ? "linewise" : vim.visualBlock ? "blockwise" : ""});
          updateCmSelection(cm);
        } else {
          exitVisualMode(cm);
        }
      },
      reselectLastSelection: function(cm, _actionArgs, vim) {
        var lastSelection = vim.lastSelection;
        if (vim.visualMode) {
          updateLastSelection(cm, vim);
        }
        if (lastSelection) {
          var anchor = lastSelection.anchorMark.find();
          var head = lastSelection.headMark.find();
          if (!anchor || !head) {
            // If the marks have been destroyed due to edits, do nothing.
            return;
          }
          vim.sel = {
            anchor: anchor,
            head: head
          };
          vim.visualMode = true;
          vim.visualLine = lastSelection.visualLine;
          vim.visualBlock = lastSelection.visualBlock;
          updateCmSelection(cm);
          updateMark(cm, vim, '<', cursorMin(anchor, head));
          updateMark(cm, vim, '>', cursorMax(anchor, head));
          CodeMirror.signal(cm, 'vim-mode-change', {
            mode: 'visual',
            subMode: vim.visualLine ? 'linewise' :
                     vim.visualBlock ? 'blockwise' : ''});
        }
      },
      joinLines: function(cm, actionArgs, vim) {
        var curStart, curEnd;
        if (vim.visualMode) {
          curStart = cm.getCursor('anchor');
          curEnd = cm.getCursor('head');
          if (cursorIsBefore(curEnd, curStart)) {
            var tmp = curEnd;
            curEnd = curStart;
            curStart = tmp;
          }
          curEnd.ch = lineLength(cm, curEnd.line) - 1;
        } else {
          // Repeat is the number of lines to join. Minimum 2 lines.
          var repeat = Math.max(actionArgs.repeat, 2);
          curStart = cm.getCursor();
          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,
                                               Infinity));
        }
        var finalCh = 0;
        for (var i = curStart.line; i < curEnd.line; i++) {
          finalCh = lineLength(cm, curStart.line);
          var tmp = Pos(curStart.line + 1,
                        lineLength(cm, curStart.line + 1));
          var text = cm.getRange(curStart, tmp);
          text = text.replace(/\n\s*/g, ' ');
          cm.replaceRange(text, curStart, tmp);
        }
        var curFinalPos = Pos(curStart.line, finalCh);
        if (vim.visualMode) {
          exitVisualMode(cm, false);
        }
        cm.setCursor(curFinalPos);
      },
      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {
        vim.insertMode = true;
        var insertAt = copyCursor(cm.getCursor());
        if (insertAt.line === cm.firstLine() && !actionArgs.after) {
          // Special case for inserting newline before start of document.
          cm.replaceRange('\n', Pos(cm.firstLine(), 0));
          cm.setCursor(cm.firstLine(), 0);
        } else {
          insertAt.line = (actionArgs.after) ? insertAt.line :
              insertAt.line - 1;
          insertAt.ch = lineLength(cm, insertAt.line);
          cm.setCursor(insertAt);
          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||
              CodeMirror.commands.newlineAndIndent;
          newlineFn(cm);
        }
        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);
      },
      paste: function(cm, actionArgs, vim) {
        var cur = copyCursor(cm.getCursor());
        var register = vimGlobalState.registerController.getRegister(
            actionArgs.registerName);
        var text = register.toString();
        if (!text) {
          return;
        }
        if (actionArgs.matchIndent) {
          var tabSize = cm.getOption("tabSize");
          // length that considers tabs and tabSize
          var whitespaceLength = function(str) {
            var tabs = (str.split("\t").length - 1);
            var spaces = (str.split(" ").length - 1);
            return tabs * tabSize + spaces * 1;
          };
          var currentLine = cm.getLine(cm.getCursor().line);
          var indent = whitespaceLength(currentLine.match(/^\s*/)[0]);
          // chomp last newline b/c don't want it to match /^\s*/gm
          var chompedText = text.replace(/\n$/, '');
          var wasChomped = text !== chompedText;
          var firstIndent = whitespaceLength(text.match(/^\s*/)[0]);
          var text = chompedText.replace(/^\s*/gm, function(wspace) {
            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);
            if (newIndent < 0) {
              return "";
            }
            else if (cm.getOption("indentWithTabs")) {
              var quotient = Math.floor(newIndent / tabSize);
              return Array(quotient + 1).join('\t');
            }
            else {
              return Array(newIndent + 1).join(' ');
            }
          });
          text += wasChomped ? "\n" : "";
        }
        if (actionArgs.repeat > 1) {
          var text = Array(actionArgs.repeat + 1).join(text);
        }
        var linewise = register.linewise;
        var blockwise = register.blockwise;
        if (linewise) {
          if(vim.visualMode) {
            text = vim.visualLine ? text.slice(0, -1) : '\n' + text.slice(0, text.length - 1) + '\n';
          } else if (actionArgs.after) {
            // Move the newline at the end to the start instead, and paste just
            // before the newline character of the line we are on right now.
            text = '\n' + text.slice(0, text.length - 1);
            cur.ch = lineLength(cm, cur.line);
          } else {
            cur.ch = 0;
          }
        } else {
          if (blockwise) {
            text = text.split('\n');
            for (var i = 0; i < text.length; i++) {
              text[i] = (text[i] == '') ? ' ' : text[i];
            }
          }
          cur.ch += actionArgs.after ? 1 : 0;
        }
        var curPosFinal;
        var idx;
        if (vim.visualMode) {
          //  save the pasted text for reselection if the need arises
          vim.lastPastedText = text;
          var lastSelectionCurEnd;
          var selectedArea = getSelectedAreaRange(cm, vim);
          var selectionStart = selectedArea[0];
          var selectionEnd = selectedArea[1];
          var selectedText = cm.getSelection();
          var selections = cm.listSelections();
          var emptyStrings = new Array(selections.length).join('1').split('1');
          // save the curEnd marker before it get cleared due to cm.replaceRange.
          if (vim.lastSelection) {
            lastSelectionCurEnd = vim.lastSelection.headMark.find();
          }
          // push the previously selected text to unnamed register
          vimGlobalState.registerController.unnamedRegister.setText(selectedText);
          if (blockwise) {
            // first delete the selected text
            cm.replaceSelections(emptyStrings);
            // Set new selections as per the block length of the yanked text
            selectionEnd = Pos(selectionStart.line + text.length-1, selectionStart.ch);
            cm.setCursor(selectionStart);
            selectBlock(cm, selectionEnd);
            cm.replaceSelections(text);
            curPosFinal = selectionStart;
          } else if (vim.visualBlock) {
            cm.replaceSelections(emptyStrings);
            cm.setCursor(selectionStart);
            cm.replaceRange(text, selectionStart, selectionStart);
            curPosFinal = selectionStart;
          } else {
            cm.replaceRange(text, selectionStart, selectionEnd);
            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);
          }
          // restore the the curEnd marker
          if(lastSelectionCurEnd) {
            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);
          }
          if (linewise) {
            curPosFinal.ch=0;
          }
        } else {
          if (blockwise) {
            cm.setCursor(cur);
            for (var i = 0; i < text.length; i++) {
              var line = cur.line+i;
              if (line > cm.lastLine()) {
                cm.replaceRange('\n',  Pos(line, 0));
              }
              var lastCh = lineLength(cm, line);
              if (lastCh < cur.ch) {
                extendLineToColumn(cm, line, cur.ch);
              }
            }
            cm.setCursor(cur);
            selectBlock(cm, Pos(cur.line + text.length-1, cur.ch));
            cm.replaceSelections(text);
            curPosFinal = cur;
          } else {
            cm.replaceRange(text, cur);
            // Now fine tune the cursor to where we want it.
            if (linewise && actionArgs.after) {
              curPosFinal = Pos(
              cur.line + 1,
              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));
            } else if (linewise && !actionArgs.after) {
              curPosFinal = Pos(
                cur.line,
                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));
            } else if (!linewise && actionArgs.after) {
              idx = cm.indexFromPos(cur);
              curPosFinal = cm.posFromIndex(idx + text.length - 1);
            } else {
              idx = cm.indexFromPos(cur);
              curPosFinal = cm.posFromIndex(idx + text.length);
            }
          }
        }
        if (vim.visualMode) {
          exitVisualMode(cm, false);
        }
        cm.setCursor(curPosFinal);
      },
      undo: function(cm, actionArgs) {
        cm.operation(function() {
          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();
          cm.setCursor(cm.getCursor('anchor'));
        });
      },
      redo: function(cm, actionArgs) {
        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();
      },
      setRegister: function(_cm, actionArgs, vim) {
        vim.inputState.registerName = actionArgs.selectedCharacter;
      },
      setMark: function(cm, actionArgs, vim) {
        var markName = actionArgs.selectedCharacter;
        updateMark(cm, vim, markName, cm.getCursor());
      },
      replace: function(cm, actionArgs, vim) {
        var replaceWith = actionArgs.selectedCharacter;
        var curStart = cm.getCursor();
        var replaceTo;
        var curEnd;
        var selections = cm.listSelections();
        if (vim.visualMode) {
          curStart = cm.getCursor('start');
          curEnd = cm.getCursor('end');
        } else {
          var line = cm.getLine(curStart.line);
          replaceTo = curStart.ch + actionArgs.repeat;
          if (replaceTo > line.length) {
            replaceTo=line.length;
          }
          curEnd = Pos(curStart.line, replaceTo);
        }
        if (replaceWith=='\n') {
          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);
          // special case, where vim help says to replace by just one line-break
          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);
        } else {
          var replaceWithStr = cm.getRange(curStart, curEnd);
          //replace all characters in range by selected, but keep linebreaks
          replaceWithStr = replaceWithStr.replace(/[^\n]/g, replaceWith);
          if (vim.visualBlock) {
            // Tabs are split in visua block before replacing
            var spaces = new Array(cm.getOption("tabSize")+1).join(' ');
            replaceWithStr = cm.getSelection();
            replaceWithStr = replaceWithStr.replace(/\t/g, spaces).replace(/[^\n]/g, replaceWith).split('\n');
            cm.replaceSelections(replaceWithStr);
          } else {
            cm.replaceRange(replaceWithStr, curStart, curEnd);
          }
          if (vim.visualMode) {
            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?
                         selections[0].anchor : selections[0].head;
            cm.setCursor(curStart);
            exitVisualMode(cm, false);
          } else {
            cm.setCursor(offsetCursor(curEnd, 0, -1));
          }
        }
      },
      incrementNumberToken: function(cm, actionArgs) {
        var cur = cm.getCursor();
        var lineStr = cm.getLine(cur.line);
        var re = /(-?)(?:(0x)([\da-f]+)|(0b|0|)(\d+))/gi;
        var match;
        var start;
        var end;
        var numberStr;
        while ((match = re.exec(lineStr)) !== null) {
          start = match.index;
          end = start + match[0].length;
          if (cur.ch < end)break;
        }
        if (!actionArgs.backtrack && (end <= cur.ch))return;
        if (match) {
          var baseStr = match[2] || match[4]
          var digits = match[3] || match[5]
          var increment = actionArgs.increase ? 1 : -1;
          var base = {'0b': 2, '0': 8, '': 10, '0x': 16}[baseStr.toLowerCase()];
          var number = parseInt(match[1] + digits, base) + (increment * actionArgs.repeat);
          numberStr = number.toString(base);
          var zeroPadding = baseStr ? new Array(digits.length - numberStr.length + 1 + match[1].length).join('0') : ''
          if (numberStr.charAt(0) === '-') {
            numberStr = '-' + baseStr + zeroPadding + numberStr.substr(1);
          } else {
            numberStr = baseStr + zeroPadding + numberStr;
          }
          var from = Pos(cur.line, start);
          var to = Pos(cur.line, end);
          cm.replaceRange(numberStr, from, to);
        } else {
          return;
        }
        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));
      },
      repeatLastEdit: function(cm, actionArgs, vim) {
        var lastEditInputState = vim.lastEditInputState;
        if (!lastEditInputState) { return; }
        var repeat = actionArgs.repeat;
        if (repeat && actionArgs.repeatIsExplicit) {
          vim.lastEditInputState.repeatOverride = repeat;
        } else {
          repeat = vim.lastEditInputState.repeatOverride || repeat;
        }
        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);
      },
      indent: function(cm, actionArgs) {
        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);
      },
      exitInsertMode: exitInsertMode
    };

    function defineAction(name, fn) {
      actions[name] = fn;
    }

    /*
     * Below are miscellaneous utility functions used by vim.js
     */

    /**
     * Clips cursor to ensure that line is within the buffer's range
     * If includeLineBreak is true, then allow cur.ch == lineLength.
     */
    function clipCursorToContent(cm, cur, includeLineBreak) {
      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );
      var maxCh = lineLength(cm, line) - 1;
      maxCh = (includeLineBreak) ? maxCh + 1 : maxCh;
      var ch = Math.min(Math.max(0, cur.ch), maxCh);
      return Pos(line, ch);
    }
    function copyArgs(args) {
      var ret = {};
      for (var prop in args) {
        if (args.hasOwnProperty(prop)) {
          ret[prop] = args[prop];
        }
      }
      return ret;
    }
    function offsetCursor(cur, offsetLine, offsetCh) {
      if (typeof offsetLine === 'object') {
        offsetCh = offsetLine.ch;
        offsetLine = offsetLine.line;
      }
      return Pos(cur.line + offsetLine, cur.ch + offsetCh);
    }
    function getOffset(anchor, head) {
      return {
        line: head.line - anchor.line,
        ch: head.line - anchor.line
      };
    }
    function commandMatches(keys, keyMap, context, inputState) {
      // Partial matches are not applied. They inform the key handler
      // that the current key sequence is a subsequence of a valid key
      // sequence, so that the key buffer is not cleared.
      var match, partial = [], full = [];
      for (var i = 0; i < keyMap.length; i++) {
        var command = keyMap[i];
        if (context == 'insert' && command.context != 'insert' ||
            command.context && command.context != context ||
            inputState.operator && command.type == 'action' ||
            !(match = commandMatch(keys, command.keys))) { continue; }
        if (match == 'partial') { partial.push(command); }
        if (match == 'full') { full.push(command); }
      }
      return {
        partial: partial.length && partial,
        full: full.length && full
      };
    }
    function commandMatch(pressed, mapped) {
      if (mapped.slice(-11) == '<character>') {
        // Last character matches anything.
        var prefixLen = mapped.length - 11;
        var pressedPrefix = pressed.slice(0, prefixLen);
        var mappedPrefix = mapped.slice(0, prefixLen);
        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :
               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;
      } else {
        return pressed == mapped ? 'full' :
               mapped.indexOf(pressed) == 0 ? 'partial' : false;
      }
    }
    function lastChar(keys) {
      var match = /^.*(<[^>]+>)$/.exec(keys);
      var selectedCharacter = match ? match[1] : keys.slice(-1);
      if (selectedCharacter.length > 1){
        switch(selectedCharacter){
          case '<CR>':
            selectedCharacter='\n';
            break;
          case '<Space>':
            selectedCharacter=' ';
            break;
          default:
            selectedCharacter='';
            break;
        }
      }
      return selectedCharacter;
    }
    function repeatFn(cm, fn, repeat) {
      return function() {
        for (var i = 0; i < repeat; i++) {
          fn(cm);
        }
      };
    }
    function copyCursor(cur) {
      return Pos(cur.line, cur.ch);
    }
    function cursorEqual(cur1, cur2) {
      return cur1.ch == cur2.ch && cur1.line == cur2.line;
    }
    function cursorIsBefore(cur1, cur2) {
      if (cur1.line < cur2.line) {
        return true;
      }
      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {
        return true;
      }
      return false;
    }
    function cursorMin(cur1, cur2) {
      if (arguments.length > 2) {
        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));
      }
      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;
    }
    function cursorMax(cur1, cur2) {
      if (arguments.length > 2) {
        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));
      }
      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;
    }
    function cursorIsBetween(cur1, cur2, cur3) {
      // returns true if cur2 is between cur1 and cur3.
      var cur1before2 = cursorIsBefore(cur1, cur2);
      var cur2before3 = cursorIsBefore(cur2, cur3);
      return cur1before2 && cur2before3;
    }
    function lineLength(cm, lineNum) {
      return cm.getLine(lineNum).length;
    }
    function trim(s) {
      if (s.trim) {
        return s.trim();
      }
      return s.replace(/^\s+|\s+$/g, '');
    }
    function escapeRegex(s) {
      return s.replace(/([.?*+$\[\]\/\\(){}|\-])/g, '\\$1');
    }
    function extendLineToColumn(cm, lineNum, column) {
      var endCh = lineLength(cm, lineNum);
      var spaces = new Array(column-endCh+1).join(' ');
      cm.setCursor(Pos(lineNum, endCh));
      cm.replaceRange(spaces, cm.getCursor());
    }
    // This functions selects a rectangular block
    // of text with selectionEnd as any of its corner
    // Height of block:
    // Difference in selectionEnd.line and first/last selection.line
    // Width of the block:
    // Distance between selectionEnd.ch and any(first considered here) selection.ch
    function selectBlock(cm, selectionEnd) {
      var selections = [], ranges = cm.listSelections();
      var head = copyCursor(cm.clipPos(selectionEnd));
      var isClipped = !cursorEqual(selectionEnd, head);
      var curHead = cm.getCursor('head');
      var primIndex = getIndex(ranges, curHead);
      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);
      var max = ranges.length - 1;
      var index = max - primIndex > primIndex ? max : 0;
      var base = ranges[index].anchor;

      var firstLine = Math.min(base.line, head.line);
      var lastLine = Math.max(base.line, head.line);
      var baseCh = base.ch, headCh = head.ch;

      var dir = ranges[index].head.ch - baseCh;
      var newDir = headCh - baseCh;
      if (dir > 0 && newDir <= 0) {
        baseCh++;
        if (!isClipped) { headCh--; }
      } else if (dir < 0 && newDir >= 0) {
        baseCh--;
        if (!wasClipped) { headCh++; }
      } else if (dir < 0 && newDir == -1) {
        baseCh--;
        headCh++;
      }
      for (var line = firstLine; line <= lastLine; line++) {
        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};
        selections.push(range);
      }
      cm.setSelections(selections);
      selectionEnd.ch = headCh;
      base.ch = baseCh;
      return base;
    }
    function selectForInsert(cm, head, height) {
      var sel = [];
      for (var i = 0; i < height; i++) {
        var lineHead = offsetCursor(head, i, 0);
        sel.push({anchor: lineHead, head: lineHead});
      }
      cm.setSelections(sel, 0);
    }
    // getIndex returns the index of the cursor in the selections.
    function getIndex(ranges, cursor, end) {
      for (var i = 0; i < ranges.length; i++) {
        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);
        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);
        if (atAnchor || atHead) {
          return i;
        }
      }
      return -1;
    }
    function getSelectedAreaRange(cm, vim) {
      var lastSelection = vim.lastSelection;
      var getCurrentSelectedAreaRange = function() {
        var selections = cm.listSelections();
        var start =  selections[0];
        var end = selections[selections.length-1];
        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;
        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;
        return [selectionStart, selectionEnd];
      };
      var getLastSelectedAreaRange = function() {
        var selectionStart = cm.getCursor();
        var selectionEnd = cm.getCursor();
        var block = lastSelection.visualBlock;
        if (block) {
          var width = block.width;
          var height = block.height;
          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);
          var selections = [];
          // selectBlock creates a 'proper' rectangular block.
          // We do not want that in all cases, so we manually set selections.
          for (var i = selectionStart.line; i < selectionEnd.line; i++) {
            var anchor = Pos(i, selectionStart.ch);
            var head = Pos(i, selectionEnd.ch);
            var range = {anchor: anchor, head: head};
            selections.push(range);
          }
          cm.setSelections(selections);
        } else {
          var start = lastSelection.anchorMark.find();
          var end = lastSelection.headMark.find();
          var line = end.line - start.line;
          var ch = end.ch - start.ch;
          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};
          if (lastSelection.visualLine) {
            selectionStart = Pos(selectionStart.line, 0);
            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));
          }
          cm.setSelection(selectionStart, selectionEnd);
        }
        return [selectionStart, selectionEnd];
      };
      if (!vim.visualMode) {
      // In case of replaying the action.
        return getLastSelectedAreaRange();
      } else {
        return getCurrentSelectedAreaRange();
      }
    }
    // Updates the previous selection with the current selection's values. This
    // should only be called in visual mode.
    function updateLastSelection(cm, vim) {
      var anchor = vim.sel.anchor;
      var head = vim.sel.head;
      // To accommodate the effect of lastPastedText in the last selection
      if (vim.lastPastedText) {
        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);
        vim.lastPastedText = null;
      }
      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),
                           'headMark': cm.setBookmark(head),
                           'anchor': copyCursor(anchor),
                           'head': copyCursor(head),
                           'visualMode': vim.visualMode,
                           'visualLine': vim.visualLine,
                           'visualBlock': vim.visualBlock};
    }
    function expandSelection(cm, start, end) {
      var sel = cm.state.vim.sel;
      var head = sel.head;
      var anchor = sel.anchor;
      var tmp;
      if (cursorIsBefore(end, start)) {
        tmp = end;
        end = start;
        start = tmp;
      }
      if (cursorIsBefore(head, anchor)) {
        head = cursorMin(start, head);
        anchor = cursorMax(anchor, end);
      } else {
        anchor = cursorMin(start, anchor);
        head = cursorMax(head, end);
        head = offsetCursor(head, 0, -1);
        if (head.ch == -1 && head.line != cm.firstLine()) {
          head = Pos(head.line - 1, lineLength(cm, head.line - 1));
        }
      }
      return [anchor, head];
    }
    /**
     * Updates the CodeMirror selection to match the provided vim selection.
     * If no arguments are given, it uses the current vim selection state.
     */
    function updateCmSelection(cm, sel, mode) {
      var vim = cm.state.vim;
      sel = sel || vim.sel;
      var mode = mode ||
        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';
      var cmSel = makeCmSelection(cm, sel, mode);
      cm.setSelections(cmSel.ranges, cmSel.primary);
      updateFakeCursor(cm);
    }
    function makeCmSelection(cm, sel, mode, exclusive) {
      var head = copyCursor(sel.head);
      var anchor = copyCursor(sel.anchor);
      if (mode == 'char') {
        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;
        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;
        head = offsetCursor(sel.head, 0, headOffset);
        anchor = offsetCursor(sel.anchor, 0, anchorOffset);
        return {
          ranges: [{anchor: anchor, head: head}],
          primary: 0
        };
      } else if (mode == 'line') {
        if (!cursorIsBefore(sel.head, sel.anchor)) {
          anchor.ch = 0;

          var lastLine = cm.lastLine();
          if (head.line > lastLine) {
            head.line = lastLine;
          }
          head.ch = lineLength(cm, head.line);
        } else {
          head.ch = 0;
          anchor.ch = lineLength(cm, anchor.line);
        }
        return {
          ranges: [{anchor: anchor, head: head}],
          primary: 0
        };
      } else if (mode == 'block') {
        var top = Math.min(anchor.line, head.line),
            left = Math.min(anchor.ch, head.ch),
            bottom = Math.max(anchor.line, head.line),
            right = Math.max(anchor.ch, head.ch) + 1;
        var height = bottom - top + 1;
        var primary = head.line == top ? 0 : height - 1;
        var ranges = [];
        for (var i = 0; i < height; i++) {
          ranges.push({
            anchor: Pos(top + i, left),
            head: Pos(top + i, right)
          });
        }
        return {
          ranges: ranges,
          primary: primary
        };
      }
    }
    function getHead(cm) {
      var cur = cm.getCursor('head');
      if (cm.getSelection().length == 1) {
        // Small corner case when only 1 character is selected. The "real"
        // head is the left of head and anchor.
        cur = cursorMin(cur, cm.getCursor('anchor'));
      }
      return cur;
    }

    /**
     * If moveHead is set to false, the CodeMirror selection will not be
     * touched. The caller assumes the responsibility of putting the cursor
    * in the right place.
     */
    function exitVisualMode(cm, moveHead) {
      var vim = cm.state.vim;
      if (moveHead !== false) {
        cm.setCursor(clipCursorToContent(cm, vim.sel.head));
      }
      updateLastSelection(cm, vim);
      vim.visualMode = false;
      vim.visualLine = false;
      vim.visualBlock = false;
      CodeMirror.signal(cm, "vim-mode-change", {mode: "normal"});
      if (vim.fakeCursor) {
        vim.fakeCursor.clear();
      }
    }

    // Remove any trailing newlines from the selection. For
    // example, with the caret at the start of the last word on the line,
    // 'dw' should word, but not the newline, while 'w' should advance the
    // caret to the first character of the next line.
    function clipToLine(cm, curStart, curEnd) {
      var selection = cm.getRange(curStart, curEnd);
      // Only clip if the selection ends with trailing newline + whitespace
      if (/\n\s*$/.test(selection)) {
        var lines = selection.split('\n');
        // We know this is all whitespace.
        lines.pop();

        // Cases:
        // 1. Last word is an empty line - do not clip the trailing '\n'
        // 2. Last word is not an empty line - clip the trailing '\n'
        var line;
        // Find the line containing the last word, and clip all whitespace up
        // to it.
        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {
          curEnd.line--;
          curEnd.ch = 0;
        }
        // If the last word is not an empty line, clip an additional newline
        if (line) {
          curEnd.line--;
          curEnd.ch = lineLength(cm, curEnd.line);
        } else {
          curEnd.ch = 0;
        }
      }
    }

    // Expand the selection to line ends.
    function expandSelectionToLine(_cm, curStart, curEnd) {
      curStart.ch = 0;
      curEnd.ch = 0;
      curEnd.line++;
    }

    function findFirstNonWhiteSpaceCharacter(text) {
      if (!text) {
        return 0;
      }
      var firstNonWS = text.search(/\S/);
      return firstNonWS == -1 ? text.length : firstNonWS;
    }

    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {
      var cur = getHead(cm);
      var line = cm.getLine(cur.line);
      var idx = cur.ch;

      // Seek to first word or non-whitespace character, depending on if
      // noSymbol is true.
      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];
      while (!test(line.charAt(idx))) {
        idx++;
        if (idx >= line.length) { return null; }
      }

      if (bigWord) {
        test = bigWordCharTest[0];
      } else {
        test = wordCharTest[0];
        if (!test(line.charAt(idx))) {
          test = wordCharTest[1];
        }
      }

      var end = idx, start = idx;
      while (test(line.charAt(end)) && end < line.length) { end++; }
      while (test(line.charAt(start)) && start >= 0) { start--; }
      start++;

      if (inclusive) {
        // If present, include all whitespace after word.
        // Otherwise, include all whitespace before word, except indentation.
        var wordEnd = end;
        while (/\s/.test(line.charAt(end)) && end < line.length) { end++; }
        if (wordEnd == end) {
          var wordStart = start;
          while (/\s/.test(line.charAt(start - 1)) && start > 0) { start--; }
          if (!start) { start = wordStart; }
        }
      }
      return { start: Pos(cur.line, start), end: Pos(cur.line, end) };
    }

    function recordJumpPosition(cm, oldCur, newCur) {
      if (!cursorEqual(oldCur, newCur)) {
        vimGlobalState.jumpList.add(cm, oldCur, newCur);
      }
    }

    function recordLastCharacterSearch(increment, args) {
        vimGlobalState.lastCharacterSearch.increment = increment;
        vimGlobalState.lastCharacterSearch.forward = args.forward;
        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;
    }

    var symbolToMode = {
        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',
        '[': 'section', ']': 'section',
        '*': 'comment', '/': 'comment',
        'm': 'method', 'M': 'method',
        '#': 'preprocess'
    };
    var findSymbolModes = {
      bracket: {
        isComplete: function(state) {
          if (state.nextCh === state.symb) {
            state.depth++;
            if (state.depth >= 1)return true;
          } else if (state.nextCh === state.reverseSymb) {
            state.depth--;
          }
          return false;
        }
      },
      section: {
        init: function(state) {
          state.curMoveThrough = true;
          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';
        },
        isComplete: function(state) {
          return state.index === 0 && state.nextCh === state.symb;
        }
      },
      comment: {
        isComplete: function(state) {
          var found = state.lastCh === '*' && state.nextCh === '/';
          state.lastCh = state.nextCh;
          return found;
        }
      },
      // TODO: The original Vim implementation only operates on level 1 and 2.
      // The current implementation doesn't check for code block level and
      // therefore it operates on any levels.
      method: {
        init: function(state) {
          state.symb = (state.symb === 'm' ? '{' : '}');
          state.reverseSymb = state.symb === '{' ? '}' : '{';
        },
        isComplete: function(state) {
          if (state.nextCh === state.symb)return true;
          return false;
        }
      },
      preprocess: {
        init: function(state) {
          state.index = 0;
        },
        isComplete: function(state) {
          if (state.nextCh === '#') {
            var token = state.lineText.match(/#(\w+)/)[1];
            if (token === 'endif') {
              if (state.forward && state.depth === 0) {
                return true;
              }
              state.depth++;
            } else if (token === 'if') {
              if (!state.forward && state.depth === 0) {
                return true;
              }
              state.depth--;
            }
            if (token === 'else' && state.depth === 0)return true;
          }
          return false;
        }
      }
    };
    function findSymbol(cm, repeat, forward, symb) {
      var cur = copyCursor(cm.getCursor());
      var increment = forward ? 1 : -1;
      var endLine = forward ? cm.lineCount() : -1;
      var curCh = cur.ch;
      var line = cur.line;
      var lineText = cm.getLine(line);
      var state = {
        lineText: lineText,
        nextCh: lineText.charAt(curCh),
        lastCh: null,
        index: curCh,
        symb: symb,
        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],
        forward: forward,
        depth: 0,
        curMoveThrough: false
      };
      var mode = symbolToMode[symb];
      if (!mode)return cur;
      var init = findSymbolModes[mode].init;
      var isComplete = findSymbolModes[mode].isComplete;
      if (init) { init(state); }
      while (line !== endLine && repeat) {
        state.index += increment;
        state.nextCh = state.lineText.charAt(state.index);
        if (!state.nextCh) {
          line += increment;
          state.lineText = cm.getLine(line) || '';
          if (increment > 0) {
            state.index = 0;
          } else {
            var lineLen = state.lineText.length;
            state.index = (lineLen > 0) ? (lineLen-1) : 0;
          }
          state.nextCh = state.lineText.charAt(state.index);
        }
        if (isComplete(state)) {
          cur.line = line;
          cur.ch = state.index;
          repeat--;
        }
      }
      if (state.nextCh || state.curMoveThrough) {
        return Pos(line, state.index);
      }
      return cur;
    }

    /*
     * Returns the boundaries of the next word. If the cursor in the middle of
     * the word, then returns the boundaries of the current word, starting at
     * the cursor. If the cursor is at the start/end of a word, and we are going
     * forward/backward, respectively, find the boundaries of the next word.
     *
     * @param {CodeMirror} cm CodeMirror object.
     * @param {Cursor} cur The cursor position.
     * @param {boolean} forward True to search forward. False to search
     *     backward.
     * @param {boolean} bigWord True if punctuation count as part of the word.
     *     False if only [a-zA-Z0-9] characters count as part of the word.
     * @param {boolean} emptyLineIsWord True if empty lines should be treated
     *     as words.
     * @return {Object{from:number, to:number, line: number}} The boundaries of
     *     the word, or null if there are no more words.
     */
    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {
      var lineNum = cur.line;
      var pos = cur.ch;
      var line = cm.getLine(lineNum);
      var dir = forward ? 1 : -1;
      var charTests = bigWord ? bigWordCharTest: wordCharTest;

      if (emptyLineIsWord && line == '') {
        lineNum += dir;
        line = cm.getLine(lineNum);
        if (!isLine(cm, lineNum)) {
          return null;
        }
        pos = (forward) ? 0 : line.length;
      }

      while (true) {
        if (emptyLineIsWord && line == '') {
          return { from: 0, to: 0, line: lineNum };
        }
        var stop = (dir > 0) ? line.length : -1;
        var wordStart = stop, wordEnd = stop;
        // Find bounds of next word.
        while (pos != stop) {
          var foundWord = false;
          for (var i = 0; i < charTests.length && !foundWord; ++i) {
            if (charTests[i](line.charAt(pos))) {
              wordStart = pos;
              // Advance to end of word.
              while (pos != stop && charTests[i](line.charAt(pos))) {
                pos += dir;
              }
              wordEnd = pos;
              foundWord = wordStart != wordEnd;
              if (wordStart == cur.ch && lineNum == cur.line &&
                  wordEnd == wordStart + dir) {
                // We started at the end of a word. Find the next one.
                continue;
              } else {
                return {
                  from: Math.min(wordStart, wordEnd + 1),
                  to: Math.max(wordStart, wordEnd),
                  line: lineNum };
              }
            }
          }
          if (!foundWord) {
            pos += dir;
          }
        }
        // Advance to next/prev line.
        lineNum += dir;
        if (!isLine(cm, lineNum)) {
          return null;
        }
        line = cm.getLine(lineNum);
        pos = (dir > 0) ? 0 : line.length;
      }
    }

    /**
     * @param {CodeMirror} cm CodeMirror object.
     * @param {Pos} cur The position to start from.
     * @param {int} repeat Number of words to move past.
     * @param {boolean} forward True to search forward. False to search
     *     backward.
     * @param {boolean} wordEnd True to move to end of word. False to move to
     *     beginning of word.
     * @param {boolean} bigWord True if punctuation count as part of the word.
     *     False if only alphabet characters count as part of the word.
     * @return {Cursor} The position the cursor should move to.
     */
    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {
      var curStart = copyCursor(cur);
      var words = [];
      if (forward && !wordEnd || !forward && wordEnd) {
        repeat++;
      }
      // For 'e', empty lines are not considered words, go figure.
      var emptyLineIsWord = !(forward && wordEnd);
      for (var i = 0; i < repeat; i++) {
        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);
        if (!word) {
          var eodCh = lineLength(cm, cm.lastLine());
          words.push(forward
              ? {line: cm.lastLine(), from: eodCh, to: eodCh}
              : {line: 0, from: 0, to: 0});
          break;
        }
        words.push(word);
        cur = Pos(word.line, forward ? (word.to - 1) : word.from);
      }
      var shortCircuit = words.length != repeat;
      var firstWord = words[0];
      var lastWord = words.pop();
      if (forward && !wordEnd) {
        // w
        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {
          // We did not start in the middle of a word. Discard the extra word at the end.
          lastWord = words.pop();
        }
        return Pos(lastWord.line, lastWord.from);
      } else if (forward && wordEnd) {
        return Pos(lastWord.line, lastWord.to - 1);
      } else if (!forward && wordEnd) {
        // ge
        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {
          // We did not start in the middle of a word. Discard the extra word at the end.
          lastWord = words.pop();
        }
        return Pos(lastWord.line, lastWord.to);
      } else {
        // b
        return Pos(lastWord.line, lastWord.from);
      }
    }

    function moveToCharacter(cm, repeat, forward, character) {
      var cur = cm.getCursor();
      var start = cur.ch;
      var idx;
      for (var i = 0; i < repeat; i ++) {
        var line = cm.getLine(cur.line);
        idx = charIdxInLine(start, line, character, forward, true);
        if (idx == -1) {
          return null;
        }
        start = idx;
      }
      return Pos(cm.getCursor().line, idx);
    }

    function moveToColumn(cm, repeat) {
      // repeat is always >= 1, so repeat - 1 always corresponds
      // to the column we want to go to.
      var line = cm.getCursor().line;
      return clipCursorToContent(cm, Pos(line, repeat - 1));
    }

    function updateMark(cm, vim, markName, pos) {
      if (!inArray(markName, validMarks)) {
        return;
      }
      if (vim.marks[markName]) {
        vim.marks[markName].clear();
      }
      vim.marks[markName] = cm.setBookmark(pos);
    }

    function charIdxInLine(start, line, character, forward, includeChar) {
      // Search for char in line.
      // motion_options: {forward, includeChar}
      // If includeChar = true, include it too.
      // If forward = true, search forward, else search backwards.
      // If char is not found on this line, do nothing
      var idx;
      if (forward) {
        idx = line.indexOf(character, start + 1);
        if (idx != -1 && !includeChar) {
          idx -= 1;
        }
      } else {
        idx = line.lastIndexOf(character, start - 1);
        if (idx != -1 && !includeChar) {
          idx += 1;
        }
      }
      return idx;
    }

    function findParagraph(cm, head, repeat, dir, inclusive) {
      var line = head.line;
      var min = cm.firstLine();
      var max = cm.lastLine();
      var start, end, i = line;
      function isEmpty(i) { return !cm.getLine(i); }
      function isBoundary(i, dir, any) {
        if (any) { return isEmpty(i) != isEmpty(i + dir); }
        return !isEmpty(i) && isEmpty(i + dir);
      }
      if (dir) {
        while (min <= i && i <= max && repeat > 0) {
          if (isBoundary(i, dir)) { repeat--; }
          i += dir;
        }
        return new Pos(i, 0);
      }

      var vim = cm.state.vim;
      if (vim.visualLine && isBoundary(line, 1, true)) {
        var anchor = vim.sel.anchor;
        if (isBoundary(anchor.line, -1, true)) {
          if (!inclusive || anchor.line != line) {
            line += 1;
          }
        }
      }
      var startState = isEmpty(line);
      for (i = line; i <= max && repeat; i++) {
        if (isBoundary(i, 1, true)) {
          if (!inclusive || isEmpty(i) != startState) {
            repeat--;
          }
        }
      }
      end = new Pos(i, 0);
      // select boundary before paragraph for the last one
      if (i > max && !startState) { startState = true; }
      else { inclusive = false; }
      for (i = line; i > min; i--) {
        if (!inclusive || isEmpty(i) == startState || i == line) {
          if (isBoundary(i, -1, true)) { break; }
        }
      }
      start = new Pos(i, 0);
      return { start: start, end: end };
    }

    function findSentence(cm, cur, repeat, dir) {

      /*
        Takes an index object
        {
          line: the line string,
          ln: line number,
          pos: index in line,
          dir: direction of traversal (-1 or 1)
        }
        and modifies the line, ln, and pos members to represent the
        next valid position or sets them to null if there are
        no more valid positions.
       */
      function nextChar(cm, idx) {
        if (idx.pos + idx.dir < 0 || idx.pos + idx.dir >= idx.line.length) {
          idx.ln += idx.dir;
          if (!isLine(cm, idx.ln)) {
            idx.line = null;
            idx.ln = null;
            idx.pos = null;
            return;
          }
          idx.line = cm.getLine(idx.ln);
          idx.pos = (idx.dir > 0) ? 0 : idx.line.length - 1;
        }
        else {
          idx.pos += idx.dir;
        }
      }

      /*
        Performs one iteration of traversal in forward direction
        Returns an index object of the new location
       */
      function forward(cm, ln, pos, dir) {
        var line = cm.getLine(ln);
        var stop = (line === "");

        var curr = {
          line: line,
          ln: ln,
          pos: pos,
          dir: dir,
        }

        var last_valid = {
          ln: curr.ln,
          pos: curr.pos,
        }

        var skip_empty_lines = (curr.line === "");

        // Move one step to skip character we start on
        nextChar(cm, curr);

        while (curr.line !== null) {
          last_valid.ln = curr.ln;
          last_valid.pos = curr.pos;

          if (curr.line === "" && !skip_empty_lines) {
            return { ln: curr.ln, pos: curr.pos, };
          }
          else if (stop && curr.line !== "" && !isWhiteSpaceString(curr.line[curr.pos])) {
            return { ln: curr.ln, pos: curr.pos, };
          }
          else if (isEndOfSentenceSymbol(curr.line[curr.pos])
            && !stop
            && (curr.pos === curr.line.length - 1
              || isWhiteSpaceString(curr.line[curr.pos + 1]))) {
            stop = true;
          }

          nextChar(cm, curr);
        }

        /*
          Set the position to the last non whitespace character on the last
          valid line in the case that we reach the end of the document.
        */
        var line = cm.getLine(last_valid.ln);
        last_valid.pos = 0;
        for(var i = line.length - 1; i >= 0; --i) {
          if (!isWhiteSpaceString(line[i])) {
            last_valid.pos = i;
            break;
          }
        }

        return last_valid;

      }

      /*
        Performs one iteration of traversal in reverse direction
        Returns an index object of the new location
       */
      function reverse(cm, ln, pos, dir) {
        var line = cm.getLine(ln);

        var curr = {
          line: line,
          ln: ln,
          pos: pos,
          dir: dir,
        }

        var last_valid = {
          ln: curr.ln,
          pos: null,
        };

        var skip_empty_lines = (curr.line === "");

        // Move one step to skip character we start on
        nextChar(cm, curr);

        while (curr.line !== null) {

          if (curr.line === "" && !skip_empty_lines) {
            if (last_valid.pos !== null) {
              return last_valid;
            }
            else {
              return { ln: curr.ln, pos: curr.pos };
            }
          }
          else if (isEndOfSentenceSymbol(curr.line[curr.pos])
              && last_valid.pos !== null
              && !(curr.ln === last_valid.ln && curr.pos + 1 === last_valid.pos)) {
            return last_valid;
          }
          else if (curr.line !== "" && !isWhiteSpaceString(curr.line[curr.pos])) {
            skip_empty_lines = false;
            last_valid = { ln: curr.ln, pos: curr.pos }
          }

          nextChar(cm, curr);
        }

        /*
          Set the position to the first non whitespace character on the last
          valid line in the case that we reach the beginning of the document.
        */
        var line = cm.getLine(last_valid.ln);
        last_valid.pos = 0;
        for(var i = 0; i < line.length; ++i) {
          if (!isWhiteSpaceString(line[i])) {
            last_valid.pos = i;
            break;
          }
        }
        return last_valid;
      }

      var curr_index = {
        ln: cur.line,
        pos: cur.ch,
      };

      while (repeat > 0) {
        if (dir < 0) {
          curr_index = reverse(cm, curr_index.ln, curr_index.pos, dir);
        }
        else {
          curr_index = forward(cm, curr_index.ln, curr_index.pos, dir);
        }
        repeat--;
      }

      return Pos(curr_index.ln, curr_index.pos);
    }

    // TODO: perhaps this finagling of start and end positions belonds
    // in codemirror/replaceRange?
    function selectCompanionObject(cm, head, symb, inclusive) {
      var cur = head, start, end;

      var bracketRegexp = ({
        '(': /[()]/, ')': /[()]/,
        '[': /[[\]]/, ']': /[[\]]/,
        '{': /[{}]/, '}': /[{}]/})[symb];
      var openSym = ({
        '(': '(', ')': '(',
        '[': '[', ']': '[',
        '{': '{', '}': '{'})[symb];
      var curChar = cm.getLine(cur.line).charAt(cur.ch);
      // Due to the behavior of scanForBracket, we need to add an offset if the
      // cursor is on a matching open bracket.
      var offset = curChar === openSym ? 1 : 0;

      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, undefined, {'bracketRegex': bracketRegexp});
      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, undefined, {'bracketRegex': bracketRegexp});

      if (!start || !end) {
        return { start: cur, end: cur };
      }

      start = start.pos;
      end = end.pos;

      if ((start.line == end.line && start.ch > end.ch)
          || (start.line > end.line)) {
        var tmp = start;
        start = end;
        end = tmp;
      }

      if (inclusive) {
        end.ch += 1;
      } else {
        start.ch += 1;
      }

      return { start: start, end: end };
    }

    // Takes in a symbol and a cursor and tries to simulate text objects that
    // have identical opening and closing symbols
    // TODO support across multiple lines
    function findBeginningAndEnd(cm, head, symb, inclusive) {
      var cur = copyCursor(head);
      var line = cm.getLine(cur.line);
      var chars = line.split('');
      var start, end, i, len;
      var firstIndex = chars.indexOf(symb);

      // the decision tree is to always look backwards for the beginning first,
      // but if the cursor is in front of the first instance of the symb,
      // then move the cursor forward
      if (cur.ch < firstIndex) {
        cur.ch = firstIndex;
        // Why is this line even here???
        // cm.setCursor(cur.line, firstIndex+1);
      }
      // otherwise if the cursor is currently on the closing symbol
      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {
        end = cur.ch; // assign end to the current cursor
        --cur.ch; // make sure to look backwards
      }

      // if we're currently on the symbol, we've got a start
      if (chars[cur.ch] == symb && !end) {
        start = cur.ch + 1; // assign start to ahead of the cursor
      } else {
        // go backwards to find the start
        for (i = cur.ch; i > -1 && !start; i--) {
          if (chars[i] == symb) {
            start = i + 1;
          }
        }
      }

      // look forwards for the end symbol
      if (start && !end) {
        for (i = start, len = chars.length; i < len && !end; i++) {
          if (chars[i] == symb) {
            end = i;
          }
        }
      }

      // nothing found
      if (!start || !end) {
        return { start: cur, end: cur };
      }

      // include the symbols
      if (inclusive) {
        --start; ++end;
      }

      return {
        start: Pos(cur.line, start),
        end: Pos(cur.line, end)
      };
    }

    // Search functions
    defineOption('pcre', true, 'boolean');
    function SearchState() {}
    SearchState.prototype = {
      getQuery: function() {
        return vimGlobalState.query;
      },
      setQuery: function(query) {
        vimGlobalState.query = query;
      },
      getOverlay: function() {
        return this.searchOverlay;
      },
      setOverlay: function(overlay) {
        this.searchOverlay = overlay;
      },
      isReversed: function() {
        return vimGlobalState.isReversed;
      },
      setReversed: function(reversed) {
        vimGlobalState.isReversed = reversed;
      },
      getScrollbarAnnotate: function() {
        return this.annotate;
      },
      setScrollbarAnnotate: function(annotate) {
        this.annotate = annotate;
      }
    };
    function getSearchState(cm) {
      var vim = cm.state.vim;
      return vim.searchState_ || (vim.searchState_ = new SearchState());
    }
    function dialog(cm, template, shortText, onClose, options) {
      if (cm.openDialog) {
        cm.openDialog(template, onClose, { bottom: true, value: options.value,
            onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,
            selectValueOnOpen: false});
      }
      else {
        onClose(prompt(shortText, ''));
      }
    }
    function splitBySlash(argString) {
      return splitBySeparator(argString, '/');
    }

    function findUnescapedSlashes(argString) {
      return findUnescapedSeparators(argString, '/');
    }

    function splitBySeparator(argString, separator) {
      var slashes = findUnescapedSeparators(argString, separator) || [];
      if (!slashes.length) return [];
      var tokens = [];
      // in case of strings like foo/bar
      if (slashes[0] !== 0) return;
      for (var i = 0; i < slashes.length; i++) {
        if (typeof slashes[i] == 'number')
          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));
      }
      return tokens;
    }

    function findUnescapedSeparators(str, separator) {
      if (!separator)
        separator = '/';

      var escapeNextChar = false;
      var slashes = [];
      for (var i = 0; i < str.length; i++) {
        var c = str.charAt(i);
        if (!escapeNextChar && c == separator) {
          slashes.push(i);
        }
        escapeNextChar = !escapeNextChar && (c == '\\');
      }
      return slashes;
    }

    // Translates a search string from ex (vim) syntax into javascript form.
    function translateRegex(str) {
      // When these match, add a '\' if unescaped or remove one if escaped.
      var specials = '|(){';
      // Remove, but never add, a '\' for these.
      var unescape = '}';
      var escapeNextChar = false;
      var out = [];
      for (var i = -1; i < str.length; i++) {
        var c = str.charAt(i) || '';
        var n = str.charAt(i+1) || '';
        var specialComesNext = (n && specials.indexOf(n) != -1);
        if (escapeNextChar) {
          if (c !== '\\' || !specialComesNext) {
            out.push(c);
          }
          escapeNextChar = false;
        } else {
          if (c === '\\') {
            escapeNextChar = true;
            // Treat the unescape list as special for removing, but not adding '\'.
            if (n && unescape.indexOf(n) != -1) {
              specialComesNext = true;
            }
            // Not passing this test means removing a '\'.
            if (!specialComesNext || n === '\\') {
              out.push(c);
            }
          } else {
            out.push(c);
            if (specialComesNext && n !== '\\') {
              out.push('\\');
            }
          }
        }
      }
      return out.join('');
    }

    // Translates the replace part of a search and replace from ex (vim) syntax into
    // javascript form.  Similar to translateRegex, but additionally fixes back references
    // (translates '\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.
    var charUnescapes = {'\\n': '\n', '\\r': '\r', '\\t': '\t'};
    function translateRegexReplace(str) {
      var escapeNextChar = false;
      var out = [];
      for (var i = -1; i < str.length; i++) {
        var c = str.charAt(i) || '';
        var n = str.charAt(i+1) || '';
        if (charUnescapes[c + n]) {
          out.push(charUnescapes[c+n]);
          i++;
        } else if (escapeNextChar) {
          // At any point in the loop, escapeNextChar is true if the previous
          // character was a '\' and was not escaped.
          out.push(c);
          escapeNextChar = false;
        } else {
          if (c === '\\') {
            escapeNextChar = true;
            if ((isNumber(n) || n === '$')) {
              out.push('$');
            } else if (n !== '/' && n !== '\\') {
              out.push('\\');
            }
          } else {
            if (c === '$') {
              out.push('$');
            }
            out.push(c);
            if (n === '/') {
              out.push('\\');
            }
          }
        }
      }
      return out.join('');
    }

    // Unescape \ and / in the replace part, for PCRE mode.
    var unescapes = {'\\/': '/', '\\\\': '\\', '\\n': '\n', '\\r': '\r', '\\t': '\t'};
    function unescapeRegexReplace(str) {
      var stream = new CodeMirror.StringStream(str);
      var output = [];
      while (!stream.eol()) {
        // Search for \.
        while (stream.peek() && stream.peek() != '\\') {
          output.push(stream.next());
        }
        var matched = false;
        for (var matcher in unescapes) {
          if (stream.match(matcher, true)) {
            matched = true;
            output.push(unescapes[matcher]);
            break;
          }
        }
        if (!matched) {
          // Don't change anything
          output.push(stream.next());
        }
      }
      return output.join('');
    }

    /**
     * Extract the regular expression from the query and return a Regexp object.
     * Returns null if the query is blank.
     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.
     * If smartCase is passed in, and the query contains upper case letters,
     *   then ignoreCase is overridden, and the 'i' flag will not be set.
     * If the query contains the /i in the flag part of the regular expression,
     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed
     *   through to the Regex object.
     */
    function parseQuery(query, ignoreCase, smartCase) {
      // First update the last search register
      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');
      lastSearchRegister.setText(query);
      // Check if the query is already a regex.
      if (query instanceof RegExp) { return query; }
      // First try to extract regex + flags from the input. If no flags found,
      // extract just the regex. IE does not accept flags directly defined in
      // the regex string in the form /regex/flags
      var slashes = findUnescapedSlashes(query);
      var regexPart;
      var forceIgnoreCase;
      if (!slashes.length) {
        // Query looks like 'regexp'
        regexPart = query;
      } else {
        // Query looks like 'regexp/...'
        regexPart = query.substring(0, slashes[0]);
        var flagsPart = query.substring(slashes[0]);
        forceIgnoreCase = (flagsPart.indexOf('i') != -1);
      }
      if (!regexPart) {
        return null;
      }
      if (!getOption('pcre')) {
        regexPart = translateRegex(regexPart);
      }
      if (smartCase) {
        ignoreCase = (/^[^A-Z]*$/).test(regexPart);
      }
      var regexp = new RegExp(regexPart,
          (ignoreCase || forceIgnoreCase) ? 'i' : undefined);
      return regexp;
    }
    function showConfirm(cm, text) {
      if (cm.openNotification) {
        cm.openNotification('<span style="color: red">' + text + '</span>',
                            {bottom: true, duration: 5000});
      } else {
        alert(text);
      }
    }
    function makePrompt(prefix, desc) {
      var raw = '<span style="font-family: monospace; white-space: pre">' +
          (prefix || "") + '<input type="text"></span>';
      if (desc)
        raw += ' <span style="color: #888">' + desc + '</span>';
      return raw;
    }
    var searchPromptDesc = '(Javascript regexp)';
    function showPrompt(cm, options) {
      var shortText = (options.prefix || '') + ' ' + (options.desc || '');
      var prompt = makePrompt(options.prefix, options.desc);
      dialog(cm, prompt, shortText, options.onClose, options);
    }
    function regexEqual(r1, r2) {
      if (r1 instanceof RegExp && r2 instanceof RegExp) {
          var props = ['global', 'multiline', 'ignoreCase', 'source'];
          for (var i = 0; i < props.length; i++) {
              var prop = props[i];
              if (r1[prop] !== r2[prop]) {
                  return false;
              }
          }
          return true;
      }
      return false;
    }
    // Returns true if the query is valid.
    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {
      if (!rawQuery) {
        return;
      }
      var state = getSearchState(cm);
      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);
      if (!query) {
        return;
      }
      highlightSearchMatches(cm, query);
      if (regexEqual(query, state.getQuery())) {
        return query;
      }
      state.setQuery(query);
      return query;
    }
    function searchOverlay(query) {
      if (query.source.charAt(0) == '^') {
        var matchSol = true;
      }
      return {
        token: function(stream) {
          if (matchSol && !stream.sol()) {
            stream.skipToEnd();
            return;
          }
          var match = stream.match(query, false);
          if (match) {
            if (match[0].length == 0) {
              // Matched empty string, skip to next.
              stream.next();
              return 'searching';
            }
            if (!stream.sol()) {
              // Backtrack 1 to match \b
              stream.backUp(1);
              if (!query.exec(stream.next() + match[0])) {
                stream.next();
                return null;
              }
            }
            stream.match(query);
            return 'searching';
          }
          while (!stream.eol()) {
            stream.next();
            if (stream.match(query, false)) break;
          }
        },
        query: query
      };
    }
    function highlightSearchMatches(cm, query) {
      var searchState = getSearchState(cm);
      var overlay = searchState.getOverlay();
      if (!overlay || query != overlay.query) {
        if (overlay) {
          cm.removeOverlay(overlay);
        }
        overlay = searchOverlay(query);
        cm.addOverlay(overlay);
        if (cm.showMatchesOnScrollbar) {
          if (searchState.getScrollbarAnnotate()) {
            searchState.getScrollbarAnnotate().clear();
          }
          searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));
        }
        searchState.setOverlay(overlay);
      }
    }
    function findNext(cm, prev, query, repeat) {
      if (repeat === undefined) { repeat = 1; }
      return cm.operation(function() {
        var pos = cm.getCursor();
        var cursor = cm.getSearchCursor(query, pos);
        for (var i = 0; i < repeat; i++) {
          var found = cursor.find(prev);
          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev); }
          if (!found) {
            // SearchCursor may have returned null because it hit EOF, wrap
            // around and try again.
            cursor = cm.getSearchCursor(query,
                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );
            if (!cursor.find(prev)) {
              return;
            }
          }
        }
        return cursor.from();
      });
    }
    function clearSearchHighlight(cm) {
      var state = getSearchState(cm);
      cm.removeOverlay(getSearchState(cm).getOverlay());
      state.setOverlay(null);
      if (state.getScrollbarAnnotate()) {
        state.getScrollbarAnnotate().clear();
        state.setScrollbarAnnotate(null);
      }
    }
    /**
     * Check if pos is in the specified range, INCLUSIVE.
     * Range can be specified with 1 or 2 arguments.
     * If the first range argument is an array, treat it as an array of line
     * numbers. Match pos against any of the lines.
     * If the first range argument is a number,
     *   if there is only 1 range argument, check if pos has the same line
     *       number
     *   if there are 2 range arguments, then check if pos is in between the two
     *       range arguments.
     */
    function isInRange(pos, start, end) {
      if (typeof pos != 'number') {
        // Assume it is a cursor position. Get the line number.
        pos = pos.line;
      }
      if (start instanceof Array) {
        return inArray(pos, start);
      } else {
        if (end) {
          return (pos >= start && pos <= end);
        } else {
          return pos == start;
        }
      }
    }
    function getUserVisibleLines(cm) {
      var scrollInfo = cm.getScrollInfo();
      var occludeToleranceTop = 6;
      var occludeToleranceBottom = 10;
      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');
      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;
      var to = cm.coordsChar({left:0, top: bottomY}, 'local');
      return {top: from.line, bottom: to.line};
    }

    function getMarkPos(cm, vim, markName) {
      if (markName == '\'') {
        var history = cm.doc.history.done;
        var event = history[history.length - 2];
        return event && event.ranges && event.ranges[0].head;
      } else if (markName == '.') {
        if (cm.doc.history.lastModTime == 0) {
          return  // If no changes, bail out; don't bother to copy or reverse history array.
        } else {
          var changeHistory = cm.doc.history.done.filter(function(el){ if (el.changes !== undefined) { return el } });
          changeHistory.reverse();
          var lastEditPos = changeHistory[0].changes[0].to;
        }
        return lastEditPos;
      }

      var mark = vim.marks[markName];
      return mark && mark.find();
    }

    var ExCommandDispatcher = function() {
      this.buildCommandMap_();
    };
    ExCommandDispatcher.prototype = {
      processCommand: function(cm, input, opt_params) {
        var that = this;
        cm.operation(function () {
          cm.curOp.isVimOp = true;
          that._processCommand(cm, input, opt_params);
        });
      },
      _processCommand: function(cm, input, opt_params) {
        var vim = cm.state.vim;
        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');
        var previousCommand = commandHistoryRegister.toString();
        if (vim.visualMode) {
          exitVisualMode(cm);
        }
        var inputStream = new CodeMirror.StringStream(input);
        // update ": with the latest command whether valid or invalid
        commandHistoryRegister.setText(input);
        var params = opt_params || {};
        params.input = input;
        try {
          this.parseInput_(cm, inputStream, params);
        } catch(e) {
          showConfirm(cm, e);
          throw e;
        }
        var command;
        var commandName;
        if (!params.commandName) {
          // If only a line range is defined, move to the line.
          if (params.line !== undefined) {
            commandName = 'move';
          }
        } else {
          command = this.matchCommand_(params.commandName);
          if (command) {
            commandName = command.name;
            if (command.excludeFromCommandHistory) {
              commandHistoryRegister.setText(previousCommand);
            }
            this.parseCommandArgs_(inputStream, params, command);
            if (command.type == 'exToKey') {
              // Handle Ex to Key mapping.
              for (var i = 0; i < command.toKeys.length; i++) {
                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');
              }
              return;
            } else if (command.type == 'exToEx') {
              // Handle Ex to Ex mapping.
              this.processCommand(cm, command.toInput);
              return;
            }
          }
        }
        if (!commandName) {
          showConfirm(cm, 'Not an editor command ":' + input + '"');
          return;
        }
        try {
          exCommands[commandName](cm, params);
          // Possibly asynchronous commands (e.g. substitute, which might have a
          // user confirmation), are responsible for calling the callback when
          // done. All others have it taken care of for them here.
          if ((!command || !command.possiblyAsync) && params.callback) {
            params.callback();
          }
        } catch(e) {
          showConfirm(cm, e);
          throw e;
        }
      },
      parseInput_: function(cm, inputStream, result) {
        inputStream.eatWhile(':');
        // Parse range.
        if (inputStream.eat('%')) {
          result.line = cm.firstLine();
          result.lineEnd = cm.lastLine();
        } else {
          result.line = this.parseLineSpec_(cm, inputStream);
          if (result.line !== undefined && inputStream.eat(',')) {
            result.lineEnd = this.parseLineSpec_(cm, inputStream);
          }
        }

        // Parse command name.
        var commandMatch = inputStream.match(/^(\w+)/);
        if (commandMatch) {
          result.commandName = commandMatch[1];
        } else {
          result.commandName = inputStream.match(/.*/)[0];
        }

        return result;
      },
      parseLineSpec_: function(cm, inputStream) {
        var numberMatch = inputStream.match(/^(\d+)/);
        if (numberMatch) {
          // Absolute line number plus offset (N+M or N-M) is probably a typo,
          // not something the user actually wanted. (NB: vim does allow this.)
          return parseInt(numberMatch[1], 10) - 1;
        }
        switch (inputStream.next()) {
          case '.':
            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);
          case '$':
            return this.parseLineSpecOffset_(inputStream, cm.lastLine());
          case '\'':
            var markName = inputStream.next();
            var markPos = getMarkPos(cm, cm.state.vim, markName);
            if (!markPos) throw new Error('Mark not set');
            return this.parseLineSpecOffset_(inputStream, markPos.line);
          case '-':
          case '+':
            inputStream.backUp(1);
            // Offset is relative to current line if not otherwise specified.
            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);
          default:
            inputStream.backUp(1);
            return undefined;
        }
      },
      parseLineSpecOffset_: function(inputStream, line) {
        var offsetMatch = inputStream.match(/^([+-])?(\d+)/);
        if (offsetMatch) {
          var offset = parseInt(offsetMatch[2], 10);
          if (offsetMatch[1] == "-") {
            line -= offset;
          } else {
            line += offset;
          }
        }
        return line;
      },
      parseCommandArgs_: function(inputStream, params, command) {
        if (inputStream.eol()) {
          return;
        }
        params.argString = inputStream.match(/.*/)[0];
        // Parse command-line arguments
        var delim = command.argDelimiter || /\s+/;
        var args = trim(params.argString).split(delim);
        if (args.length && args[0]) {
          params.args = args;
        }
      },
      matchCommand_: function(commandName) {
        // Return the command in the command map that matches the shortest
        // prefix of the passed in command name. The match is guaranteed to be
        // unambiguous if the defaultExCommandMap's shortNames are set up
        // correctly. (see @code{defaultExCommandMap}).
        for (var i = commandName.length; i > 0; i--) {
          var prefix = commandName.substring(0, i);
          if (this.commandMap_[prefix]) {
            var command = this.commandMap_[prefix];
            if (command.name.indexOf(commandName) === 0) {
              return command;
            }
          }
        }
        return null;
      },
      buildCommandMap_: function() {
        this.commandMap_ = {};
        for (var i = 0; i < defaultExCommandMap.length; i++) {
          var command = defaultExCommandMap[i];
          var key = command.shortName || command.name;
          this.commandMap_[key] = command;
        }
      },
      map: function(lhs, rhs, ctx) {
        if (lhs != ':' && lhs.charAt(0) == ':') {
          if (ctx) { throw Error('Mode not supported for ex mappings'); }
          var commandName = lhs.substring(1);
          if (rhs != ':' && rhs.charAt(0) == ':') {
            // Ex to Ex mapping
            this.commandMap_[commandName] = {
              name: commandName,
              type: 'exToEx',
              toInput: rhs.substring(1),
              user: true
            };
          } else {
            // Ex to key mapping
            this.commandMap_[commandName] = {
              name: commandName,
              type: 'exToKey',
              toKeys: rhs,
              user: true
            };
          }
        } else {
          if (rhs != ':' && rhs.charAt(0) == ':') {
            // Key to Ex mapping.
            var mapping = {
              keys: lhs,
              type: 'keyToEx',
              exArgs: { input: rhs.substring(1) }
            };
            if (ctx) { mapping.context = ctx; }
            defaultKeymap.unshift(mapping);
          } else {
            // Key to key mapping
            var mapping = {
              keys: lhs,
              type: 'keyToKey',
              toKeys: rhs
            };
            if (ctx) { mapping.context = ctx; }
            defaultKeymap.unshift(mapping);
          }
        }
      },
      unmap: function(lhs, ctx) {
        if (lhs != ':' && lhs.charAt(0) == ':') {
          // Ex to Ex or Ex to key mapping
          if (ctx) { throw Error('Mode not supported for ex mappings'); }
          var commandName = lhs.substring(1);
          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {
            delete this.commandMap_[commandName];
            return;
          }
        } else {
          // Key to Ex or key to key mapping
          var keys = lhs;
          for (var i = 0; i < defaultKeymap.length; i++) {
            if (keys == defaultKeymap[i].keys
                && defaultKeymap[i].context === ctx) {
              defaultKeymap.splice(i, 1);
              return;
            }
          }
        }
        throw Error('No such mapping.');
      }
    };

    var exCommands = {
      colorscheme: function(cm, params) {
        if (!params.args || params.args.length < 1) {
          showConfirm(cm, cm.getOption('theme'));
          return;
        }
        cm.setOption('theme', params.args[0]);
      },
      map: function(cm, params, ctx) {
        var mapArgs = params.args;
        if (!mapArgs || mapArgs.length < 2) {
          if (cm) {
            showConfirm(cm, 'Invalid mapping: ' + params.input);
          }
          return;
        }
        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);
      },
      imap: function(cm, params) { this.map(cm, params, 'insert'); },
      nmap: function(cm, params) { this.map(cm, params, 'normal'); },
      vmap: function(cm, params) { this.map(cm, params, 'visual'); },
      unmap: function(cm, params, ctx) {
        var mapArgs = params.args;
        if (!mapArgs || mapArgs.length < 1) {
          if (cm) {
            showConfirm(cm, 'No such mapping: ' + params.input);
          }
          return;
        }
        exCommandDispatcher.unmap(mapArgs[0], ctx);
      },
      move: function(cm, params) {
        commandDispatcher.processCommand(cm, cm.state.vim, {
            type: 'motion',
            motion: 'moveToLineOrEdgeOfDocument',
            motionArgs: { forward: false, explicitRepeat: true,
              linewise: true },
            repeatOverride: params.line+1});
      },
      set: function(cm, params) {
        var setArgs = params.args;
        // Options passed through to the setOption/getOption calls. May be passed in by the
        // local/global versions of the set command
        var setCfg = params.setCfg || {};
        if (!setArgs || setArgs.length < 1) {
          if (cm) {
            showConfirm(cm, 'Invalid mapping: ' + params.input);
          }
          return;
        }
        var expr = setArgs[0].split('=');
        var optionName = expr[0];
        var value = expr[1];
        var forceGet = false;

        if (optionName.charAt(optionName.length - 1) == '?') {
          // If post-fixed with ?, then the set is actually a get.
          if (value) { throw Error('Trailing characters: ' + params.argString); }
          optionName = optionName.substring(0, optionName.length - 1);
          forceGet = true;
        }
        if (value === undefined && optionName.substring(0, 2) == 'no') {
          // To set boolean options to false, the option name is prefixed with
          // 'no'.
          optionName = optionName.substring(2);
          value = false;
        }

        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';
        if (optionIsBoolean && value == undefined) {
          // Calling set with a boolean option sets it to true.
          value = true;
        }
        // If no value is provided, then we assume this is a get.
        if (!optionIsBoolean && value === undefined || forceGet) {
          var oldValue = getOption(optionName, cm, setCfg);
          if (oldValue instanceof Error) {
            showConfirm(cm, oldValue.message);
          } else if (oldValue === true || oldValue === false) {
            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);
          } else {
            showConfirm(cm, '  ' + optionName + '=' + oldValue);
          }
        } else {
          var setOptionReturn = setOption(optionName, value, cm, setCfg);
          if (setOptionReturn instanceof Error) {
            showConfirm(cm, setOptionReturn.message);
          }
        }
      },
      setlocal: function (cm, params) {
        // setCfg is passed through to setOption
        params.setCfg = {scope: 'local'};
        this.set(cm, params);
      },
      setglobal: function (cm, params) {
        // setCfg is passed through to setOption
        params.setCfg = {scope: 'global'};
        this.set(cm, params);
      },
      registers: function(cm, params) {
        var regArgs = params.args;
        var registers = vimGlobalState.registerController.registers;
        var regInfo = '----------Registers----------<br><br>';
        if (!regArgs) {
          for (var registerName in registers) {
            var text = registers[registerName].toString();
            if (text.length) {
              regInfo += '"' + registerName + '    ' + text + '<br>';
            }
          }
        } else {
          var registerName;
          regArgs = regArgs.join('');
          for (var i = 0; i < regArgs.length; i++) {
            registerName = regArgs.charAt(i);
            if (!vimGlobalState.registerController.isValidRegister(registerName)) {
              continue;
            }
            var register = registers[registerName] || new Register();
            regInfo += '"' + registerName + '    ' + register.toString() + '<br>';
          }
        }
        showConfirm(cm, regInfo);
      },
      sort: function(cm, params) {
        var reverse, ignoreCase, unique, number, pattern;
        function parseArgs() {
          if (params.argString) {
            var args = new CodeMirror.StringStream(params.argString);
            if (args.eat('!')) { reverse = true; }
            if (args.eol()) { return; }
            if (!args.eatSpace()) { return 'Invalid arguments'; }
            var opts = args.match(/([dinuox]+)?\s*(\/.+\/)?\s*/);
            if (!opts && !args.eol()) { return 'Invalid arguments'; }
            if (opts[1]) {
              ignoreCase = opts[1].indexOf('i') != -1;
              unique = opts[1].indexOf('u') != -1;
              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;
              var hex = opts[1].indexOf('x') != -1 && 1;
              var octal = opts[1].indexOf('o') != -1 && 1;
              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }
              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';
            }
            if (opts[2]) {
              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');
            }
          }
        }
        var err = parseArgs();
        if (err) {
          showConfirm(cm, err + ': ' + params.argString);
          return;
        }
        var lineStart = params.line || cm.firstLine();
        var lineEnd = params.lineEnd || params.line || cm.lastLine();
        if (lineStart == lineEnd) { return; }
        var curStart = Pos(lineStart, 0);
        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));
        var text = cm.getRange(curStart, curEnd).split('\n');
        var numberRegex = pattern ? pattern :
           (number == 'decimal') ? /(-?)([\d]+)/ :
           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :
           (number == 'octal') ? /([0-7]+)/ : null;
        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;
        var numPart = [], textPart = [];
        if (number || pattern) {
          for (var i = 0; i < text.length; i++) {
            var matchPart = pattern ? text[i].match(pattern) : null;
            if (matchPart && matchPart[0] != '') {
              numPart.push(matchPart);
            } else if (!pattern && numberRegex.exec(text[i])) {
              numPart.push(text[i]);
            } else {
              textPart.push(text[i]);
            }
          }
        } else {
          textPart = text;
        }
        function compareFn(a, b) {
          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }
          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }
          var anum = number && numberRegex.exec(a);
          var bnum = number && numberRegex.exec(b);
          if (!anum) { return a < b ? -1 : 1; }
          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);
          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);
          return anum - bnum;
        }
        function comparePatternFn(a, b) {
          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }
          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }
          return (a[0] < b[0]) ? -1 : 1;
        }
        numPart.sort(pattern ? comparePatternFn : compareFn);
        if (pattern) {
          for (var i = 0; i < numPart.length; i++) {
            numPart[i] = numPart[i].input;
          }
        } else if (!number) { textPart.sort(compareFn); }
        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);
        if (unique) { // Remove duplicate lines
          var textOld = text;
          var lastLine;
          text = [];
          for (var i = 0; i < textOld.length; i++) {
            if (textOld[i] != lastLine) {
              text.push(textOld[i]);
            }
            lastLine = textOld[i];
          }
        }
        cm.replaceRange(text.join('\n'), curStart, curEnd);
      },
      global: function(cm, params) {
        // a global command is of the form
        // :[range]g/pattern/[cmd]
        // argString holds the string /pattern/[cmd]
        var argString = params.argString;
        if (!argString) {
          showConfirm(cm, 'Regular Expression missing from global');
          return;
        }
        // range is specified here
        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();
        var lineEnd = params.lineEnd || params.line || cm.lastLine();
        // get the tokens from argString
        var tokens = splitBySlash(argString);
        var regexPart = argString, cmd;
        if (tokens.length) {
          regexPart = tokens[0];
          cmd = tokens.slice(1, tokens.length).join('/');
        }
        if (regexPart) {
          // If regex part is empty, then use the previous query. Otherwise
          // use the regex part as the new query.
          try {
           updateSearchQuery(cm, regexPart, true /** ignoreCase */,
             true /** smartCase */);
          } catch (e) {
           showConfirm(cm, 'Invalid regex: ' + regexPart);
           return;
          }
        }
        // now that we have the regexPart, search for regex matches in the
        // specified range of lines
        var query = getSearchState(cm).getQuery();
        var matchedLines = [], content = '';
        for (var i = lineStart; i <= lineEnd; i++) {
          var matched = query.test(cm.getLine(i));
          if (matched) {
            matchedLines.push(i+1);
            content+= cm.getLine(i) + '<br>';
          }
        }
        // if there is no [cmd], just display the list of matched lines
        if (!cmd) {
          showConfirm(cm, content);
          return;
        }
        var index = 0;
        var nextCommand = function() {
          if (index < matchedLines.length) {
            var command = matchedLines[index] + cmd;
            exCommandDispatcher.processCommand(cm, command, {
              callback: nextCommand
            });
          }
          index++;
        };
        nextCommand();
      },
      substitute: function(cm, params) {
        if (!cm.getSearchCursor) {
          throw new Error('Search feature not available. Requires searchcursor.js or ' +
              'any other getSearchCursor implementation.');
        }
        var argString = params.argString;
        var tokens = argString ? splitBySeparator(argString, argString[0]) : [];
        var regexPart, replacePart = '', trailing, flagsPart, count;
        var confirm = false; // Whether to confirm each replace.
        var global = false; // True to replace all instances on a line, false to replace only 1.
        if (tokens.length) {
          regexPart = tokens[0];
          replacePart = tokens[1];
          if (regexPart && regexPart[regexPart.length - 1] === '$') {
            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\n';
            replacePart = replacePart ? replacePart + '\n' : '\n';
          }
          if (replacePart !== undefined) {
            if (getOption('pcre')) {
              replacePart = unescapeRegexReplace(replacePart);
            } else {
              replacePart = translateRegexReplace(replacePart);
            }
            vimGlobalState.lastSubstituteReplacePart = replacePart;
          }
          trailing = tokens[2] ? tokens[2].split(' ') : [];
        } else {
          // either the argString is empty or its of the form ' hello/world'
          // actually splitBySlash returns a list of tokens
          // only if the string starts with a '/'
          if (argString && argString.length) {
            showConfirm(cm, 'Substitutions should be of the form ' +
                ':s/pattern/replace/');
            return;
          }
        }
        // After the 3rd slash, we can have flags followed by a space followed
        // by count.
        if (trailing) {
          flagsPart = trailing[0];
          count = parseInt(trailing[1]);
          if (flagsPart) {
            if (flagsPart.indexOf('c') != -1) {
              confirm = true;
              flagsPart.replace('c', '');
            }
            if (flagsPart.indexOf('g') != -1) {
              global = true;
              flagsPart.replace('g', '');
            }
            regexPart = regexPart.replace(/\//g, "\\/") + '/' + flagsPart;
          }
        }
        if (regexPart) {
          // If regex part is empty, then use the previous query. Otherwise use
          // the regex part as the new query.
          try {
            updateSearchQuery(cm, regexPart, true /** ignoreCase */,
              true /** smartCase */);
          } catch (e) {
            showConfirm(cm, 'Invalid regex: ' + regexPart);
            return;
          }
        }
        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;
        if (replacePart === undefined) {
          showConfirm(cm, 'No previous substitute regular expression');
          return;
        }
        var state = getSearchState(cm);
        var query = state.getQuery();
        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;
        var lineEnd = params.lineEnd || lineStart;
        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {
          lineEnd = Infinity;
        }
        if (count) {
          lineStart = lineEnd;
          lineEnd = lineStart + count - 1;
        }
        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));
        var cursor = cm.getSearchCursor(query, startPos);
        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);
      },
      redo: CodeMirror.commands.redo,
      undo: CodeMirror.commands.undo,
      write: function(cm) {
        if (CodeMirror.commands.save) {
          // If a save command is defined, call it.
          CodeMirror.commands.save(cm);
        } else if (cm.save) {
          // Saves to text area if no save command is defined and cm.save() is available.
          cm.save();
        }
      },
      nohlsearch: function(cm) {
        clearSearchHighlight(cm);
      },
      yank: function (cm) {
        var cur = copyCursor(cm.getCursor());
        var line = cur.line;
        var lineText = cm.getLine(line);
        vimGlobalState.registerController.pushText(
          '0', 'yank', lineText, true, true);
      },
      delmarks: function(cm, params) {
        if (!params.argString || !trim(params.argString)) {
          showConfirm(cm, 'Argument required');
          return;
        }

        var state = cm.state.vim;
        var stream = new CodeMirror.StringStream(trim(params.argString));
        while (!stream.eol()) {
          stream.eatSpace();

          // Record the streams position at the beginning of the loop for use
          // in error messages.
          var count = stream.pos;

          if (!stream.match(/[a-zA-Z]/, false)) {
            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));
            return;
          }

          var sym = stream.next();
          // Check if this symbol is part of a range
          if (stream.match('-', true)) {
            // This symbol is part of a range.

            // The range must terminate at an alphabetic character.
            if (!stream.match(/[a-zA-Z]/, false)) {
              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));
              return;
            }

            var startMark = sym;
            var finishMark = stream.next();
            // The range must terminate at an alphabetic character which
            // shares the same case as the start of the range.
            if (isLowerCase(startMark) && isLowerCase(finishMark) ||
                isUpperCase(startMark) && isUpperCase(finishMark)) {
              var start = startMark.charCodeAt(0);
              var finish = finishMark.charCodeAt(0);
              if (start >= finish) {
                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));
                return;
              }

              // Because marks are always ASCII values, and we have
              // determined that they are the same case, we can use
              // their char codes to iterate through the defined range.
              for (var j = 0; j <= finish - start; j++) {
                var mark = String.fromCharCode(start + j);
                delete state.marks[mark];
              }
            } else {
              showConfirm(cm, 'Invalid argument: ' + startMark + '-');
              return;
            }
          } else {
            // This symbol is a valid mark, and is not part of a range.
            delete state.marks[sym];
          }
        }
      }
    };

    var exCommandDispatcher = new ExCommandDispatcher();

    /**
    * @param {CodeMirror} cm CodeMirror instance we are in.
    * @param {boolean} confirm Whether to confirm each replace.
    * @param {Cursor} lineStart Line to start replacing from.
    * @param {Cursor} lineEnd Line to stop replacing at.
    * @param {RegExp} query Query for performing matches with.
    * @param {string} replaceWith Text to replace matches with. May contain $1,
    *     $2, etc for replacing captured groups using Javascript replace.
    * @param {function()} callback A callback for when the replace is done.
    */
    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,
        replaceWith, callback) {
      // Set up all the functions.
      cm.state.vim.exMode = true;
      var done = false;
      var lastPos = searchCursor.from();
      function replaceAll() {
        cm.operation(function() {
          while (!done) {
            replace();
            next();
          }
          stop();
        });
      }
      function replace() {
        var text = cm.getRange(searchCursor.from(), searchCursor.to());
        var newText = text.replace(query, replaceWith);
        searchCursor.replace(newText);
      }
      function next() {
        // The below only loops to skip over multiple occurrences on the same
        // line when 'global' is not true.
        while(searchCursor.findNext() &&
              isInRange(searchCursor.from(), lineStart, lineEnd)) {
          if (!global && lastPos && searchCursor.from().line == lastPos.line) {
            continue;
          }
          cm.scrollIntoView(searchCursor.from(), 30);
          cm.setSelection(searchCursor.from(), searchCursor.to());
          lastPos = searchCursor.from();
          done = false;
          return;
        }
        done = true;
      }
      function stop(close) {
        if (close) { close(); }
        cm.focus();
        if (lastPos) {
          cm.setCursor(lastPos);
          var vim = cm.state.vim;
          vim.exMode = false;
          vim.lastHPos = vim.lastHSPos = lastPos.ch;
        }
        if (callback) { callback(); }
      }
      function onPromptKeyDown(e, _value, close) {
        // Swallow all keys.
        CodeMirror.e_stop(e);
        var keyName = CodeMirror.keyName(e);
        switch (keyName) {
          case 'Y':
            replace(); next(); break;
          case 'N':
            next(); break;
          case 'A':
            // replaceAll contains a call to close of its own. We don't want it
            // to fire too early or multiple times.
            var savedCallback = callback;
            callback = undefined;
            cm.operation(replaceAll);
            callback = savedCallback;
            break;
          case 'L':
            replace();
            // fall through and exit.
          case 'Q':
          case 'Esc':
          case 'Ctrl-C':
          case 'Ctrl-[':
            stop(close);
            break;
        }
        if (done) { stop(close); }
        return true;
      }

      // Actually do replace.
      next();
      if (done) {
        showConfirm(cm, 'No matches for ' + query.source);
        return;
      }
      if (!confirm) {
        replaceAll();
        if (callback) { callback(); }
        return;
      }
      showPrompt(cm, {
        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',
        onKeyDown: onPromptKeyDown
      });
    }

    CodeMirror.keyMap.vim = {
      attach: attachVimMap,
      detach: detachVimMap,
      call: cmKey
    };

    function exitInsertMode(cm) {
      var vim = cm.state.vim;
      var macroModeState = vimGlobalState.macroModeState;
      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');
      var isPlaying = macroModeState.isPlaying;
      var lastChange = macroModeState.lastInsertModeChanges;
      // In case of visual block, the insertModeChanges are not saved as a
      // single word, so we convert them to a single word
      // so as to update the ". register as expected in real vim.
      var text = [];
      if (!isPlaying) {
        var selLength = lastChange.inVisualBlock && vim.lastSelection ?
            vim.lastSelection.visualBlock.height : 1;
        var changes = lastChange.changes;
        var text = [];
        var i = 0;
        // In case of multiple selections in blockwise visual,
        // the inserted text, for example: 'f<Backspace>oo', is stored as
        // 'f', 'f', InsertModeKey 'o', 'o', 'o', 'o'. (if you have a block with 2 lines).
        // We push the contents of the changes array as per the following:
        // 1. In case of InsertModeKey, just increment by 1.
        // 2. In case of a character, jump by selLength (2 in the example).
        while (i < changes.length) {
          // This loop will convert 'ff<bs>oooo' to 'f<bs>oo'.
          text.push(changes[i]);
          if (changes[i] instanceof InsertModeKey) {
             i++;
          } else {
             i+= selLength;
          }
        }
        lastChange.changes = text;
        cm.off('change', onChange);
        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);
      }
      if (!isPlaying && vim.insertModeRepeat > 1) {
        // Perform insert mode repeat for commands like 3,a and 3,o.
        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,
            true /** repeatForInsert */);
        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;
      }
      delete vim.insertModeRepeat;
      vim.insertMode = false;
      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);
      cm.setOption('keyMap', 'vim');
      cm.setOption('disableInput', true);
      cm.toggleOverwrite(false); // exit replace mode if we were in it.
      // update the ". register before exiting insert mode
      insertModeChangeRegister.setText(lastChange.changes.join(''));
      CodeMirror.signal(cm, "vim-mode-change", {mode: "normal"});
      if (macroModeState.isRecording) {
        logInsertModeChange(macroModeState);
      }
    }

    function _mapCommand(command) {
      defaultKeymap.unshift(command);
    }

    function mapCommand(keys, type, name, args, extra) {
      var command = {keys: keys, type: type};
      command[type] = name;
      command[type + "Args"] = args;
      for (var key in extra)
        command[key] = extra[key];
      _mapCommand(command);
    }

    // The timeout in milliseconds for the two-character ESC keymap should be
    // adjusted according to your typing speed to prevent false positives.
    defineOption('insertModeEscKeysTimeout', 200, 'number');

    CodeMirror.keyMap['vim-insert'] = {
      // TODO: override navigation keys so that Esc will cancel automatic
      // indentation from o, O, i_<CR>
      fallthrough: ['default'],
      attach: attachVimMap,
      detach: detachVimMap,
      call: cmKey
    };

    CodeMirror.keyMap['vim-replace'] = {
      'Backspace': 'goCharLeft',
      fallthrough: ['vim-insert'],
      attach: attachVimMap,
      detach: detachVimMap,
      call: cmKey
    };

    function executeMacroRegister(cm, vim, macroModeState, registerName) {
      var register = vimGlobalState.registerController.getRegister(registerName);
      if (registerName == ':') {
        // Read-only register containing last Ex command.
        if (register.keyBuffer[0]) {
          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);
        }
        macroModeState.isPlaying = false;
        return;
      }
      var keyBuffer = register.keyBuffer;
      var imc = 0;
      macroModeState.isPlaying = true;
      macroModeState.replaySearchQueries = register.searchQueries.slice(0);
      for (var i = 0; i < keyBuffer.length; i++) {
        var text = keyBuffer[i];
        var match, key;
        while (text) {
          // Pull off one command key, which is either a single character
          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.
          match = (/<\w+-.+?>|<\w+>|./).exec(text);
          key = match[0];
          text = text.substring(match.index + key.length);
          CodeMirror.Vim.handleKey(cm, key, 'macro');
          if (vim.insertMode) {
            var changes = register.insertModeChanges[imc++].changes;
            vimGlobalState.macroModeState.lastInsertModeChanges.changes =
                changes;
            repeatInsertModeChanges(cm, changes, 1);
            exitInsertMode(cm);
          }
        }
      }
      macroModeState.isPlaying = false;
    }

    function logKey(macroModeState, key) {
      if (macroModeState.isPlaying) { return; }
      var registerName = macroModeState.latestRegister;
      var register = vimGlobalState.registerController.getRegister(registerName);
      if (register) {
        register.pushText(key);
      }
    }

    function logInsertModeChange(macroModeState) {
      if (macroModeState.isPlaying) { return; }
      var registerName = macroModeState.latestRegister;
      var register = vimGlobalState.registerController.getRegister(registerName);
      if (register && register.pushInsertModeChanges) {
        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);
      }
    }

    function logSearchQuery(macroModeState, query) {
      if (macroModeState.isPlaying) { return; }
      var registerName = macroModeState.latestRegister;
      var register = vimGlobalState.registerController.getRegister(registerName);
      if (register && register.pushSearchQuery) {
        register.pushSearchQuery(query);
      }
    }

    /**
     * Listens for changes made in insert mode.
     * Should only be active in insert mode.
     */
    function onChange(cm, changeObj) {
      var macroModeState = vimGlobalState.macroModeState;
      var lastChange = macroModeState.lastInsertModeChanges;
      if (!macroModeState.isPlaying) {
        while(changeObj) {
          lastChange.expectCursorActivityForChange = true;
          if (changeObj.origin == '+input' || changeObj.origin == 'paste'
              || changeObj.origin === undefined /* only in testing */) {
            var text = changeObj.text.join('\n');
            if (lastChange.maybeReset) {
              lastChange.changes = [];
              lastChange.maybeReset = false;
            }
            if (cm.state.overwrite && !/\n/.test(text)) {
                lastChange.changes.push([text]);
            } else {
                lastChange.changes.push(text);
            }
          }
          // Change objects may be chained with next.
          changeObj = changeObj.next;
        }
      }
    }

    /**
    * Listens for any kind of cursor activity on CodeMirror.
    */
    function onCursorActivity(cm) {
      var vim = cm.state.vim;
      if (vim.insertMode) {
        // Tracking cursor activity in insert mode (for macro support).
        var macroModeState = vimGlobalState.macroModeState;
        if (macroModeState.isPlaying) { return; }
        var lastChange = macroModeState.lastInsertModeChanges;
        if (lastChange.expectCursorActivityForChange) {
          lastChange.expectCursorActivityForChange = false;
        } else {
          // Cursor moved outside the context of an edit. Reset the change.
          lastChange.maybeReset = true;
        }
      } else if (!cm.curOp.isVimOp) {
        handleExternalSelection(cm, vim);
      }
      if (vim.visualMode) {
        updateFakeCursor(cm);
      }
    }
    function updateFakeCursor(cm) {
      var vim = cm.state.vim;
      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));
      var to = offsetCursor(from, 0, 1);
      if (vim.fakeCursor) {
        vim.fakeCursor.clear();
      }
      vim.fakeCursor = cm.markText(from, to, {className: 'cm-animate-fat-cursor'});
    }
    function handleExternalSelection(cm, vim) {
      var anchor = cm.getCursor('anchor');
      var head = cm.getCursor('head');
      // Enter or exit visual mode to match mouse selection.
      if (vim.visualMode && !cm.somethingSelected()) {
        exitVisualMode(cm, false);
      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {
        vim.visualMode = true;
        vim.visualLine = false;
        CodeMirror.signal(cm, "vim-mode-change", {mode: "visual"});
      }
      if (vim.visualMode) {
        // Bind CodeMirror selection model to vim selection model.
        // Mouse selections are considered visual characterwise.
        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;
        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;
        head = offsetCursor(head, 0, headOffset);
        anchor = offsetCursor(anchor, 0, anchorOffset);
        vim.sel = {
          anchor: anchor,
          head: head
        };
        updateMark(cm, vim, '<', cursorMin(head, anchor));
        updateMark(cm, vim, '>', cursorMax(head, anchor));
      } else if (!vim.insertMode) {
        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.
        vim.lastHPos = cm.getCursor().ch;
      }
    }

    /** Wrapper for special keys pressed in insert mode */
    function InsertModeKey(keyName) {
      this.keyName = keyName;
    }

    /**
    * Handles raw key down events from the text area.
    * - Should only be active in insert mode.
    * - For recording deletes in insert mode.
    */
    function onKeyEventTargetKeyDown(e) {
      var macroModeState = vimGlobalState.macroModeState;
      var lastChange = macroModeState.lastInsertModeChanges;
      var keyName = CodeMirror.keyName(e);
      if (!keyName) { return; }
      function onKeyFound() {
        if (lastChange.maybeReset) {
          lastChange.changes = [];
          lastChange.maybeReset = false;
        }
        lastChange.changes.push(new InsertModeKey(keyName));
        return true;
      }
      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {
        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);
      }
    }

    /**
     * Repeats the last edit, which includes exactly 1 command and at most 1
     * insert. Operator and motion commands are read from lastEditInputState,
     * while action commands are read from lastEditActionCommand.
     *
     * If repeatForInsert is true, then the function was called by
     * exitInsertMode to repeat the insert mode changes the user just made. The
     * corresponding enterInsertMode call was made with a count.
     */
    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {
      var macroModeState = vimGlobalState.macroModeState;
      macroModeState.isPlaying = true;
      var isAction = !!vim.lastEditActionCommand;
      var cachedInputState = vim.inputState;
      function repeatCommand() {
        if (isAction) {
          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);
        } else {
          commandDispatcher.evalInput(cm, vim);
        }
      }
      function repeatInsert(repeat) {
        if (macroModeState.lastInsertModeChanges.changes.length > 0) {
          // For some reason, repeat cw in desktop VIM does not repeat
          // insert mode changes. Will conform to that behavior.
          repeat = !vim.lastEditActionCommand ? 1 : repeat;
          var changeObject = macroModeState.lastInsertModeChanges;
          repeatInsertModeChanges(cm, changeObject.changes, repeat);
        }
      }
      vim.inputState = vim.lastEditInputState;
      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {
        // o and O repeat have to be interlaced with insert repeats so that the
        // insertions appear on separate lines instead of the last line.
        for (var i = 0; i < repeat; i++) {
          repeatCommand();
          repeatInsert(1);
        }
      } else {
        if (!repeatForInsert) {
          // Hack to get the cursor to end up at the right place. If I is
          // repeated in insert mode repeat, cursor will be 1 insert
          // change set left of where it should be.
          repeatCommand();
        }
        repeatInsert(repeat);
      }
      vim.inputState = cachedInputState;
      if (vim.insertMode && !repeatForInsert) {
        // Don't exit insert mode twice. If repeatForInsert is set, then we
        // were called by an exitInsertMode call lower on the stack.
        exitInsertMode(cm);
      }
      macroModeState.isPlaying = false;
    }

    function repeatInsertModeChanges(cm, changes, repeat) {
      function keyHandler(binding) {
        if (typeof binding == 'string') {
          CodeMirror.commands[binding](cm);
        } else {
          binding(cm);
        }
        return true;
      }
      var head = cm.getCursor('head');
      var inVisualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock;
      if (inVisualBlock) {
        // Set up block selection again for repeating the changes.
        var vim = cm.state.vim;
        var lastSel = vim.lastSelection;
        var offset = getOffset(lastSel.anchor, lastSel.head);
        selectForInsert(cm, head, offset.line + 1);
        repeat = cm.listSelections().length;
        cm.setCursor(head);
      }
      for (var i = 0; i < repeat; i++) {
        if (inVisualBlock) {
          cm.setCursor(offsetCursor(head, i, 0));
        }
        for (var j = 0; j < changes.length; j++) {
          var change = changes[j];
          if (change instanceof InsertModeKey) {
            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);
          } else if (typeof change == "string") {
            var cur = cm.getCursor();
            cm.replaceRange(change, cur, cur);
          } else {
            var start = cm.getCursor();
            var end = offsetCursor(start, 0, change[0].length);
            cm.replaceRange(change[0], start, end);
          }
        }
      }
      if (inVisualBlock) {
        cm.setCursor(offsetCursor(head, 0, 1));
      }
    }

    resetVimGlobalState();
    return vimApi;
  };
  // Initialize Vim and make it available as an API.
  CodeMirror.Vim = Vim();
});


/***/ }),
/* 1179 */
/***/ (function(module, exports, __webpack_require__) {

// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE

// Open simple dialogs on top of an editor. Relies on dialog.css.

(function(mod) {
  if (true) // CommonJS
    mod(__webpack_require__(32));
  else if (typeof define == "function" && define.amd) // AMD
    define(["../../lib/codemirror"], mod);
  else // Plain browser env
    mod(CodeMirror);
})(function(CodeMirror) {
  function dialogDiv(cm, template, bottom) {
    var wrap = cm.getWrapperElement();
    var dialog;
    dialog = wrap.appendChild(document.createElement("div"));
    if (bottom)
      dialog.className = "CodeMirror-dialog CodeMirror-dialog-bottom";
    else
      dialog.className = "CodeMirror-dialog CodeMirror-dialog-top";

    if (typeof template == "string") {
      dialog.innerHTML = template;
    } else { // Assuming it's a detached DOM element.
      dialog.appendChild(template);
    }
    CodeMirror.addClass(wrap, 'dialog-opened');
    return dialog;
  }

  function closeNotification(cm, newVal) {
    if (cm.state.currentNotificationClose)
      cm.state.currentNotificationClose();
    cm.state.currentNotificationClose = newVal;
  }

  CodeMirror.defineExtension("openDialog", function(template, callback, options) {
    if (!options) options = {};

    closeNotification(this, null);

    var dialog = dialogDiv(this, template, options.bottom);
    var closed = false, me = this;
    function close(newVal) {
      if (typeof newVal == 'string') {
        inp.value = newVal;
      } else {
        if (closed) return;
        closed = true;
        CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');
        dialog.parentNode.removeChild(dialog);
        me.focus();

        if (options.onClose) options.onClose(dialog);
      }
    }

    var inp = dialog.getElementsByTagName("input")[0], button;
    if (inp) {
      inp.focus();

      if (options.value) {
        inp.value = options.value;
        if (options.selectValueOnOpen !== false) {
          inp.select();
        }
      }

      if (options.onInput)
        CodeMirror.on(inp, "input", function(e) { options.onInput(e, inp.value, close);});
      if (options.onKeyUp)
        CodeMirror.on(inp, "keyup", function(e) {options.onKeyUp(e, inp.value, close);});

      CodeMirror.on(inp, "keydown", function(e) {
        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }
        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {
          inp.blur();
          CodeMirror.e_stop(e);
          close();
        }
        if (e.keyCode == 13) callback(inp.value, e);
      });

      if (options.closeOnBlur !== false) CodeMirror.on(inp, "blur", close);
    } else if (button = dialog.getElementsByTagName("button")[0]) {
      CodeMirror.on(button, "click", function() {
        close();
        me.focus();
      });

      if (options.closeOnBlur !== false) CodeMirror.on(button, "blur", close);

      button.focus();
    }
    return close;
  });

  CodeMirror.defineExtension("openConfirm", function(template, callbacks, options) {
    closeNotification(this, null);
    var dialog = dialogDiv(this, template, options && options.bottom);
    var buttons = dialog.getElementsByTagName("button");
    var closed = false, me = this, blurring = 1;
    function close() {
      if (closed) return;
      closed = true;
      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');
      dialog.parentNode.removeChild(dialog);
      me.focus();
    }
    buttons[0].focus();
    for (var i = 0; i < buttons.length; ++i) {
      var b = buttons[i];
      (function(callback) {
        CodeMirror.on(b, "click", function(e) {
          CodeMirror.e_preventDefault(e);
          close();
          if (callback) callback(me);
        });
      })(callbacks[i]);
      CodeMirror.on(b, "blur", function() {
        --blurring;
        setTimeout(function() { if (blurring <= 0) close(); }, 200);
      });
      CodeMirror.on(b, "focus", function() { ++blurring; });
    }
  });

  /*
   * openNotification
   * Opens a notification, that can be closed with an optional timer
   * (default 5000ms timer) and always closes on click.
   *
   * If a notification is opened while another is opened, it will close the
   * currently opened one and open the new one immediately.
   */
  CodeMirror.defineExtension("openNotification", function(template, options) {
    closeNotification(this, close);
    var dialog = dialogDiv(this, template, options && options.bottom);
    var closed = false, doneTimer;
    var duration = options && typeof options.duration !== "undefined" ? options.duration : 5000;

    function close() {
      if (closed) return;
      closed = true;
      clearTimeout(doneTimer);
      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');
      dialog.parentNode.removeChild(dialog);
    }

    CodeMirror.on(dialog, 'click', function(e) {
      CodeMirror.e_preventDefault(e);
      close();
    });

    if (duration)
      doneTimer = setTimeout(close, duration);

    return close;
  });
});


/***/ }),
/* 1180 */
/***/ (function(module, exports, __webpack_require__) {

// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE

(function(mod) {
  if (true) // CommonJS
    mod(__webpack_require__(32));
  else if (typeof define == "function" && define.amd) // AMD
    define(["../lib/codemirror"], mod);
  else // Plain browser env
    mod(CodeMirror);
})(function(CodeMirror) {
  "use strict";

  var Pos = CodeMirror.Pos;
  function posEq(a, b) { return a.line == b.line && a.ch == b.ch; }

  // Kill 'ring'

  var killRing = [];
  function addToRing(str) {
    killRing.push(str);
    if (killRing.length > 50) killRing.shift();
  }
  function growRingTop(str) {
    if (!killRing.length) return addToRing(str);
    killRing[killRing.length - 1] += str;
  }
  function getFromRing(n) { return killRing[killRing.length - (n ? Math.min(n, 1) : 1)] || ""; }
  function popFromRing() { if (killRing.length > 1) killRing.pop(); return getFromRing(); }

  var lastKill = null;

  function kill(cm, from, to, ring, text) {
    if (text == null) text = cm.getRange(from, to);

    if (ring == "grow" && lastKill && lastKill.cm == cm && posEq(from, lastKill.pos) && cm.isClean(lastKill.gen))
      growRingTop(text);
    else if (ring !== false)
      addToRing(text);
    cm.replaceRange("", from, to, "+delete");

    if (ring == "grow") lastKill = {cm: cm, pos: from, gen: cm.changeGeneration()};
    else lastKill = null;
  }

  // Boundaries of various units

  function byChar(cm, pos, dir) {
    return cm.findPosH(pos, dir, "char", true);
  }

  function byWord(cm, pos, dir) {
    return cm.findPosH(pos, dir, "word", true);
  }

  function byLine(cm, pos, dir) {
    return cm.findPosV(pos, dir, "line", cm.doc.sel.goalColumn);
  }

  function byPage(cm, pos, dir) {
    return cm.findPosV(pos, dir, "page", cm.doc.sel.goalColumn);
  }

  function byParagraph(cm, pos, dir) {
    var no = pos.line, line = cm.getLine(no);
    var sawText = /\S/.test(dir < 0 ? line.slice(0, pos.ch) : line.slice(pos.ch));
    var fst = cm.firstLine(), lst = cm.lastLine();
    for (;;) {
      no += dir;
      if (no < fst || no > lst)
        return cm.clipPos(Pos(no - dir, dir < 0 ? 0 : null));
      line = cm.getLine(no);
      var hasText = /\S/.test(line);
      if (hasText) sawText = true;
      else if (sawText) return Pos(no, 0);
    }
  }

  function bySentence(cm, pos, dir) {
    var line = pos.line, ch = pos.ch;
    var text = cm.getLine(pos.line), sawWord = false;
    for (;;) {
      var next = text.charAt(ch + (dir < 0 ? -1 : 0));
      if (!next) { // End/beginning of line reached
        if (line == (dir < 0 ? cm.firstLine() : cm.lastLine())) return Pos(line, ch);
        text = cm.getLine(line + dir);
        if (!/\S/.test(text)) return Pos(line, ch);
        line += dir;
        ch = dir < 0 ? text.length : 0;
        continue;
      }
      if (sawWord && /[!?.]/.test(next)) return Pos(line, ch + (dir > 0 ? 1 : 0));
      if (!sawWord) sawWord = /\w/.test(next);
      ch += dir;
    }
  }

  function byExpr(cm, pos, dir) {
    var wrap;
    if (cm.findMatchingBracket && (wrap = cm.findMatchingBracket(pos, {strict: true}))
        && wrap.match && (wrap.forward ? 1 : -1) == dir)
      return dir > 0 ? Pos(wrap.to.line, wrap.to.ch + 1) : wrap.to;

    for (var first = true;; first = false) {
      var token = cm.getTokenAt(pos);
      var after = Pos(pos.line, dir < 0 ? token.start : token.end);
      if (first && dir > 0 && token.end == pos.ch || !/\w/.test(token.string)) {
        var newPos = cm.findPosH(after, dir, "char");
        if (posEq(after, newPos)) return pos;
        else pos = newPos;
      } else {
        return after;
      }
    }
  }

  // Prefixes (only crudely supported)

  function getPrefix(cm, precise) {
    var digits = cm.state.emacsPrefix;
    if (!digits) return precise ? null : 1;
    clearPrefix(cm);
    return digits == "-" ? -1 : Number(digits);
  }

  function repeated(cmd) {
    var f = typeof cmd == "string" ? function(cm) { cm.execCommand(cmd); } : cmd;
    return function(cm) {
      var prefix = getPrefix(cm);
      f(cm);
      for (var i = 1; i < prefix; ++i) f(cm);
    };
  }

  function findEnd(cm, pos, by, dir) {
    var prefix = getPrefix(cm);
    if (prefix < 0) { dir = -dir; prefix = -prefix; }
    for (var i = 0; i < prefix; ++i) {
      var newPos = by(cm, pos, dir);
      if (posEq(newPos, pos)) break;
      pos = newPos;
    }
    return pos;
  }

  function move(by, dir) {
    var f = function(cm) {
      cm.extendSelection(findEnd(cm, cm.getCursor(), by, dir));
    };
    f.motion = true;
    return f;
  }

  function killTo(cm, by, dir, ring) {
    var selections = cm.listSelections(), cursor;
    var i = selections.length;
    while (i--) {
      cursor = selections[i].head;
      kill(cm, cursor, findEnd(cm, cursor, by, dir), ring);
    }
  }

  function killRegion(cm, ring) {
    if (cm.somethingSelected()) {
      var selections = cm.listSelections(), selection;
      var i = selections.length;
      while (i--) {
        selection = selections[i];
        kill(cm, selection.anchor, selection.head, ring);
      }
      return true;
    }
  }

  function addPrefix(cm, digit) {
    if (cm.state.emacsPrefix) {
      if (digit != "-") cm.state.emacsPrefix += digit;
      return;
    }
    // Not active yet
    cm.state.emacsPrefix = digit;
    cm.on("keyHandled", maybeClearPrefix);
    cm.on("inputRead", maybeDuplicateInput);
  }

  var prefixPreservingKeys = {"Alt-G": true, "Ctrl-X": true, "Ctrl-Q": true, "Ctrl-U": true};

  function maybeClearPrefix(cm, arg) {
    if (!cm.state.emacsPrefixMap && !prefixPreservingKeys.hasOwnProperty(arg))
      clearPrefix(cm);
  }

  function clearPrefix(cm) {
    cm.state.emacsPrefix = null;
    cm.off("keyHandled", maybeClearPrefix);
    cm.off("inputRead", maybeDuplicateInput);
  }

  function maybeDuplicateInput(cm, event) {
    var dup = getPrefix(cm);
    if (dup > 1 && event.origin == "+input") {
      var one = event.text.join("\n"), txt = "";
      for (var i = 1; i < dup; ++i) txt += one;
      cm.replaceSelection(txt);
    }
  }

  function addPrefixMap(cm) {
    cm.state.emacsPrefixMap = true;
    cm.addKeyMap(prefixMap);
    cm.on("keyHandled", maybeRemovePrefixMap);
    cm.on("inputRead", maybeRemovePrefixMap);
  }

  function maybeRemovePrefixMap(cm, arg) {
    if (typeof arg == "string" && (/^\d$/.test(arg) || arg == "Ctrl-U")) return;
    cm.removeKeyMap(prefixMap);
    cm.state.emacsPrefixMap = false;
    cm.off("keyHandled", maybeRemovePrefixMap);
    cm.off("inputRead", maybeRemovePrefixMap);
  }

  // Utilities

  function setMark(cm) {
    cm.setCursor(cm.getCursor());
    cm.setExtending(!cm.getExtending());
    cm.on("change", function() { cm.setExtending(false); });
  }

  function clearMark(cm) {
    cm.setExtending(false);
    cm.setCursor(cm.getCursor());
  }

  function getInput(cm, msg, f) {
    if (cm.openDialog)
      cm.openDialog(msg + ": <input type=\"text\" style=\"width: 10em\"/>", f, {bottom: true});
    else
      f(prompt(msg, ""));
  }

  function operateOnWord(cm, op) {
    var start = cm.getCursor(), end = cm.findPosH(start, 1, "word");
    cm.replaceRange(op(cm.getRange(start, end)), start, end);
    cm.setCursor(end);
  }

  function toEnclosingExpr(cm) {
    var pos = cm.getCursor(), line = pos.line, ch = pos.ch;
    var stack = [];
    while (line >= cm.firstLine()) {
      var text = cm.getLine(line);
      for (var i = ch == null ? text.length : ch; i > 0;) {
        var ch = text.charAt(--i);
        if (ch == ")")
          stack.push("(");
        else if (ch == "]")
          stack.push("[");
        else if (ch == "}")
          stack.push("{");
        else if (/[\(\{\[]/.test(ch) && (!stack.length || stack.pop() != ch))
          return cm.extendSelection(Pos(line, i));
      }
      --line; ch = null;
    }
  }

  function quit(cm) {
    cm.execCommand("clearSearch");
    clearMark(cm);
  }

  CodeMirror.emacs = {kill: kill, killRegion: killRegion, repeated: repeated};

  // Actual keymap

  var keyMap = CodeMirror.keyMap.emacs = CodeMirror.normalizeKeyMap({
    "Ctrl-W": function(cm) {kill(cm, cm.getCursor("start"), cm.getCursor("end"), true);},
    "Ctrl-K": repeated(function(cm) {
      var start = cm.getCursor(), end = cm.clipPos(Pos(start.line));
      var text = cm.getRange(start, end);
      if (!/\S/.test(text)) {
        text += "\n";
        end = Pos(start.line + 1, 0);
      }
      kill(cm, start, end, "grow", text);
    }),
    "Alt-W": function(cm) {
      addToRing(cm.getSelection());
      clearMark(cm);
    },
    "Ctrl-Y": function(cm) {
      var start = cm.getCursor();
      cm.replaceRange(getFromRing(getPrefix(cm)), start, start, "paste");
      cm.setSelection(start, cm.getCursor());
    },
    "Alt-Y": function(cm) {cm.replaceSelection(popFromRing(), "around", "paste");},

    "Ctrl-Space": setMark, "Ctrl-Shift-2": setMark,

    "Ctrl-F": move(byChar, 1), "Ctrl-B": move(byChar, -1),
    "Right": move(byChar, 1), "Left": move(byChar, -1),
    "Ctrl-D": function(cm) { killTo(cm, byChar, 1, false); },
    "Delete": function(cm) { killRegion(cm, false) || killTo(cm, byChar, 1, false); },
    "Ctrl-H": function(cm) { killTo(cm, byChar, -1, false); },
    "Backspace": function(cm) { killRegion(cm, false) || killTo(cm, byChar, -1, false); },

    "Alt-F": move(byWord, 1), "Alt-B": move(byWord, -1),
    "Alt-Right": move(byWord, 1), "Alt-Left": move(byWord, -1),
    "Alt-D": function(cm) { killTo(cm, byWord, 1, "grow"); },
    "Alt-Backspace": function(cm) { killTo(cm, byWord, -1, "grow"); },

    "Ctrl-N": move(byLine, 1), "Ctrl-P": move(byLine, -1),
    "Down": move(byLine, 1), "Up": move(byLine, -1),
    "Ctrl-A": "goLineStart", "Ctrl-E": "goLineEnd",
    "End": "goLineEnd", "Home": "goLineStart",

    "Alt-V": move(byPage, -1), "Ctrl-V": move(byPage, 1),
    "PageUp": move(byPage, -1), "PageDown": move(byPage, 1),

    "Ctrl-Up": move(byParagraph, -1), "Ctrl-Down": move(byParagraph, 1),

    "Alt-A": move(bySentence, -1), "Alt-E": move(bySentence, 1),
    "Alt-K": function(cm) { killTo(cm, bySentence, 1, "grow"); },

    "Ctrl-Alt-K": function(cm) { killTo(cm, byExpr, 1, "grow"); },
    "Ctrl-Alt-Backspace": function(cm) { killTo(cm, byExpr, -1, "grow"); },
    "Ctrl-Alt-F": move(byExpr, 1), "Ctrl-Alt-B": move(byExpr, -1, "grow"),

    "Shift-Ctrl-Alt-2": function(cm) {
      var cursor = cm.getCursor();
      cm.setSelection(findEnd(cm, cursor, byExpr, 1), cursor);
    },
    "Ctrl-Alt-T": function(cm) {
      var leftStart = byExpr(cm, cm.getCursor(), -1), leftEnd = byExpr(cm, leftStart, 1);
      var rightEnd = byExpr(cm, leftEnd, 1), rightStart = byExpr(cm, rightEnd, -1);
      cm.replaceRange(cm.getRange(rightStart, rightEnd) + cm.getRange(leftEnd, rightStart) +
                      cm.getRange(leftStart, leftEnd), leftStart, rightEnd);
    },
    "Ctrl-Alt-U": repeated(toEnclosingExpr),

    "Alt-Space": function(cm) {
      var pos = cm.getCursor(), from = pos.ch, to = pos.ch, text = cm.getLine(pos.line);
      while (from && /\s/.test(text.charAt(from - 1))) --from;
      while (to < text.length && /\s/.test(text.charAt(to))) ++to;
      cm.replaceRange(" ", Pos(pos.line, from), Pos(pos.line, to));
    },
    "Ctrl-O": repeated(function(cm) { cm.replaceSelection("\n", "start"); }),
    "Ctrl-T": repeated(function(cm) {
      cm.execCommand("transposeChars");
    }),

    "Alt-C": repeated(function(cm) {
      operateOnWord(cm, function(w) {
        var letter = w.search(/\w/);
        if (letter == -1) return w;
        return w.slice(0, letter) + w.charAt(letter).toUpperCase() + w.slice(letter + 1).toLowerCase();
      });
    }),
    "Alt-U": repeated(function(cm) {
      operateOnWord(cm, function(w) { return w.toUpperCase(); });
    }),
    "Alt-L": repeated(function(cm) {
      operateOnWord(cm, function(w) { return w.toLowerCase(); });
    }),

    "Alt-;": "toggleComment",

    "Ctrl-/": repeated("undo"), "Shift-Ctrl--": repeated("undo"),
    "Ctrl-Z": repeated("undo"), "Cmd-Z": repeated("undo"),
    "Shift-Alt-,": "goDocStart", "Shift-Alt-.": "goDocEnd",
    "Ctrl-S": "findPersistentNext", "Ctrl-R": "findPersistentPrev", "Ctrl-G": quit, "Shift-Alt-5": "replace",
    "Alt-/": "autocomplete",
    "Enter": "newlineAndIndent",
    "Ctrl-J": repeated(function(cm) { cm.replaceSelection("\n", "end"); }),
    "Tab": "indentAuto",

    "Alt-G G": function(cm) {
      var prefix = getPrefix(cm, true);
      if (prefix != null && prefix > 0) return cm.setCursor(prefix - 1);

      getInput(cm, "Goto line", function(str) {
        var num;
        if (str && !isNaN(num = Number(str)) && num == (num|0) && num > 0)
          cm.setCursor(num - 1);
      });
    },

    "Ctrl-X Tab": function(cm) {
      cm.indentSelection(getPrefix(cm, true) || cm.getOption("indentUnit"));
    },
    "Ctrl-X Ctrl-X": function(cm) {
      cm.setSelection(cm.getCursor("head"), cm.getCursor("anchor"));
    },
    "Ctrl-X Ctrl-S": "save",
    "Ctrl-X Ctrl-W": "save",
    "Ctrl-X S": "saveAll",
    "Ctrl-X F": "open",
    "Ctrl-X U": repeated("undo"),
    "Ctrl-X K": "close",
    "Ctrl-X Delete": function(cm) { kill(cm, cm.getCursor(), bySentence(cm, cm.getCursor(), 1), "grow"); },
    "Ctrl-X H": "selectAll",

    "Ctrl-Q Tab": repeated("insertTab"),
    "Ctrl-U": addPrefixMap
  });

  var prefixMap = {"Ctrl-G": clearPrefix};
  function regPrefix(d) {
    prefixMap[d] = function(cm) { addPrefix(cm, d); };
    keyMap["Ctrl-" + d] = function(cm) { addPrefix(cm, d); };
    prefixPreservingKeys["Ctrl-" + d] = true;
  }
  for (var i = 0; i < 10; ++i) regPrefix(String(i));
  regPrefix("-");
});


/***/ }),
/* 1181 */
/***/ (function(module, exports, __webpack_require__) {

// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE

// A rough approximation of Sublime Text's keybindings
// Depends on addon/search/searchcursor.js and optionally addon/dialog/dialogs.js

(function(mod) {
  if (true) // CommonJS
    mod(__webpack_require__(32), __webpack_require__(386), __webpack_require__(387));
  else if (typeof define == "function" && define.amd) // AMD
    define(["../lib/codemirror", "../addon/search/searchcursor", "../addon/edit/matchbrackets"], mod);
  else // Plain browser env
    mod(CodeMirror);
})(function(CodeMirror) {
  "use strict";

  var cmds = CodeMirror.commands;
  var Pos = CodeMirror.Pos;

  // This is not exactly Sublime's algorithm. I couldn't make heads or tails of that.
  function findPosSubword(doc, start, dir) {
    if (dir < 0 && start.ch == 0) return doc.clipPos(Pos(start.line - 1));
    var line = doc.getLine(start.line);
    if (dir > 0 && start.ch >= line.length) return doc.clipPos(Pos(start.line + 1, 0));
    var state = "start", type;
    for (var pos = start.ch, e = dir < 0 ? 0 : line.length, i = 0; pos != e; pos += dir, i++) {
      var next = line.charAt(dir < 0 ? pos - 1 : pos);
      var cat = next != "_" && CodeMirror.isWordChar(next) ? "w" : "o";
      if (cat == "w" && next.toUpperCase() == next) cat = "W";
      if (state == "start") {
        if (cat != "o") { state = "in"; type = cat; }
      } else if (state == "in") {
        if (type != cat) {
          if (type == "w" && cat == "W" && dir < 0) pos--;
          if (type == "W" && cat == "w" && dir > 0) { type = "w"; continue; }
          break;
        }
      }
    }
    return Pos(start.line, pos);
  }

  function moveSubword(cm, dir) {
    cm.extendSelectionsBy(function(range) {
      if (cm.display.shift || cm.doc.extend || range.empty())
        return findPosSubword(cm.doc, range.head, dir);
      else
        return dir < 0 ? range.from() : range.to();
    });
  }

  cmds.goSubwordLeft = function(cm) { moveSubword(cm, -1); };
  cmds.goSubwordRight = function(cm) { moveSubword(cm, 1); };

  cmds.scrollLineUp = function(cm) {
    var info = cm.getScrollInfo();
    if (!cm.somethingSelected()) {
      var visibleBottomLine = cm.lineAtHeight(info.top + info.clientHeight, "local");
      if (cm.getCursor().line >= visibleBottomLine)
        cm.execCommand("goLineUp");
    }
    cm.scrollTo(null, info.top - cm.defaultTextHeight());
  };
  cmds.scrollLineDown = function(cm) {
    var info = cm.getScrollInfo();
    if (!cm.somethingSelected()) {
      var visibleTopLine = cm.lineAtHeight(info.top, "local")+1;
      if (cm.getCursor().line <= visibleTopLine)
        cm.execCommand("goLineDown");
    }
    cm.scrollTo(null, info.top + cm.defaultTextHeight());
  };

  cmds.splitSelectionByLine = function(cm) {
    var ranges = cm.listSelections(), lineRanges = [];
    for (var i = 0; i < ranges.length; i++) {
      var from = ranges[i].from(), to = ranges[i].to();
      for (var line = from.line; line <= to.line; ++line)
        if (!(to.line > from.line && line == to.line && to.ch == 0))
          lineRanges.push({anchor: line == from.line ? from : Pos(line, 0),
                           head: line == to.line ? to : Pos(line)});
    }
    cm.setSelections(lineRanges, 0);
  };

  cmds.singleSelectionTop = function(cm) {
    var range = cm.listSelections()[0];
    cm.setSelection(range.anchor, range.head, {scroll: false});
  };

  cmds.selectLine = function(cm) {
    var ranges = cm.listSelections(), extended = [];
    for (var i = 0; i < ranges.length; i++) {
      var range = ranges[i];
      extended.push({anchor: Pos(range.from().line, 0),
                     head: Pos(range.to().line + 1, 0)});
    }
    cm.setSelections(extended);
  };

  function insertLine(cm, above) {
    if (cm.isReadOnly()) return CodeMirror.Pass
    cm.operation(function() {
      var len = cm.listSelections().length, newSelection = [], last = -1;
      for (var i = 0; i < len; i++) {
        var head = cm.listSelections()[i].head;
        if (head.line <= last) continue;
        var at = Pos(head.line + (above ? 0 : 1), 0);
        cm.replaceRange("\n", at, null, "+insertLine");
        cm.indentLine(at.line, null, true);
        newSelection.push({head: at, anchor: at});
        last = head.line + 1;
      }
      cm.setSelections(newSelection);
    });
    cm.execCommand("indentAuto");
  }

  cmds.insertLineAfter = function(cm) { return insertLine(cm, false); };

  cmds.insertLineBefore = function(cm) { return insertLine(cm, true); };

  function wordAt(cm, pos) {
    var start = pos.ch, end = start, line = cm.getLine(pos.line);
    while (start && CodeMirror.isWordChar(line.charAt(start - 1))) --start;
    while (end < line.length && CodeMirror.isWordChar(line.charAt(end))) ++end;
    return {from: Pos(pos.line, start), to: Pos(pos.line, end), word: line.slice(start, end)};
  }

  cmds.selectNextOccurrence = function(cm) {
    var from = cm.getCursor("from"), to = cm.getCursor("to");
    var fullWord = cm.state.sublimeFindFullWord == cm.doc.sel;
    if (CodeMirror.cmpPos(from, to) == 0) {
      var word = wordAt(cm, from);
      if (!word.word) return;
      cm.setSelection(word.from, word.to);
      fullWord = true;
    } else {
      var text = cm.getRange(from, to);
      var query = fullWord ? new RegExp("\\b" + text + "\\b") : text;
      var cur = cm.getSearchCursor(query, to);
      var found = cur.findNext();
      if (!found) {
        cur = cm.getSearchCursor(query, Pos(cm.firstLine(), 0));
        found = cur.findNext();
      }
      if (!found || isSelectedRange(cm.listSelections(), cur.from(), cur.to()))
        return CodeMirror.Pass
      cm.addSelection(cur.from(), cur.to());
    }
    if (fullWord)
      cm.state.sublimeFindFullWord = cm.doc.sel;
  };

  function addCursorToSelection(cm, dir) {
    var ranges = cm.listSelections(), newRanges = [];
    for (var i = 0; i < ranges.length; i++) {
      var range = ranges[i];
      var newAnchor = cm.findPosV(
          range.anchor, dir, "line", range.anchor.goalColumn);
      var newHead = cm.findPosV(
          range.head, dir, "line", range.head.goalColumn);
      newAnchor.goalColumn = range.anchor.goalColumn != null ?
          range.anchor.goalColumn : cm.cursorCoords(range.anchor, "div").left;
      newHead.goalColumn = range.head.goalColumn != null ?
          range.head.goalColumn : cm.cursorCoords(range.head, "div").left;
      var newRange = {anchor: newAnchor, head: newHead};
      newRanges.push(range);
      newRanges.push(newRange);
    }
    cm.setSelections(newRanges);
  }
  cmds.addCursorToPrevLine = function(cm) { addCursorToSelection(cm, -1); };
  cmds.addCursorToNextLine = function(cm) { addCursorToSelection(cm, 1); };

  function isSelectedRange(ranges, from, to) {
    for (var i = 0; i < ranges.length; i++)
      if (ranges[i].from() == from && ranges[i].to() == to) return true
    return false
  }

  var mirror = "(){}[]";
  function selectBetweenBrackets(cm) {
    var ranges = cm.listSelections(), newRanges = []
    for (var i = 0; i < ranges.length; i++) {
      var range = ranges[i], pos = range.head, opening = cm.scanForBracket(pos, -1);
      if (!opening) return false;
      for (;;) {
        var closing = cm.scanForBracket(pos, 1);
        if (!closing) return false;
        if (closing.ch == mirror.charAt(mirror.indexOf(opening.ch) + 1)) {
          var startPos = Pos(opening.pos.line, opening.pos.ch + 1);
          if (CodeMirror.cmpPos(startPos, range.from()) == 0 &&
              CodeMirror.cmpPos(closing.pos, range.to()) == 0) {
            opening = cm.scanForBracket(opening.pos, -1);
            if (!opening) return false;
          } else {
            newRanges.push({anchor: startPos, head: closing.pos});
            break;
          }
        }
        pos = Pos(closing.pos.line, closing.pos.ch + 1);
      }
    }
    cm.setSelections(newRanges);
    return true;
  }

  cmds.selectScope = function(cm) {
    selectBetweenBrackets(cm) || cm.execCommand("selectAll");
  };
  cmds.selectBetweenBrackets = function(cm) {
    if (!selectBetweenBrackets(cm)) return CodeMirror.Pass;
  };

  cmds.goToBracket = function(cm) {
    cm.extendSelectionsBy(function(range) {
      var next = cm.scanForBracket(range.head, 1);
      if (next && CodeMirror.cmpPos(next.pos, range.head) != 0) return next.pos;
      var prev = cm.scanForBracket(range.head, -1);
      return prev && Pos(prev.pos.line, prev.pos.ch + 1) || range.head;
    });
  };

  cmds.swapLineUp = function(cm) {
    if (cm.isReadOnly()) return CodeMirror.Pass
    var ranges = cm.listSelections(), linesToMove = [], at = cm.firstLine() - 1, newSels = [];
    for (var i = 0; i < ranges.length; i++) {
      var range = ranges[i], from = range.from().line - 1, to = range.to().line;
      newSels.push({anchor: Pos(range.anchor.line - 1, range.anchor.ch),
                    head: Pos(range.head.line - 1, range.head.ch)});
      if (range.to().ch == 0 && !range.empty()) --to;
      if (from > at) linesToMove.push(from, to);
      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;
      at = to;
    }
    cm.operation(function() {
      for (var i = 0; i < linesToMove.length; i += 2) {
        var from = linesToMove[i], to = linesToMove[i + 1];
        var line = cm.getLine(from);
        cm.replaceRange("", Pos(from, 0), Pos(from + 1, 0), "+swapLine");
        if (to > cm.lastLine())
          cm.replaceRange("\n" + line, Pos(cm.lastLine()), null, "+swapLine");
        else
          cm.replaceRange(line + "\n", Pos(to, 0), null, "+swapLine");
      }
      cm.setSelections(newSels);
      cm.scrollIntoView();
    });
  };

  cmds.swapLineDown = function(cm) {
    if (cm.isReadOnly()) return CodeMirror.Pass
    var ranges = cm.listSelections(), linesToMove = [], at = cm.lastLine() + 1;
    for (var i = ranges.length - 1; i >= 0; i--) {
      var range = ranges[i], from = range.to().line + 1, to = range.from().line;
      if (range.to().ch == 0 && !range.empty()) from--;
      if (from < at) linesToMove.push(from, to);
      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;
      at = to;
    }
    cm.operation(function() {
      for (var i = linesToMove.length - 2; i >= 0; i -= 2) {
        var from = linesToMove[i], to = linesToMove[i + 1];
        var line = cm.getLine(from);
        if (from == cm.lastLine())
          cm.replaceRange("", Pos(from - 1), Pos(from), "+swapLine");
        else
          cm.replaceRange("", Pos(from, 0), Pos(from + 1, 0), "+swapLine");
        cm.replaceRange(line + "\n", Pos(to, 0), null, "+swapLine");
      }
      cm.scrollIntoView();
    });
  };

  cmds.toggleCommentIndented = function(cm) {
    cm.toggleComment({ indent: true });
  }

  cmds.joinLines = function(cm) {
    var ranges = cm.listSelections(), joined = [];
    for (var i = 0; i < ranges.length; i++) {
      var range = ranges[i], from = range.from();
      var start = from.line, end = range.to().line;
      while (i < ranges.length - 1 && ranges[i + 1].from().line == end)
        end = ranges[++i].to().line;
      joined.push({start: start, end: end, anchor: !range.empty() && from});
    }
    cm.operation(function() {
      var offset = 0, ranges = [];
      for (var i = 0; i < joined.length; i++) {
        var obj = joined[i];
        var anchor = obj.anchor && Pos(obj.anchor.line - offset, obj.anchor.ch), head;
        for (var line = obj.start; line <= obj.end; line++) {
          var actual = line - offset;
          if (line == obj.end) head = Pos(actual, cm.getLine(actual).length + 1);
          if (actual < cm.lastLine()) {
            cm.replaceRange(" ", Pos(actual), Pos(actual + 1, /^\s*/.exec(cm.getLine(actual + 1))[0].length));
            ++offset;
          }
        }
        ranges.push({anchor: anchor || head, head: head});
      }
      cm.setSelections(ranges, 0);
    });
  };

  cmds.duplicateLine = function(cm) {
    cm.operation(function() {
      var rangeCount = cm.listSelections().length;
      for (var i = 0; i < rangeCount; i++) {
        var range = cm.listSelections()[i];
        if (range.empty())
          cm.replaceRange(cm.getLine(range.head.line) + "\n", Pos(range.head.line, 0));
        else
          cm.replaceRange(cm.getRange(range.from(), range.to()), range.from());
      }
      cm.scrollIntoView();
    });
  };


  function sortLines(cm, caseSensitive) {
    if (cm.isReadOnly()) return CodeMirror.Pass
    var ranges = cm.listSelections(), toSort = [], selected;
    for (var i = 0; i < ranges.length; i++) {
      var range = ranges[i];
      if (range.empty()) continue;
      var from = range.from().line, to = range.to().line;
      while (i < ranges.length - 1 && ranges[i + 1].from().line == to)
        to = ranges[++i].to().line;
      if (!ranges[i].to().ch) to--;
      toSort.push(from, to);
    }
    if (toSort.length) selected = true;
    else toSort.push(cm.firstLine(), cm.lastLine());

    cm.operation(function() {
      var ranges = [];
      for (var i = 0; i < toSort.length; i += 2) {
        var from = toSort[i], to = toSort[i + 1];
        var start = Pos(from, 0), end = Pos(to);
        var lines = cm.getRange(start, end, false);
        if (caseSensitive)
          lines.sort();
        else
          lines.sort(function(a, b) {
            var au = a.toUpperCase(), bu = b.toUpperCase();
            if (au != bu) { a = au; b = bu; }
            return a < b ? -1 : a == b ? 0 : 1;
          });
        cm.replaceRange(lines, start, end);
        if (selected) ranges.push({anchor: start, head: Pos(to + 1, 0)});
      }
      if (selected) cm.setSelections(ranges, 0);
    });
  }

  cmds.sortLines = function(cm) { sortLines(cm, true); };
  cmds.sortLinesInsensitive = function(cm) { sortLines(cm, false); };

  cmds.nextBookmark = function(cm) {
    var marks = cm.state.sublimeBookmarks;
    if (marks) while (marks.length) {
      var current = marks.shift();
      var found = current.find();
      if (found) {
        marks.push(current);
        return cm.setSelection(found.from, found.to);
      }
    }
  };

  cmds.prevBookmark = function(cm) {
    var marks = cm.state.sublimeBookmarks;
    if (marks) while (marks.length) {
      marks.unshift(marks.pop());
      var found = marks[marks.length - 1].find();
      if (!found)
        marks.pop();
      else
        return cm.setSelection(found.from, found.to);
    }
  };

  cmds.toggleBookmark = function(cm) {
    var ranges = cm.listSelections();
    var marks = cm.state.sublimeBookmarks || (cm.state.sublimeBookmarks = []);
    for (var i = 0; i < ranges.length; i++) {
      var from = ranges[i].from(), to = ranges[i].to();
      var found = ranges[i].empty() ? cm.findMarksAt(from) : cm.findMarks(from, to);
      for (var j = 0; j < found.length; j++) {
        if (found[j].sublimeBookmark) {
          found[j].clear();
          for (var k = 0; k < marks.length; k++)
            if (marks[k] == found[j])
              marks.splice(k--, 1);
          break;
        }
      }
      if (j == found.length)
        marks.push(cm.markText(from, to, {sublimeBookmark: true, clearWhenEmpty: false}));
    }
  };

  cmds.clearBookmarks = function(cm) {
    var marks = cm.state.sublimeBookmarks;
    if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();
    marks.length = 0;
  };

  cmds.selectBookmarks = function(cm) {
    var marks = cm.state.sublimeBookmarks, ranges = [];
    if (marks) for (var i = 0; i < marks.length; i++) {
      var found = marks[i].find();
      if (!found)
        marks.splice(i--, 0);
      else
        ranges.push({anchor: found.from, head: found.to});
    }
    if (ranges.length)
      cm.setSelections(ranges, 0);
  };

  function modifyWordOrSelection(cm, mod) {
    cm.operation(function() {
      var ranges = cm.listSelections(), indices = [], replacements = [];
      for (var i = 0; i < ranges.length; i++) {
        var range = ranges[i];
        if (range.empty()) { indices.push(i); replacements.push(""); }
        else replacements.push(mod(cm.getRange(range.from(), range.to())));
      }
      cm.replaceSelections(replacements, "around", "case");
      for (var i = indices.length - 1, at; i >= 0; i--) {
        var range = ranges[indices[i]];
        if (at && CodeMirror.cmpPos(range.head, at) > 0) continue;
        var word = wordAt(cm, range.head);
        at = word.from;
        cm.replaceRange(mod(word.word), word.from, word.to);
      }
    });
  }

  cmds.smartBackspace = function(cm) {
    if (cm.somethingSelected()) return CodeMirror.Pass;

    cm.operation(function() {
      var cursors = cm.listSelections();
      var indentUnit = cm.getOption("indentUnit");

      for (var i = cursors.length - 1; i >= 0; i--) {
        var cursor = cursors[i].head;
        var toStartOfLine = cm.getRange({line: cursor.line, ch: 0}, cursor);
        var column = CodeMirror.countColumn(toStartOfLine, null, cm.getOption("tabSize"));

        // Delete by one character by default
        var deletePos = cm.findPosH(cursor, -1, "char", false);

        if (toStartOfLine && !/\S/.test(toStartOfLine) && column % indentUnit == 0) {
          var prevIndent = new Pos(cursor.line,
            CodeMirror.findColumn(toStartOfLine, column - indentUnit, indentUnit));

          // Smart delete only if we found a valid prevIndent location
          if (prevIndent.ch != cursor.ch) deletePos = prevIndent;
        }

        cm.replaceRange("", deletePos, cursor, "+delete");
      }
    });
  };

  cmds.delLineRight = function(cm) {
    cm.operation(function() {
      var ranges = cm.listSelections();
      for (var i = ranges.length - 1; i >= 0; i--)
        cm.replaceRange("", ranges[i].anchor, Pos(ranges[i].to().line), "+delete");
      cm.scrollIntoView();
    });
  };

  cmds.upcaseAtCursor = function(cm) {
    modifyWordOrSelection(cm, function(str) { return str.toUpperCase(); });
  };
  cmds.downcaseAtCursor = function(cm) {
    modifyWordOrSelection(cm, function(str) { return str.toLowerCase(); });
  };

  cmds.setSublimeMark = function(cm) {
    if (cm.state.sublimeMark) cm.state.sublimeMark.clear();
    cm.state.sublimeMark = cm.setBookmark(cm.getCursor());
  };
  cmds.selectToSublimeMark = function(cm) {
    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();
    if (found) cm.setSelection(cm.getCursor(), found);
  };
  cmds.deleteToSublimeMark = function(cm) {
    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();
    if (found) {
      var from = cm.getCursor(), to = found;
      if (CodeMirror.cmpPos(from, to) > 0) { var tmp = to; to = from; from = tmp; }
      cm.state.sublimeKilled = cm.getRange(from, to);
      cm.replaceRange("", from, to);
    }
  };
  cmds.swapWithSublimeMark = function(cm) {
    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();
    if (found) {
      cm.state.sublimeMark.clear();
      cm.state.sublimeMark = cm.setBookmark(cm.getCursor());
      cm.setCursor(found);
    }
  };
  cmds.sublimeYank = function(cm) {
    if (cm.state.sublimeKilled != null)
      cm.replaceSelection(cm.state.sublimeKilled, null, "paste");
  };

  cmds.showInCenter = function(cm) {
    var pos = cm.cursorCoords(null, "local");
    cm.scrollTo(null, (pos.top + pos.bottom) / 2 - cm.getScrollInfo().clientHeight / 2);
  };

  function getTarget(cm) {
    var from = cm.getCursor("from"), to = cm.getCursor("to");
    if (CodeMirror.cmpPos(from, to) == 0) {
      var word = wordAt(cm, from);
      if (!word.word) return;
      from = word.from;
      to = word.to;
    }
    return {from: from, to: to, query: cm.getRange(from, to), word: word};
  }

  function findAndGoTo(cm, forward) {
    var target = getTarget(cm);
    if (!target) return;
    var query = target.query;
    var cur = cm.getSearchCursor(query, forward ? target.to : target.from);

    if (forward ? cur.findNext() : cur.findPrevious()) {
      cm.setSelection(cur.from(), cur.to());
    } else {
      cur = cm.getSearchCursor(query, forward ? Pos(cm.firstLine(), 0)
                                              : cm.clipPos(Pos(cm.lastLine())));
      if (forward ? cur.findNext() : cur.findPrevious())
        cm.setSelection(cur.from(), cur.to());
      else if (target.word)
        cm.setSelection(target.from, target.to);
    }
  };
  cmds.findUnder = function(cm) { findAndGoTo(cm, true); };
  cmds.findUnderPrevious = function(cm) { findAndGoTo(cm,false); };
  cmds.findAllUnder = function(cm) {
    var target = getTarget(cm);
    if (!target) return;
    var cur = cm.getSearchCursor(target.query);
    var matches = [];
    var primaryIndex = -1;
    while (cur.findNext()) {
      matches.push({anchor: cur.from(), head: cur.to()});
      if (cur.from().line <= target.from.line && cur.from().ch <= target.from.ch)
        primaryIndex++;
    }
    cm.setSelections(matches, primaryIndex);
  };


  var keyMap = CodeMirror.keyMap;
  keyMap.macSublime = {
    "Cmd-Left": "goLineStartSmart",
    "Shift-Tab": "indentLess",
    "Shift-Ctrl-K": "deleteLine",
    "Alt-Q": "wrapLines",
    "Ctrl-Left": "goSubwordLeft",
    "Ctrl-Right": "goSubwordRight",
    "Ctrl-Alt-Up": "scrollLineUp",
    "Ctrl-Alt-Down": "scrollLineDown",
    "Cmd-L": "selectLine",
    "Shift-Cmd-L": "splitSelectionByLine",
    "Esc": "singleSelectionTop",
    "Cmd-Enter": "insertLineAfter",
    "Shift-Cmd-Enter": "insertLineBefore",
    "Cmd-D": "selectNextOccurrence",
    "Shift-Cmd-Space": "selectScope",
    "Shift-Cmd-M": "selectBetweenBrackets",
    "Cmd-M": "goToBracket",
    "Cmd-Ctrl-Up": "swapLineUp",
    "Cmd-Ctrl-Down": "swapLineDown",
    "Cmd-/": "toggleCommentIndented",
    "Cmd-J": "joinLines",
    "Shift-Cmd-D": "duplicateLine",
    "F9": "sortLines",
    "Cmd-F9": "sortLinesInsensitive",
    "F2": "nextBookmark",
    "Shift-F2": "prevBookmark",
    "Cmd-F2": "toggleBookmark",
    "Shift-Cmd-F2": "clearBookmarks",
    "Alt-F2": "selectBookmarks",
    "Backspace": "smartBackspace",
    "Cmd-K Cmd-K": "delLineRight",
    "Cmd-K Cmd-U": "upcaseAtCursor",
    "Cmd-K Cmd-L": "downcaseAtCursor",
    "Cmd-K Cmd-Space": "setSublimeMark",
    "Cmd-K Cmd-A": "selectToSublimeMark",
    "Cmd-K Cmd-W": "deleteToSublimeMark",
    "Cmd-K Cmd-X": "swapWithSublimeMark",
    "Cmd-K Cmd-Y": "sublimeYank",
    "Cmd-K Cmd-C": "showInCenter",
    "Cmd-K Cmd-G": "clearBookmarks",
    "Cmd-K Cmd-Backspace": "delLineLeft",
    "Cmd-K Cmd-0": "unfoldAll",
    "Cmd-K Cmd-J": "unfoldAll",
    "Ctrl-Shift-Up": "addCursorToPrevLine",
    "Ctrl-Shift-Down": "addCursorToNextLine",
    "Cmd-F3": "findUnder",
    "Shift-Cmd-F3": "findUnderPrevious",
    "Alt-F3": "findAllUnder",
    "Shift-Cmd-[": "fold",
    "Shift-Cmd-]": "unfold",
    "Cmd-I": "findIncremental",
    "Shift-Cmd-I": "findIncrementalReverse",
    "Cmd-H": "replace",
    "F3": "findNext",
    "Shift-F3": "findPrev",
    "fallthrough": "macDefault"
  };
  CodeMirror.normalizeKeyMap(keyMap.macSublime);

  keyMap.pcSublime = {
    "Shift-Tab": "indentLess",
    "Shift-Ctrl-K": "deleteLine",
    "Alt-Q": "wrapLines",
    "Ctrl-T": "transposeChars",
    "Alt-Left": "goSubwordLeft",
    "Alt-Right": "goSubwordRight",
    "Ctrl-Up": "scrollLineUp",
    "Ctrl-Down": "scrollLineDown",
    "Ctrl-L": "selectLine",
    "Shift-Ctrl-L": "splitSelectionByLine",
    "Esc": "singleSelectionTop",
    "Ctrl-Enter": "insertLineAfter",
    "Shift-Ctrl-Enter": "insertLineBefore",
    "Ctrl-D": "selectNextOccurrence",
    "Shift-Ctrl-Space": "selectScope",
    "Shift-Ctrl-M": "selectBetweenBrackets",
    "Ctrl-M": "goToBracket",
    "Shift-Ctrl-Up": "swapLineUp",
    "Shift-Ctrl-Down": "swapLineDown",
    "Ctrl-/": "toggleCommentIndented",
    "Ctrl-J": "joinLines",
    "Shift-Ctrl-D": "duplicateLine",
    "F9": "sortLines",
    "Ctrl-F9": "sortLinesInsensitive",
    "F2": "nextBookmark",
    "Shift-F2": "prevBookmark",
    "Ctrl-F2": "toggleBookmark",
    "Shift-Ctrl-F2": "clearBookmarks",
    "Alt-F2": "selectBookmarks",
    "Backspace": "smartBackspace",
    "Ctrl-K Ctrl-K": "delLineRight",
    "Ctrl-K Ctrl-U": "upcaseAtCursor",
    "Ctrl-K Ctrl-L": "downcaseAtCursor",
    "Ctrl-K Ctrl-Space": "setSublimeMark",
    "Ctrl-K Ctrl-A": "selectToSublimeMark",
    "Ctrl-K Ctrl-W": "deleteToSublimeMark",
    "Ctrl-K Ctrl-X": "swapWithSublimeMark",
    "Ctrl-K Ctrl-Y": "sublimeYank",
    "Ctrl-K Ctrl-C": "showInCenter",
    "Ctrl-K Ctrl-G": "clearBookmarks",
    "Ctrl-K Ctrl-Backspace": "delLineLeft",
    "Ctrl-K Ctrl-0": "unfoldAll",
    "Ctrl-K Ctrl-J": "unfoldAll",
    "Ctrl-Alt-Up": "addCursorToPrevLine",
    "Ctrl-Alt-Down": "addCursorToNextLine",
    "Ctrl-F3": "findUnder",
    "Shift-Ctrl-F3": "findUnderPrevious",
    "Alt-F3": "findAllUnder",
    "Shift-Ctrl-[": "fold",
    "Shift-Ctrl-]": "unfold",
    "Ctrl-I": "findIncremental",
    "Shift-Ctrl-I": "findIncrementalReverse",
    "Ctrl-H": "replace",
    "F3": "findNext",
    "Shift-F3": "findPrev",
    "fallthrough": "pcDefault"
  };
  CodeMirror.normalizeKeyMap(keyMap.pcSublime);

  var mac = keyMap.default == keyMap.macDefault;
  keyMap.sublime = mac ? keyMap.macSublime : keyMap.pcSublime;
});


/***/ }),
/* 1182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Controller__ = __webpack_require__(1183);
/**
 * @module components/linkDialog/main
 * @license MPL-2.0
 */



function initialize() {
  const channel = __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.channel('components/linkDialog');
  channel.reply('show', () => new __WEBPACK_IMPORTED_MODULE_1__Controller__["a" /* default */]().init());
}

__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', initialize);

/***/ }),
/* 1183 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__views_View__ = __webpack_require__(1184);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/**
 * @module components/linkDialog/Controller
 */






const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:components/linkDialog/Controller');

/**
 * Link dialog controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Radio channel.
     *
     * @prop {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('components/linkDialog');
    }

    /**
     * Notes collection channel.
     *
     * @prop {Object}
     */
    get notesChannel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('collections/Notes');
    }

    onDestroy() {
        log('destroyed');

        if (this.promise) {
            this.promise.resolve(null);
            this.promise = null;
        }
    }

    /**
     * Initialize a new link dialog.
     *
     * @returns {Promise} - resolves with the URL
     */
    init() {
        return new Promise((resolve, reject) => {
            this.promise = { resolve, reject };
            this.show();
            this.listenToEvents();
        });
    }

    /**
     * Render the view.
     */
    show() {
        this.view = new __WEBPACK_IMPORTED_MODULE_3__views_View__["a" /* default */]();
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'show', { region: 'modal', view: this.view });
        this.wait = this.renderDropdown();
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        // Destroy itself if the view is destroyed
        this.listenTo(this.view, 'destroy', this.destroy);
        this.listenTo(this.view, 'cancel', () => this.view.destroy());

        this.listenTo(this.view, 'save', this.resolve);
        this.listenTo(this.view, 'search', this.search);
        this.listenTo(this.view, 'create:note', this.createNote);
    }

    /**
     * Show a dropdown menu with notes.
     *
     * @returns {Promise}
     */
    renderDropdown() {
        return this.notesChannel.request('find', { pageSize: 10 }).then(collection => {
            this.view.options.collection = collection;
            this.view.renderDropdown();
        }).catch(err => log('error', err));
    }

    /**
     * Resolve the promise.
     *
     * @param {String} [url]
     */
    resolve(url) {
        const urlResolve = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.isString(url) ? url : this.view.ui.url.val().trim();
        this.promise.resolve(urlResolve);
        this.promise = null;
        this.view.destroy();
    }

    /**
     * Search for a note.
     *
     * @param {Object} data
     * @param {String} data.text
     */
    search(data) {
        // Wait until the notes collection is fetched
        if (this.wait && !this.waitIsResolved) {
            return this.wait.then(() => {
                this.search(data);
                this.waitIsResolved = true;
            }).catch(err => log('error', err));
        }

        const { collection } = this.view.options;
        collection.reset(collection.fuzzySearch(data.text));
        this.view.trigger('toggle:dropdown', { length: collection.length });
    }

    /**
     * Create a new note.
     *
     * @returns {Promise}
     */
    createNote() {
        const title = this.view.ui.url.val().trim();

        return this.notesChannel.request('saveModelObject', { data: { title } }).then(model => {
            const url = __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'getNoteLink', { model });
            this.resolve(`#${url}`);
        }).catch(err => log('createNote error', err));
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 1184 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Collection__ = __webpack_require__(1185);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__behaviors_ModalForm__ = __webpack_require__(160);
/**
 * @module components/linkDialog/views/View
 */





/**
 * Link dialog view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1188);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'modal fade';
    }

    /**
     * Behaviors.
     *
     * @see module:behaviors/ModalForm
     * @prop {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_3__behaviors_ModalForm__["a" /* default */]];
    }

    get uiFocus() {
        return 'url';
    }

    /**
     * Regions (notes.)
     *
     * @prop {Object}
     */
    regions() {
        return {
            notes: '#noteMenu'
        };
    }

    ui() {
        return {
            url: '[name=url]',
            dropdown: '.dropdown',
            create: '.create'
        };
    }

    events() {
        return {
            'keyup @ui.url': 'onUrlKeyup'
        };
    }

    triggers() {
        return {
            'click @ui.create': 'create:note'
        };
    }

    constructor(...args) {
        super(...args);

        this.handleUrl = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.debounce(this.handleUrl, 200);
        this.listenTo(this, 'toggle:dropdown', this.toggleDropdown);
    }

    /**
     * Show notes list.
     */
    renderDropdown() {
        this.dropView = new __WEBPACK_IMPORTED_MODULE_2__Collection__["a" /* default */](this.options);
        this.showChildView('notes', this.dropView);
        this.listenTo(this.dropView, 'attach:link', this.attachLink);
    }

    /**
     * A user typed something in URL input.
     */
    onUrlKeyup() {
        this.handleUrl();
    }

    /**
     * Check if URL input's value is a link. If it is not, start searching for a note.
     */
    handleUrl() {
        const val = this.ui.url.val().trim();

        // If it is a link, we don't have to do anything
        if (val === '' || val.match(/^(#|(https?|file|ftp):\/)/) !== null) {
            return this.onAttachLink();
        }

        // Search for an existing note and show the create button
        this.ui.create.toggleClass('hidden', false);
        this.trigger('search', { text: val });
    }

    /**
     * When a link is attached, hide create button and dropdown menu
     */
    onAttachLink() {
        this.ui.create.addClass('hidden');
        this.ui.url.focus();
        this.toggleDropdown();
    }

    /**
     * Insert a link to the URL input.
     *
     * @param {Object} data={}
     * @param {String} data.url
     */
    attachLink(data = {}) {
        this.ui.url.val(data.url);
        this.onAttachLink();
    }

    /**
     * Hide or show the dropdown menu.
     *
     * @param {Object} data={}
     * @param {Number} data.length - the number of found items
     */
    toggleDropdown(data = {}) {
        this.ui.dropdown.toggleClass('open', data.length || false);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Item__ = __webpack_require__(1186);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/**
 * @module components/linkDialog/views/Collection
 */




/**
 * Link dialog collection view.  Shows a list of notes.
 *
 * @class
 * @extends Marionette.CollectionView
 * @license MPL-2.0
 */
class Collection extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.CollectionView {

    get tagName() {
        return 'ul';
    }

    get className() {
        return 'dropdown-menu';
    }

    get childViewContainer() {
        return '.dropdown-menu';
    }

    /**
     * Child view.
     *
     * @see module:components/linkDialog/views/Item
     * @prop {Object}
     */
    get childView() {
        return __WEBPACK_IMPORTED_MODULE_1__Item__["a" /* default */];
    }

    events() {
        return {
            'click a': 'triggerAttach'
        };
    }

    /**
     * Trigger attach:link event.
     *
     * @param {Object} e
     */
    triggerAttach(e) {
        const id = this.$(e.currentTarget).attr('data-id');
        const url = __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'getNoteLink', { id });
        this.trigger('attach:link', { url: `#${url}` });
        return false;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Collection;


/***/ }),
/* 1186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/linkDialog/views/Item
 */



/**
 * Link dialog item view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Item extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1187);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get tagName() {
        return 'li';
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Item;


/***/ }),
/* 1187 */
/***/ (function(module, exports) {

module.exports = "<a href=\"#\" data-id=\"{{id}}\">{{title}}</a>\n"

/***/ }),
/* 1188 */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"modal-title\">\n                {{_.i18n('Hyperlink')}}\n            </h4>\n        </div>\n\n        <div class=\"modal-body\">\n            <form action=\"#\" class=\"form\" method=\"post\">\n                <div class=\"form-group\">\n                    <input name=\"url\" class=\"form-control\" type=\"text\" value=\"\" placeholder=\"{{ _.i18n('notes.hyperlink-dialog') }}\" />\n                    <div id=\"noteMenu\" class=\"dropdown\"></div>\n                    <span class=\"help-block\">{{_.i18n('notes.hyperlink-help')}}</span>\n                </div>\n            </form>\n        </div>\n\n        <div class=\"modal-footer\">\n            <button class=\"btn btn-default cancelBtn\">{{ _.i18n('Cancel') }}</button>\n            <button class=\"btn btn-success ok\">{{ _.i18n('OK') }}</button>\n            <button title=\"{{_.i18n('notes.create and attach')}}\" class=\"btn btn-info create hidden\">\n                {{ _.i18n('notes.create') }}\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 1189 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Controller__ = __webpack_require__(1190);
/**
 * @module components/fileDialog/main
 * @license MPL-2.0
 */



function initialize() {
  const channel = __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.channel('components/fileDialog');
  channel.reply('show', (...args) => new __WEBPACK_IMPORTED_MODULE_1__Controller__["a" /* default */](...args).init());
}

__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', initialize);

/***/ }),
/* 1190 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__View__ = __webpack_require__(1191);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/**
 * @module components/fileDialog/Controller
 */






const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:components/fileDialog/Controller');

/**
 * File dialog controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    onDestroy() {
        log('destroyed');

        if (this.promise) {
            this.promise.resolve(null);
            this.promise = null;
        }
    }

    /**
     * Initialize the dialog view.
     *
     * @returns {Promise}
     */
    init() {
        return new Promise((resolve, reject) => {
            this.promise = { resolve, reject };
            this.show();
            this.listenToEvents();
        });
    }

    /**
     * Render the view.
     */
    show() {
        this.view = new __WEBPACK_IMPORTED_MODULE_3__View__["a" /* default */]({});
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'show', { region: 'modal', view: this.view });
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        this.listenTo(this.view, 'destroy', this.destroy);
        this.listenTo(this.view, 'save', this.onSave);
        this.listenTo(this.view, 'cancel', () => this.view.destroy());
    }

    /**
     * Resolve the promise.
     *
     * @param {String} text
     */
    resolve(text) {
        this.promise.resolve(text);
        this.promise = null;
        this.view.destroy();
    }

    /**
     * Resolve the promise with a link.
     *
     * @param {Object} options={}
     * @param {Boolean} [options.isFile]
     */
    onSave(options = {}) {
        const url = this.view.ui.url.val().trim();

        // A user provided a URL
        if (url.length) {
            this.resolve(this.makeText(url, options.isFile));
        } else if (this.view.files.length) {
            this.saveFiles();
        }
        // Destroy the view if nothing was provided
        else {
                this.view.destroy();
            }
    }

    /**
     * Make a Markdown/HTML text with the link/image/
     *
     * @param {String} url
     * @param {Boolean} isFile
     * @returns {String}
     */
    makeText(url, isFile) {
        const data = { url, text: 'Alt description' };

        // If it is a file, generate a link
        if (isFile) {
            return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/editor', 'makeLink', data);
        }

        // Otherwise, generate an image code
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/editor', 'makeImage', data);
    }

    /**
     * Save all files.
     *
     * @returns {Promise}
     */
    saveFiles() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Files', 'addFiles', {
            files: this.view.files
        }).then(files => {
            let { fileModels } = this.options.model.attributes;
            fileModels = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.union(fileModels, files);
            this.options.model.set('fileModels', fileModels);
            this.attachFiles(files);
        }).catch(err => log('error', err));
    }

    /**
     * Attach several files.
     *
     * @param {Array} files
     * @returns {String}
     */
    attachFiles(files) {
        let str = '';

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(files, model => {
            const url = __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'getFileLink', { model });
            const isImage = model.get('fileType').indexOf('image') > -1;
            str += `${this.makeText(url, !isImage)}\n`;
        });

        this.resolve(str);
        return str;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 1191 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Modernizr) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_dropzone__ = __webpack_require__(388);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_dropzone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_dropzone__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__behaviors_ModalForm__ = __webpack_require__(160);
/**
 * @module components/fileDialog/View
 */
/* global Modernizr */





/**
 * File dialog view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1192);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * Dropzone template file.
     *
     * @prop {String}
     */
    get dropzoneTemplate() {
        return __webpack_require__(1193);
    }

    get className() {
        return 'modal fade';
    }

    /**
     * Behaviors.
     *
     * @see module:behaviors/ModalForm
     * @prop {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_3__behaviors_ModalForm__["a" /* default */]];
    }

    get uiFocus() {
        return 'url';
    }

    ui() {
        return {
            url: '[name=url]',
            okBtn: '#ok-btn',
            attach: '#btn-attach'
        };
    }

    events() {
        return {
            'keyup @ui.url': 'toggleAttachBtn',
            'click .attach-file': 'attachFile'
        };
    }

    constructor(...args) {
        super(...args);

        /**
         * An array of files saved for uploading.
         *
         * @prop {Array}
         */
        this.files = [];
    }

    /**
     * Initialize Dropzone.
     */
    onShownModal() {
        // File uploading is allowed only if either Indexeddb or WebSQL is supported
        if (Modernizr.indexeddb || Modernizr.websqldatabase) {
            this.dropzone = new __WEBPACK_IMPORTED_MODULE_2_dropzone___default.a('.dropzone', {
                url: '/#notes',
                clickable: true,
                accept: __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.bind(this.getImage, this),
                thumbnailWidth: 100,
                thumbnailHeight: 100,
                previewTemplate: this.dropzoneTemplate,
                dictDefaultMessage: __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n('Drop files')
            });
        }
    }

    /**
     * Show attach button if url input is not empty.
     */
    toggleAttachBtn() {
        this.ui.okBtn.toggleClass('hidden', this.ui.url.val().trim() !== '');
        this.ui.attach.toggleClass('hidden', this.ui.url.val().trim() === '');
    }

    /**
     * Trigger "save" event.
     *
     * @param {Object} e
     */
    attachFile(e) {
        e.preventDefault();
        this.trigger('save', { isFile: true });
    }

    /**
     * Save file data to this.files property.
     *
     * @param {Object} file
     */
    getImage(file) {
        // Empty URL input to hide attach button
        this.ui.url.val('').trigger('keyup');

        const reader = new FileReader();
        reader.onload = evt => {
            this.files.push({
                name: file.name,
                src: evt.target.result,
                fileType: file.type
            });
        };

        reader.readAsDataURL(file);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(111)))

/***/ }),
/* 1192 */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"modal-title\">\n                {{_.i18n('files.attach')}}\n            </h4>\n        </div>\n        <div class=\"modal-body\">\n            <form action=\"#\" class=\"form\" method=\"post\">\n                <div class=\"form-group\">\n                    <input name=\"url\" class=\"form-control\" type=\"text\" value=\"\" placeholder=\"{{ _.i18n('files.file-url') }}\" />\n                </div>\n            </form>\n\n            <form class=\"dropzone--container\" action=\"\">\n                <div class=\"dropzone row\">\n                </div>\n            </form>\n\n            <div class=\"alert alert-info\">\n                {{_.i18n('Warning! File attachments are not encrypted for performance reasons!')}}\n            </div>\n        </div>\n        <div class=\"modal-footer\">\n            <button class=\"btn btn-default cancelBtn\">{{ _.i18n('Cancel') }}</button>\n            <button class=\"btn btn-success ok\" id=\"ok-btn\">{{ _.i18n('OK') }}</button>\n\n            <div id=\"btn-attach\" class=\"btn-group hidden\">\n                <button class=\"btn btn-default attach-file\">\n                    {{ _.i18n('files.attachLink') }}\n                </button>\n                <button class=\"btn btn-success ok\">\n                    <i class=\"icon icon-picture\"></i>\n                    {{ _.i18n('files.attachImage') }}\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 1193 */
/***/ (function(module, exports) {

module.exports = "<div class=\"col-xs-4\">\n    <div class=\"dz-preview dz-file-preview thumbnail\">\n        <div class=\"dz-details\">\n            <img data-dz-thumbnail />\n            <div class=\"dz-filename caption\">\n                <p data-dz-name></p>\n                <p class=\"dz-size\" data-dz-size></p>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 1194 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Controller__ = __webpack_require__(1195);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__views_Region__ = __webpack_require__(1199);
/**
 * @module components/fuzzySearch/main
 * @license MPL-2.0
 */





const main = {

    initialize() {
        main.createRegion();

        // Instantiate fuzzy search controller on shown:search event
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/navbar').on('shown:search', () => new __WEBPACK_IMPORTED_MODULE_2__Controller__["a" /* default */]().init());
    },

    /**
     * Create fuzzySearch region.
     *
     * @returns {Object} region instance
     */
    createRegion() {
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#sidebar').append('<div id="sidebar--fuzzy" class="layout--body -scroll hidden"/>');

        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'add', {
            region: 'fuzzySearch',
            regionOptions: { regionClass: __WEBPACK_IMPORTED_MODULE_3__views_Region__["a" /* default */], el: '#sidebar--fuzzy' }
        });
    }

};

__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.once('App', 'start', main.initialize);

/* unused harmony default export */ var _unused_webpack_default_export = (main);

/***/ }),
/* 1195 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__views_View__ = __webpack_require__(1196);
/**
 * @module components/fuzzySearch/Controller
 */





const log = __WEBPACK_IMPORTED_MODULE_2_debug___default()('lav:components/fuzzySearch/Controller');

/**
 * Fuzzy search controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Search form channel.
     *
     * @prop {Object}
     */
    get formChannel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/navbar');
    }

    onDestroy() {
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'empty', { region: 'fuzzySearch' });
        log('destroyed');
    }

    /**
     * Fetch notes, instantiae teh view, and start listening to events.
     *
     * @returns {Promise}
     */
    init() {
        this.wait = this.fetch().then(collection => this.onFetch(collection)).catch(err => log('error', err));

        this.listenToEvents();

        return this.wait;
    }

    /**
     * Fetch all notes.
     *
     * @returns {Promise} notes collection
     */
    fetch() {
        log('fetching notes...');
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Notes', 'find');
    }

    /**
     * Instantiate the view.
     *
     * @param {Object} collection
     */
    onFetch(collection) {
        this.waitIsResolved = true;
        this.collection = collection;
        this.view = new __WEBPACK_IMPORTED_MODULE_3__views_View__["a" /* default */]({ collection });

        this.listenTo(this.view, 'destroy', this.destroy);
        this.listenTo(this.view, 'childview:navigate:search', this.navigate);
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        this.listenTo(this.formChannel, 'change:search', this.search);
        this.listenTo(this.formChannel, 'hidden:search', () => this.view.destroy());
    }

    /**
     * Search for notes.
     *
     * @param {Object} data
     * @param {String} data.query
     */
    search(data) {
        if (this.wait && !this.waitIsResolved) {
            return this.wait.then(() => this.search(data));
        }

        const models = this.collection.fuzzySearch(data.query);
        this.collection.reset(models);

        // Render the view if it isn't rendered yet
        if (!this.view.isRendered()) {
            __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'show', { region: 'fuzzySearch', view: this.view });
        }
    }

    /**
     * Navigate to a note page.
     *
     * @param {Object} view - child view which triggered navigate:search event.
     */
    navigate(view) {
        const filterArgs = {
            filter: 'search',
            query: encodeURIComponent(view.model.get('title'))
        };

        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('utils/Url', 'navigate', { filterArgs, id: view.model.id });
        this.view.destroy();
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 1196 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Child__ = __webpack_require__(1197);
/**
 * @module components/fuzzySearch/views/View
 */



/**
 * Fuzzy search collection view.
 *
 * @class
 * @extends Marionette.CollectionView
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.CollectionView {

  get className() {
    return 'main notes-list';
  }

  get childViewContainer() {
    return '.notes-list';
  }

  /**
   * Child view.
   *
   * @see module:components/fuzzySearch/views/Child
   * @prop {Object}
   */
  get childView() {
    return __WEBPACK_IMPORTED_MODULE_1__Child__["a" /* default */];
  }

  /**
   * @todo
   */
  get emptyView() {}

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1197 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/fuzzySearch/views/Child
 */



/**
 * Fuzzy search child view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Child extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1198);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'list-group list--group';
    }

    triggers() {
        return {
            'click .list-group-item': 'navigate:search'
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Child;


/***/ }),
/* 1198 */
/***/ (function(module, exports) {

module.exports = "<a href=\"#\" class=\"list-group-item list--item\" id=\"note-{{ id }}\" data-id=\"{{id}}\">\n    <h4 class=\"list-group-item-heading\">\n        <span class=\"list--item--query\">{{ title }}</span>\n        <span class=\"favorite pull-right icon-star-empty\n            <% if (isFavorite === 1) {%>icon-favorite<% } %>\">\n        </span>\n    </h4>\n</a>\n"

/***/ }),
/* 1199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jquery__);
/**
 * @module components/fuzzySearch/views/Region
 */



/**
 * Fuzzy search region.
 *
 * @class
 * @extends Marionette.Region
 * @license MPL-2.0
 */
class Region extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Region {

  /**
   * Show the region block.
   */
  onShow() {
    this.$body = this.$body || __WEBPACK_IMPORTED_MODULE_1_jquery___default()('body');
    this.$body.addClass('-fuzzy');
    this.$el.removeClass('hidden');
  }

  /**
   * Hide the region block.
   */
  onEmpty() {
    this.$el.addClass('hidden');
    this.$body.removeClass('-fuzzy');
  }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Region;


/***/ }),
/* 1200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_mousetrap__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_mousetrap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_mousetrap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__View__ = __webpack_require__(1201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/**
 * @module components/electronSearch/Controller
 */






const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:components/electronSearch/Controller');

/**
 * Electron search controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Region name where the view will be rendered.
     *
     * @prop {String}
     */
    get region() {
        return 'module--electronSearch';
    }

    constructor(...args) {
        super(...args);

        // Create a new region
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'add', {
            region: this.region,
            html: true
        });

        // Show the view if a keyboard shortcut is pressed
        __WEBPACK_IMPORTED_MODULE_1_mousetrap___default.a.bind(['ctrl+f', 'command+f'], e => this.init(e));
        log('ready');
    }

    /**
     * Render the view.
     *
     * @param {Object} e
     */
    init(e) {
        e.preventDefault();

        this.view = new __WEBPACK_IMPORTED_MODULE_3__View__["a" /* default */]();
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'show', {
            region: this.region,
            view: this.view
        });
        this.view.triggerMethod('ready');
    }

}
/* unused harmony export default */


// Instantiate the controller on start only if the app is in electron environment
__WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.once('App', 'start', () => {
    if (window.electron) {
        new Controller();
    }
});

/***/ }),
/* 1201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/electronSearch/View
 */



/**
 * Electron search view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1202);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'electron--search';
    }

    ui() {
        return {
            search: '[name="text"]'
        };
    }

    events() {
        return {
            'input @ui.search': 'onInput',
            'submit form': 'next',
            'click #search--next': 'next',
            'click #search--prev': 'previous',

            'keyup @ui.search': 'destroyOnEsc',
            'click .search--close': 'destroy'
        };
    }

    constructor(...args) {
        super(...args);

        /**
         * electron.remote
         *
         * @prop {Object}
         */
        this.remote = window.requireNode('electron').remote;
    }

    onReady() {
        this.ui.search.focus();
    }

    /**
     * Clear search highlights.
     */
    onDestroy() {
        this.remote.getCurrentWindow().webContents.stopFindInPage('clearSelection');
    }

    /**
     * If the search input value is changed, try to find the keyword on the page.
     */
    onInput() {
        this.search();

        // Prevent it from losing focus
        this.remote.getCurrentWindow().webContents.once('found-in-page', () => this.onFind());

        // Return true to allow change
        return true;
    }

    /**
     * Focus on search input.
     */
    onFind() {
        this.ui.search.focus();
    }

    /**
     * Search a keyword on the page.
     *
     * @param {Boolean} backSearch - true if it's a backward search
     */
    search(backSearch) {
        const text = this.ui.search.val().trim();
        if (!text.length) {
            return;
        }

        const webContents = this.remote.getCurrentWindow().webContents;
        if (backSearch) {
            return webContents.findInPage(text, { forward: false });
        }

        return webContents.findInPage(text);
    }

    /**
     * Find the next occurence on the page.
     *
     * @returns {Boolean} - false
     */
    next() {
        this.search();
        return false;
    }

    /**
     * Find the previous occurence on the page.
     *
     * @returns {Boolean} false
     */
    previous() {
        this.search(true);
        return false;
    }

    /**
     * Destroy itself if Escape key is pressed.
     *
     * @param {Object} e
     */
    destroyOnEsc(e) {
        if (e.keyCode === 27) {
            this.destroy();
        }
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1202 */
/***/ (function(module, exports) {

module.exports = "<form class=\"form-inline\" action=\"\">\n    <div class=\"input-group\">\n        <input class=\"form-control\" type=\"text\" name=\"text\" placeholder=\"{{_.i18n('Find in page')}}\">\n\n        <div class=\"input-group-btn\">\n            <button title=\"{{_.i18n('Previous')}}\" id=\"search--prev\" type=\"button\" class=\"btn btn-default\">\n                <i class=\"icon icon-left-open\"></i>\n            </button>\n            <button title=\"{{_.i18n('Next')}}\" id=\"search--next\" type=\"button\" class=\"btn btn-default\">\n                <i class=\"icon icon-right-open\"></i>\n            </button>\n        </div>\n    </div>\n\n    <div class=\"input-group\">\n        <button title=\"{{_.i18n('Close')}}\" type=\"button\" class=\"btn btn-default search--close\">\n            &times;\n        </button>\n    </div>\n</form>\n"

/***/ }),
/* 1203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Import__ = __webpack_require__(389);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ImportEvernote__ = __webpack_require__(1242);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Export__ = __webpack_require__(1247);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__migrate_Controller__ = __webpack_require__(1248);
/**
 * @module components/importExport/main
 * @license MPL-2.0
 */






function initialize() {
    __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.channel('components/importExport').reply({
        import: (...args) => new __WEBPACK_IMPORTED_MODULE_1__Import__["a" /* default */](...args).init(),
        importEvernote: (...args) => new __WEBPACK_IMPORTED_MODULE_2__ImportEvernote__["a" /* default */](...args).init(),
        export: (...args) => new __WEBPACK_IMPORTED_MODULE_3__Export__["a" /* default */](...args).init()
    });

    __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('utils/Initializer', 'add', {
        name: 'App:last',
        callback: () => new __WEBPACK_IMPORTED_MODULE_4__migrate_Controller__["a" /* default */]().init()
    });
}

__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'init', initialize);
/* unused harmony default export */ var _unused_webpack_default_export = (initialize);

/***/ }),
/* 1204 */,
/* 1205 */,
/* 1206 */,
/* 1207 */,
/* 1208 */,
/* 1209 */,
/* 1210 */,
/* 1211 */,
/* 1212 */,
/* 1213 */,
/* 1214 */,
/* 1215 */,
/* 1216 */,
/* 1217 */,
/* 1218 */,
/* 1219 */,
/* 1220 */,
/* 1221 */,
/* 1222 */,
/* 1223 */,
/* 1224 */,
/* 1225 */,
/* 1226 */,
/* 1227 */,
/* 1228 */,
/* 1229 */,
/* 1230 */,
/* 1231 */,
/* 1232 */,
/* 1233 */,
/* 1234 */,
/* 1235 */,
/* 1236 */,
/* 1237 */,
/* 1238 */,
/* 1239 */,
/* 1240 */,
/* 1241 */,
/* 1242 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Import__ = __webpack_require__(389);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_xml_js__ = __webpack_require__(412);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_xml_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_xml_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_base64_js__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_base64_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_base64_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_turndown__ = __webpack_require__(415);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_turndown_plugin_gfm__ = __webpack_require__(416);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_js_md5__ = __webpack_require__(197);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_js_md5___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_js_md5__);
/**
 * @module components/importExport/ImportEvernote
 */










const log = __WEBPACK_IMPORTED_MODULE_7_debug___default()('lav:components/importExport/ImportEvernote');

/**
 * Import data from Evernote's .enex backup file to Encryptic.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class ImportEvernote extends __WEBPACK_IMPORTED_MODULE_0__Import__["a" /* default */] {

    init() {
        if (this.checkFiles()) {
            return this.importData();
        }

        return Promise.resolve(false);
    }

    onSuccess() {
        log('completed');
        this.channel.trigger('completed');
        this.destroy();
        return true;
    }

    onError(error) {
        log('error', error);
        this.channel.trigger('completed', { error });
        this.destroy();
        return false;
    }

    /**
     * Return "true" if either a backup file or XML was provided.
     *
     * @returns {Boolean}
     */
    // eslint-disable-next-line complexity
    checkFiles() {
        return !!(this.options.xml && this.options.xml.length) || !!(this.options.files && this.options.files.length && this.checkEnex());
    }

    /**
     * Check if a file is an .enex backup.
     *
     * @param {Object} file=this.options.files[0]
     * @returns {Boolean}
     */
    checkEnex(file = this.options.files[0]) {
        return __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.last(file.name.split('.')) === 'enex' && file.size > 0;
    }

    /**
     * Start importing data from Evernote backup.
     *
     * @returns {Promise}
     */
    async importData() {
        // Trigger an event that import proccess started
        this.channel.trigger('started');

        try {
            const xml = await this.getXml();
            const data = await this.xml2js(xml);
            await this.importElements(data);
            return this.onSuccess();
        } catch (e) {
            return this.onError(e);
        }
    }

    /**
     * Convert XML to a JavaScript object.
     *
     * @param {String} xml
     * @returns {Array} returns the first element's elements
     */
    xml2js(xml) {
        return __WEBPACK_IMPORTED_MODULE_3_xml_js___default.a.xml2js(xml, {
            ignoreDoctype: true,
            ignoreDeclaration: true
        }).elements[0].elements;
    }

    /**
     * If XML was already provided, return it. Otherwise, read the provided file.
     *
     * @returns {Promise} resolves with string
     */
    getXml() {
        if (this.options.xml) {
            return Promise.resolve(this.options.xml);
        }

        return this.readText(this.options.files[0]);
    }

    /**
     * Import elements from Evernote backup.
     *
     * @param {Array} data
     * @returns {Promise}
     */
    importElements(data) {
        let promise = Promise.resolve();

        __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.each(data, item => {
            if (item.name === 'note') {
                promise = promise.then(() => this.importNote(item.elements));
            }
        });

        return promise;
    }

    /**
     * Import a note from Evernote backup.
     *
     * @param {Array} elements - note elements
     * @returns {Promise}
     */
    async importNote(elements) {
        const data = this.parseData(elements);
        log('note data', data);

        const mData = await __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/markdown', 'parse', data.note);
        const note = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.extend(data.note, mData);

        return Promise.all([__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Tags', 'addTags', { tags: data.note.tags }), __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Files', 'addFiles', { files: data.files }), __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Notes', 'saveModelObject', {
            data: note,
            dontValidate: true,
            saveTags: true
        })]);
    }

    /**
     * Parse Evernote note data.
     *
     * @param {Object} elements - note elements
     * @returns {Object}
     */
    parseData(elements) {
        const note = { title: this.findTextAttr(elements, 'title') };

        // File attachments
        const files = this.parseFiles(elements);
        note.files = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.pluck(files, 'id');

        // Content
        note.content = this.parseContent(elements, files);

        // Tags
        const tags = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.where(elements, { name: 'tag' });
        note.tags = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.map(tags, tag => this.getTextAttr(tag));
        note.content = `#${note.tags.join(' #')}\n\n${note.content}`;

        return { note, files };
    }

    /**
     * Parse Evernote note's content.
     *
     * @param {Array} elements
     * @param {Array} files
     * @returns {String}
     */
    parseContent(elements, files) {
        let content = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.findWhere(elements, { name: 'content' });
        content = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.findWhere(content.elements, { type: 'cdata' }).cdata;

        const obj = __WEBPACK_IMPORTED_MODULE_3_xml_js___default.a.xml2js(content, {
            ignoreDoctype: true,
            ignoreDeclaration: true
        }).elements[0];

        // Create correct attachment links
        /* eslint-disable no-param-reassign */
        __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.each(this.findMedia(obj), item => {
            const file = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.findWhere(files, { id: item.attributes.hash }) || {};

            if (item.attributes.type.search(/^image/) !== -1) {
                item.name = 'img';
                item.attributes = {
                    src: `#file:${item.attributes.hash}`,
                    alt: file.name
                };
            } else {
                item.name = 'a';
                item.attributes = { href: `#file:${item.attributes.hash}` };
                item.elements = [{ type: 'text', text: file.name }];
            }
        });
        /* eslint-enable */

        // Convert todo lists
        content = __WEBPACK_IMPORTED_MODULE_3_xml_js___default.a.json2xml(obj).replace(/<en-todo( checked="false")?\/>/g, '[] ').replace(/<en-todo checked="true"\/>/g, '[x] ');

        // Convert to Markdown
        const md = new __WEBPACK_IMPORTED_MODULE_5_turndown__["default"]();
        md.use(__WEBPACK_IMPORTED_MODULE_6_turndown_plugin_gfm__["gfm"]);

        return md.turndown(content).replace(/\n{2,}/g, '\n').replace(/\\+\[/g, '[').replace(/\\+\]/g, ']');
    }

    /**
     * Find media attachments in content.
     *
     * @param {Object} obj - content
     * @returns {Array}
     */
    findMedia(obj) {
        let media = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.where(obj.elements, { name: 'en-media' });

        // Find media attachments inside of div elements
        const divs = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.where(obj.elements, { name: 'div' });
        __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.each(divs, div => {
            const dMedia = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.where(div.elements, { name: 'en-media' });
            if (dMedia && dMedia.length) {
                media = media.concat(dMedia);
            }
        });

        return media;
    }

    /**
     * Parse file attachments.
     *
     * @param {Array} elements
     * @returns {Array}
     */
    parseFiles(elements) {
        let files = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.where(elements, { name: 'resource' });
        files = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.map(files, file => {
            let name = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.findWhere(file.elements, { name: 'resource-attributes' });
            name = this.findTextAttr(name.elements, 'file-name');

            const data = {
                name,
                src: this.findTextAttr(file.elements, 'data'),
                fileType: this.findTextAttr(file.elements, 'mime')
            };

            // Create the ID
            data.src = data.src.replace(/(\r|\n)+/g, '').trim();
            const binary = __WEBPACK_IMPORTED_MODULE_4_base64_js___default.a.toByteArray(data.src);
            data.id = __WEBPACK_IMPORTED_MODULE_8_js_md5___default.a.create().update(binary).hex(); // eslint-disable-line

            data.src = `data:${data.fileType};base64,${data.src}`;

            return data;
        });

        return files;
    }

    /**
     * Find and return a text attribute.
     *
     * @param {Object} elements
     * @param {String} name - attribute name
     * @returns {String}
     */
    findTextAttr(elements, name) {
        const data = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.findWhere(elements, { name });
        return data ? this.getTextAttr(data) : '';
    }

    /**
     * Return text attribute.
     *
     * @param {Object} data
     * @param {Array} data.elements
     * @returns {String}
     */
    getTextAttr(data) {
        const text = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.findWhere(data.elements, { type: 'text' });
        return text ? text.text : '';
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = ImportEvernote;


/***/ }),
/* 1243 */,
/* 1244 */,
/* 1245 */,
/* 1246 */,
/* 1247 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jszip__ = __webpack_require__(226);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jszip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_jszip__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_fileSaver__ = __webpack_require__(305);
/**
 * @module components/importExport/Export
 */








const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:components/importExport/Export');

/**
 * Export data from Encryptic to a ZIP archive.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Export extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Current user's profile model data.
     *
     * @prop {Object}
     */
    get user() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'getUser').attributes;
    }

    /**
     * ProfileId.
     *
     * @prop {String}
     */
    get profileId() {
        return this.user.username;
    }

    /**
     * The names of collections that need to be exported.
     *
     * @prop {Array}
     */
    get collections() {
        return ['Notes', 'Notebooks', 'Tags', 'Configs', 'Files', 'Users'];
    }

    onDestroy() {
        this.zip = null;
    }

    init() {
        this.zip = new __WEBPACK_IMPORTED_MODULE_3_jszip___default.a();

        // If data is provided, start exporting them without fetching anything
        if (this.options.data) {
            return this.exportData();
        } else if (this.options.exportKey) {
            return this.exportKey();
        }

        // Otherwise, fetch data from database and then start exporting them
        return this.export();
    }

    /**
     * Collections were already fetched. Start exporting them.
     *
     * @returns {Promise}
     */
    exportData() {
        const { data } = this.options;

        // There is no data to export
        if (data.length) {
            return Promise.resolve();
        }

        /* Data structure should be similar to this:
         * [Notes, Notebooks, Tags]
         */
        return this.exportCollections(data).then(() => this.saveToFile()).catch(err => log('error', err));
    }

    /**
     * Export the OpenPGP private key
     */
    exportKey() {
        const blob = new Blob([this.user.privateKey], { type: 'text/plain;charset=ascii' });

        this.saveAs(blob, `Encryptic-key-${this.user.username}.asc`);
        this.destroy();
    }

    /**
     * Fetch collections from a profile and export them.
     *
     * @returns {Promise}
     */
    export() {
        const promises = [];

        // Export profile data
        this.exportProfile();

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(this.collections, type => {
            promises.push(this.fetchExportCollection(type));
        });

        return Promise.all(promises).then(() => this.saveToFile()).catch(err => log('error', err));
    }

    /**
     * Fetch a collection and export it.
     *
     * @param {String} type - collection name [notes|notebooks|...]
     * @returns {Promise}
     */
    fetchExportCollection(type) {
        const profileId = this.profileId;

        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request(`collections/${type}`, 'find', { profileId }).then(collection => this.exportCollection(collection));
    }

    /**
     * Export the user's profile data.
     */
    exportProfile() {
        const user = JSON.stringify([this.user]);
        this.zip.file('Encryptic-backups/profiles.json', user);
    }

    /**
     * Export data from collections.
     *
     * @param {Array} collections - an array of collections
     */
    exportCollections(collections) {
        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(collections, collection => this.exportCollection(collection));
        this.exportProfile();
    }

    /**
     * Export data from a collection.
     *
     * @param {Object} collection - Backbone collection
     */
    exportCollection(collection) {
        // eslint-disable-line
        const profileId = collection.profileId || this.profileId;
        const path = `Encryptic-backups/${profileId}`;
        const coll = collection.fullCollection || collection;

        // Every model in a notes collection is saved in separate files
        if (collection.storeName === 'notes') {
            coll.each(model => this.exportNote(path, model));
        } else if (collection.storeName === 'files') {
            coll.each(model => this.exportFile(path, model));
        }
        // Other collections' data is saved in one JSON file
        else {
                this.exportToJSON(path, collection);
            }
        log(`exporting ${coll.storeName}`);
    }

    /**
     * Export a collection to a JSON file.
     *
     * @param {String} path
     * @param {Object} collection
     */
    exportToJSON(path, collection) {
        const data = JSON.stringify(collection.getExportData ? collection.getExportData() : collection.toJSON());
        this.zip.file(`${path}/${collection.storeName}.json`, data);
    }

    /**
     * Export a note model to the ZIP archive.
     *
     * @param {String} path - the path where the note file should be saved
     * @param {Object} model
     */
    exportNote(path, model) {
        const fileName = `${path}/notes/${model.id}`;
        let data = model.getData();

        // Create a Markdown file with note's content only if encryption is disabled
        if (data.content) {
            this.zip.file(`${fileName}.md`, data.content);
        }

        data = JSON.stringify(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.omit(data, 'content'));
        this.zip.file(`${fileName}.json`, data);
    }

    /**
     * Export a file attachment.
     *
     * @param {String} path - the path where the file should be saved
     * @param {Object} model
     */
    exportFile(path, model) {
        this.zip.file(`${path}/files/${model.id}.json`, JSON.stringify(model.getData()));
    }

    /**
     * Save ZIP archive to a file.
     *
     * @returns {Promise}
     */
    saveToFile() {
        return this.zip.generateAsync({ type: 'blob' }).then(blob => this.saveAs(blob, `Encryptic-backup-${this.user.username}.zip`)).then(() => this.destroy());
    }

    saveAs(...args) {
        return Object(__WEBPACK_IMPORTED_MODULE_5__utils_fileSaver__["a" /* default */])(...args);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Export;


/***/ }),
/* 1248 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_localforage__ = __webpack_require__(196);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_localforage___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_localforage__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Encryption__ = __webpack_require__(1249);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__View__ = __webpack_require__(1250);
/**
 * @module components/importExport/migrate/Controller
 */









const log = __WEBPACK_IMPORTED_MODULE_3_debug___default()('lav:components/importExport/migrate/Controller');

/**
 * Migrates data from the old version of Encryptic to the new.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_1_backbone_marionette___default.a.Object {

    /**
     * @returns {Promise}
     */
    init() {
        return new Promise((resolve, reject) => {
            this.promise = { resolve, reject };
            this.check();
        });
    }

    /**
     * Check if migration is needed.
     *
     * @returns {Promise}
     */
    check() {
        return this.requiresMigration().then(requiresMigration => {
            if (!requiresMigration) {
                this.promise.resolve();
                return this.destroy();
            }

            log('started migration');
            return this.findOldData('configs').then(configs => this.show(configs));
        });
    }

    /**
     * Check if it requires migration.
     *
     * @returns {Promise} - resolves with boolean
     */
    requiresMigration() {
        return Promise.all([__WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Notes', 'find', {}), this.findOldData()]).then(([collection, oldData]) => {
            return collection.length === 0 && oldData.length !== 0;
        });
    }

    /**
     * Fetch old data from notes-db database.
     *
     * @param {String} storeName - [notes|notebooks|files|tags|configs]
     * @returns {Promise}
     */
    findOldData(storeName = 'notes') {
        const models = [];

        return __WEBPACK_IMPORTED_MODULE_4_localforage___default.a.createInstance({ storeName, name: 'notes-db' }).iterate(value => {
            if (value) {
                models.push(value);
            }
        }).then(() => models);
    }

    /**
     * Check authentication.
     *
     * @param {Object} configs
     * @returns {Promise}
     */
    show(configs) {
        this.configs = {};
        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(configs, conf => this.configs[conf.name] = conf.value);
        this.configs.encrypt = Number(this.configs.encrypt);

        this.view = new __WEBPACK_IMPORTED_MODULE_6__View__["a" /* default */]({ configs: this.configs });
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'show', { region: 'brand', view: this.view });

        this.listenTo(this.view, 'cancel', this.cancelMigration);
        this.listenTo(this.view, 'start', this.startMigration);
    }

    /**
     * Start migration process.
     *
     * @returns {Promise}
     */
    startMigration() {
        let promise = Promise.resolve(true);
        this.encrypt = new __WEBPACK_IMPORTED_MODULE_5__Encryption__["a" /* default */]({ configs: this.configs });

        if (this.configs.encrypt) {
            promise = promise.then(() => {
                return this.encrypt.auth({ password: this.view.ui.password.val() });
            });
        }

        return promise.then(res => {
            if (!res) {
                return this.view.triggerMethod('auth:failure');
            }
            console.log('startMigration(): promise result:');
            console.log(res);

            return this.migrateCollections();
        }).catch(error => {
            log('error', error);

            this.view.triggerMethod('migrate:failure', { error });
        });
    }

    /**
     * Cancel migration.
     */
    cancelMigration() {
        this.promise.resolve();
        this.destroy();
    }

    /**
     * Migrate data from old database.
     *
     * @returns {Promise}
     */
    migrateCollections() {
        this.view.triggerMethod('migrate:start');

        return Promise.all([this.findOldData('notes'), this.findOldData('notebooks'), this.findOldData('tags'), this.findOldData('files')]).then(collections => {
            let promise = Promise.resolve();

            __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(collections, (data, i) => {
                this.view.triggerMethod('migrate:collection', {
                    percent: (i + 1) / collections.length * 100,
                    type: data.length ? data[0].type : ''
                });

                promise = promise.then(() => this.migrateCollection(data));
            });

            return promise;
        }).then(() => {
            this.promise.resolve();
            this.destroy();
        });
    }

    /**
     * Migrate data to a single collection.
     *
     * @param {Array} data
     * @returns {Promise}
     */
    migrateCollection(data) {
        const promises = [];

        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(data, attributes => {
            promises.push(this.migrateModel({ attributes }));
        });

        return Promise.all(promises);
    }

    /**
     * Migrate a model from the previous database.
     *
     * @param {Object} {attributes} - model's attributes
     * @returns {Promise}
     */
    migrateModel({ attributes }) {
        const name = `collections/${__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.capitalize(attributes.type)}`;
        const data = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.omit(this.encrypt.decryptModel({ attributes }), 'encryptedData');
        console.log('migrating data:');
        console.log(name);
        console.log(data);
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request(name, 'saveModelObject', { data });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 1249 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sjcl__ = __webpack_require__(199);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_sjcl___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_sjcl__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/**
 * @module components/importExport/migrate/Encryption
 */




/**
 * Legacy encryption class (it exists only for migration purpose).
 *
 * @class
 * @license MPL-2.0
 */
class Encryption {

    /**
     * @param {Array} {configs} - an array of configs
     */
    constructor({ configs }) {
        this.configs = configs;
    }

    /**
     * Check the password and create a PBKDF2 if it's correct.
     *
     * @param {Object} opt
     * @param {String} opt.password
     * @returns {Promise}
     */
    auth(opt) {
        return this.checkPassword(opt).then(res => {
            if (!res) {
                return res;
            }

            return this.deriveKey(opt);
        });
    }

    /**
     * Check if the password is correct.
     *
     * @param {String} {password}
     * @returns {Promise} resolves with boolean
     */
    checkPassword({ password }) {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/Encryption', 'sha256', { text: password }).then(passHash => {
            return passHash.toString() === this.configs.encryptPass.toString();
        });
    }

    /**
     * Compute PBKDF2.
     *
     * @param {String} {password}
     * @returns {Object}
     */
    deriveKey({ password }) {
        let pbkdf2 = {};

        pbkdf2.iter = Number(this.configs.encryptIter);
        pbkdf2.salt = this.configs.encryptSalt;

        pbkdf2 = __WEBPACK_IMPORTED_MODULE_1_sjcl___default.a.misc.cachedPbkdf2(password, pbkdf2);
        const key = pbkdf2.key.slice(0, Number(this.configs.encryptKeySize) / 32);

        return this.keys = { key, hexKey: __WEBPACK_IMPORTED_MODULE_1_sjcl___default.a.codec.hex.fromBits(key) };
    }

    /**
     * Decrypt some text.
     *
     * @param {String} {text}
     * @returns {String}
     */
    decrypt({ text }) {
        if (!text || !text.length || !this.configs.encrypt) {
            return text;
        }

        return __WEBPACK_IMPORTED_MODULE_1_sjcl___default.a.decrypt(this.keys.key, text);
    }

    /**
     * Decrypt a model's attributes
     *
     * @param {Object} {attributes}
     * @returns {Object}
     */
    decryptModel({ attributes }) {
        if (!this.configs.encrypt) {
            return attributes;
        }

        const decrypted = JSON.parse(this.decrypt({ text: attributes.encryptedData }));
        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend({}, attributes, decrypted);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Encryption;


/***/ }),
/* 1250 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/importExport/migrate/View
 */



/**
 * Migrate view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1251);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'container text-center -auth';
    }

    ui() {
        return {
            confirm: '#migrate--confirm',
            progress: '#migrate--progress',
            progressBar: '.migrate--progress--bar',
            progressText: '.migrate--progress--text',
            password: '[name=password]',
            alert: '#migrate--alert',
            alertText: '#migrate--alert .alert'
        };
    }

    triggers() {
        return {
            'click #migrate--cancel': 'cancel',
            'click #migrate--start': 'start'
        };
    }

    serializeData() {
        return this.options;
    }

    /**
     * Show a message that something went wrong.
     *
     * @param {String} text
     */
    showAlert(text) {
        this.ui.alert.removeClass('hidden');
        this.ui.alertText.text(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n(text));
    }

    onAuthFailure() {
        this.showAlert('Wrong password!');
    }

    /**
     * After migration starts, show the progress bar.
     */
    onMigrateStart() {
        this.ui.alert.addClass('hidden');
        this.ui.confirm.addClass('hidden');
        this.ui.progress.removeClass('hidden');
    }

    /**
     * Show a message that a collection is being restored to the new version.
     *
     * @param {String} type
     * @param {Number} percent
     */
    onMigrateCollection({ type, percent }) {
        this.ui.progressBar.css({ width: `${percent}%` });
        this.ui.progressText.text(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n(`Migrating ${type}`));
    }

    onMigrateFailure() {
        this.showAlert('Failed to migrate your old data!');
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1251 */
/***/ (function(module, exports) {

module.exports = "<header>\n    <h1 class=\"header--brand\">{{_.i18n('Migration')}}</h1>\n</header>\n\n<div class=\"container-fluid container--white\">\n    <div class=\"row hidden\" id=\"migrate--alert\" style=\"padding-bottom:0\">\n        <div class=\"col-xs-12 alert alert-danger\" style=\"margin-bottom:0\"></div>\n    </div>\n\n    <div class=\"row\" id=\"migrate--confirm\">\n        <div class=\"col-xs-12\">\n            <div class=\"form-group text-left text--brand\">{{_.i18n('We found existing data from the previous version of Encryptic. If you want to recover your data, click on \"Start\" button.')}}</div>\n\n            <% if (configs.encrypt) { %>\n            <div class=\"form-group text-left text--brand\">{{_.i18n('Please, enter the password you used in the previous version of Encryptic.')}}</div>\n            <div class=\"form-group\">\n                <input name=\"password\" class=\"form-control col-xs-12 input-lg input--brand\" type=\"password\" placeholder=\"{{_.i18n('Password')}}\" />\n                <br/><br/><br/>\n            </div>\n            <% } %>\n\n            <div class=\"form-group row\">\n                <div class=\"col-xs-6\">\n                    <button id=\"migrate--cancel\" class=\"btn btn-lg btn-block btn-warning pull-right\">{{_.i18n('Cancel')}}</button>\n                </div>\n                <div class=\"col-xs-6\">\n                    <button id=\"migrate--start\" class=\"btn btn-lg btn-block btn-success pull-left\">{{_.i18n('Start')}}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div id=\"migrate--progress\" class=\"row hidden text--brand\">\n        <div class=\"col-xs-12\">\n            <div class=\"progress\">\n                <div class=\"progress-bar progress-bar-success migrate--progress--bar\" style=\"width: 0%\"></div>\n            </div>\n            <div class=\"form-group text--brand migrate--progress--text\"></div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 1252 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__View__ = __webpack_require__(1253);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/**
 * @module components/share/Controller
 */






const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:components/share/Controller');

/**
 * Share controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_2_backbone_marionette___default.a.Object {

    /**
     * Component channel (components/share)
     *
     * @prop {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/share');
    }

    /**
     * Signal model channel (models/Signal)
     *
     * @prop {Object}
     */
    get signalChannel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('models/Signal');
    }

    initialize() {
        this.channel.reply({
            show: this.init
        }, this);
    }

    /**
     * @public
     * @todo use profileId when fetching users?
     * @param {Object} data
     * @param {Object} data.model
     */
    init(data) {
        this.username = __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Profiles', 'getProfile');

        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Users', 'find').then(users => this.show(data, users)).catch(err => log('error', err));
    }

    /**
     * Render the view.
     *
     * @protected
     * @param {Object} model
     */
    show({ model }, users) {
        this.view = new __WEBPACK_IMPORTED_MODULE_3__View__["a" /* default */]({ model, users });
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'show', { region: 'modal', view: this.view });

        this.listenTo(this.view, 'search:user', this.searchUser);
        this.listenTo(this.view, 'childview:add:trust', this.addTrust);
        this.listenTo(this.view, 'childview:share', this.shareWith);
    }

    /**
     * Check if a user exists on the signaling server.
     *
     * @protected
     * @returns {Promise}
     */
    searchUser() {
        const username = this.view.ui.search.val().trim();

        if (!username.length || username === this.username || this.view.options.users.findWhere({ username })) {
            return;
        }

        // Disable the search form
        this.view.triggerMethod('search', { disabled: true });

        // Try to find on the signaling server
        return this.signalChannel.request('findUser', { username }).then(user => {
            this.view.triggerMethod('search', { disabled: false });

            // Show a warning that a user does not exist
            if (__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.isEmpty(user) || user.username !== username) {
                return this.view.triggerMethod('user:error');
            }

            this.view.showUserInfo({ user });
        }).catch(err => log('error', err));
    }

    /**
     * Add a user to trust.
     *
     * @protected
     * @param {Object} view
     * @returns {Promise}
     */
    addTrust(view) {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Users', 'invite', {
            user: view.options.user
        }).then(() => this.view.showUsers()).catch(err => log('error', err));
    }

    /**
     * Start sharing with a user.
     *
     * @protected
     * @param {String} username
     * @returns {Promise}
     */
    shareWith({ username }) {
        this.view.model.toggleShare(username);

        return this.view.model.channel.request('saveModel', {
            model: this.view.model
        });
    }

}
/* unused harmony export default */


__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.once('App', 'init', () => new Controller());

/***/ }),
/* 1253 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__users_View__ = __webpack_require__(1254);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__info_View__ = __webpack_require__(1256);
/**
 * @module components/share/View
 */





/**
 * Share view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_1_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1258);
        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'modal fade';
    }

    regions() {
        return {
            content: '#share--content'
        };
    }

    ui() {
        return {
            search: '[name=search]',
            formField: '.share--fieldset',
            userError: '.share--user--error',
            back: '.share--back'
        };
    }

    events() {
        return {
            'click @ui.back': 'showUsers'
        };
    }

    triggers() {
        return {
            'submit .share--search': 'search:user'
        };
    }

    /**
     * Show a list of trusted users.
     */
    onRender() {
        this.showUsers();
    }

    onShownModal() {
        this.ui.search.focus();
    }

    /**
     * Show a list of users whom the user trusts.
     */
    showUsers() {
        this.showChildView('content', new __WEBPACK_IMPORTED_MODULE_2__users_View__["a" /* default */]({
            model: this.options.model,
            collection: this.options.users
        }));
        this.ui.back.addClass('hidden');
    }

    /**
     * Disable the search form.
     *
     * @param {Boolean} disabled
     */
    onSearch({ disabled }) {
        this.ui.search.val('');
        this.ui.formField.attr('disabled', disabled);
    }

    /**
     * Show a warning that a user does not exist
     */
    onUserError() {
        this.ui.userError.removeClass('hidden');
    }

    /**
     * Show information about a user.
     *
     * @param {Object} data
     * @param {Object} data.user
     */
    showUserInfo(data) {
        this.showChildView('content', new __WEBPACK_IMPORTED_MODULE_3__info_View__["a" /* default */](data));
        this.ui.back.removeClass('hidden');
        this.ui.userError.addClass('hidden');
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1254 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_marionette__);
/**
 * @module components/share/Users
 */



/**
 * Show trusted users.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Users extends __WEBPACK_IMPORTED_MODULE_1_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1255);
        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.template(tmpl);
    }

    events() {
        return {
            'click .share--toggle': 'share'
        };
    }

    modelEvents() {
        return {
            'change:sharedWith': 'render'
        };
    }

    collectionEvents() {
        return {
            'add change update': 'render'
        };
    }

    /**
     * Trigger "share" method.
     *
     * @param {Object} e
     */
    share(e) {
        const username = this.$(e.currentTarget).attr('data-user');
        this.triggerMethod('share', { username });
    }

    serializeData() {
        return this.options;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Users;


/***/ }),
/* 1255 */
/***/ (function(module, exports) {

module.exports = "<% if (!_.isEmpty(collection.models)) { %>\n<h4>{{_.i18n('Users you trust')}}:</h4>\n<div class=\"list-group\">\n    <% _.each(collection.getTrusted(), function(user) { %>\n    <div class=\"list-group-item\">\n        <div class=\"pull-right\">\n            <% if (model.isSharedWith(user.get('username'))) { %>\n            <button class=\"btn btn-success share--toggle\" data-user=\"{{user.get('username')}}\">\n                {{_.i18n('Shared')}}\n            </button>\n            <% } else { %>\n            <button class=\"btn btn-default share--toggle\" data-user=\"{{user.get('username')}}\">\n                {{_.i18n('Share')}}\n            </button>\n            <% } %>\n        </div>\n        <div>\n            <h4>\n                {{user.get('username')}}\n                <% if (user.get('pendingInvite')) { %>\n                <small>{{_.i18n('pending invite')}}</small>\n                <% } %>\n            </h4>\n            <p>{{_.i18n('Key fingerprint')}}: <mark>{{_.splitBy4(user.get('fingerprint'))}}</mark></p>\n        </div>\n    </div>\n    <% }) %>\n</div>\n<% } %>\n\n<div class=\"alert alert-info\">\n    {{_.i18n('Please note that when you share a document with someone, you give them read and write access.')}}\n</div>\n"

/***/ }),
/* 1256 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_marionette__);
/**
 * @module components/share/Info
 */



/**
 * Show information about a user.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Info extends __WEBPACK_IMPORTED_MODULE_1_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1257);
        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.template(tmpl);
    }

    triggers() {
        return {
            'click .share--trust': 'add:trust'
        };
    }

    serializeData() {
        return this.options;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Info;


/***/ }),
/* 1257 */
/***/ (function(module, exports) {

module.exports = "<div class=\"alert alert-info\">\n    Before adding a user to trust, check their key fingerprint.\n    You can ask the user to share their fingerprint by email or phone.\n</div>\n\n<div class=\"list-group-item\">\n    <div class=\"pull-right\">\n        <button class=\"btn btn-success share--trust\">\n            {{_.i18n('Add to trust')}}\n        </button>\n    </div>\n    <div>\n        <i class=\"icon-user\"></i>\n        <h4>{{user.username}}</h4>\n        <p>{{_.i18n('Key fingerprint')}}: <mark>{{_.splitBy4(user.fingerprint)}}</mark></p>\n    </div>\n</div>\n"

/***/ }),
/* 1258 */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h3 class=\"modal-title\">{{_.i18n('Share')}}</h3>\n        </div>\n        <div class=\"modal-body\">\n            <form class=\"form-group share--search\" method=\"post\">\n                <fieldset class=\"share--fieldset\">\n                    <div class=\"input-group\">\n                        <input class=\"form-control\" type=\"text\" name=\"search\" placeholder=\"{{_.i18n('Username')}}\" />\n                        <span class=\"input-group-btn\">\n                            <button type=\"submit\" class=\"btn btn-default btn--search\">\n                                {{_.i18n('Search')}}\n                            </button>\n                        </span>\n                    </div>\n                </fieldset>\n            </form>\n\n            <div class=\"share--user--error alert alert-warning hidden\">{{_.i18n('User does not exist')}}</div>\n\n            <div id=\"share--content\"></div>\n        </div>\n        <div class=\"modal-footer\">\n            <button class=\"btn btn-default share--back hidden\">{{ _.i18n('Back') }}</button>\n            <button class=\"btn btn-info\" data-dismiss=\"modal\">{{ _.i18n('Close') }}</button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 1259 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Sync__ = __webpack_require__(1260);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__settings_View__ = __webpack_require__(1274);
/**
 * @module components/dropbox/main
 * @license MPL-2.0
 */




function initialize() {
    const sync = __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('collections/Configs', 'findConfig', {
        name: 'cloudStorage'
    });

    // Reply with the settings view
    __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.channel('components/dropbox').reply({ getSettingsView: () => __WEBPACK_IMPORTED_MODULE_2__settings_View__["a" /* default */] });

    if (sync === 'dropbox') {
        return new __WEBPACK_IMPORTED_MODULE_1__Sync__["a" /* default */]().init();
    }
}

__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'start', initialize);

/***/ }),
/* 1260 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Adapter__ = __webpack_require__(1261);
/**
 * @module components/dropbox/Sync
 */





const log = __WEBPACK_IMPORTED_MODULE_2_debug___default()('lav:components/dropbox/Sync');

/**
 * Dropbox sync.
 *
 * @class
 * @license MPL-2.0
 */
class Sync {

    /**
     * Radio channel.
     *
     * @prop {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.channel('components/sync');
    }

    /**
     * App settings.
     *
     * @prop {Object}
     */
    get configs() {
        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('collections/Configs', 'findConfigs');
    }

    /**
     * Names of the collections which should be synchronized.
     *
     * @prop {Array}
     */
    get collectionNames() {
        return ['Notes', 'Notebooks', 'Tags', 'Files'];
    }

    /**
     * Profile id.
     *
     * @prop {String}
     */
    get profileId() {
        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('collections/Profiles', 'getProfile');
    }

    constructor() {
        /**
         * Sync adapter instance (Dropbox)
         *
         * @prop {Object}
         */
        this.adapter = new __WEBPACK_IMPORTED_MODULE_3__Adapter__["a" /* default */](this.configs);

        /**
         * Sync stats.
         *
         * @prop {Object}
         */
        this.stat = {
            interval: 2000,
            intervalMax: 15000,
            intervalMin: 2000
        };

        // Reply to requests
        this.channel.reply({
            start: this.start
        }, this);
    }

    /**
     * Initialize synchronization.
     *
     * @returns {Promise}
     */
    async init() {
        try {
            const authenticated = await this.adapter.checkAuth();
            if (authenticated) {
                return this.start();
            }
            log('Authentication failed');
        } catch (e) {
            log('Dropbox auth error', e);
        }
    }

    /**
     * Start synchronizing.
     */
    start() {
        this.stopWatch();
        this.timeout = setTimeout(() => this.sync(), 500);
    }

    /**
     * Schedule a new check.
     */
    startWatch() {
        this.stopWatch();
        this.timeout = window.setTimeout(() => this.sync(), this.getInterval());
    }

    /**
     * Compute the wait time for the watchdog.
     *
     * @returns {Number}
     */
    getInterval() {
        const range = this.stat.intervalMax - this.stat.intervalMin;

        if (this.stat.statRemote) {
            this.stat.interval -= range * 0.4;
        } else {
            this.stat.interval += range * 0.2;
        }

        this.stat.interval = Math.max(this.stat.intervalMin, this.stat.interval);
        this.stat.interval = Math.min(this.stat.intervalMax, this.stat.interval);
        log(`next check is after ${this.stat.interval}ms`);
        return this.stat.interval;
    }

    /**
     * Stop a check.
     */
    stopWatch() {
        if (this.timeout) {
            window.clearTimeout(this.timeout);
        }
    }

    /**
     * Synchronize all collections.
     *
     * @returns {Promise}
     */
    sync() {
        let promise = Promise.resolve();
        this.channel.trigger('start');
        this.stat.statRemote = false;
        log('checking for changes...');

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(this.collectionNames, name => {
            promise = promise.then(() => this.syncCollection(name));
        });

        return promise.then(() => {
            this.channel.trigger('stop', { result: 'success' });
            this.startWatch();
        }).catch(error => {
            log('sync error', error);
            this.channel.trigger('stop', { result: 'error', error });
        });
    }

    /**
     * Synchronize a collection.
     *
     * @param {String} name - Notes, Notebooks, Files, Tags...
     * @returns {Promise}
     */
    async syncCollection(name) {
        const collection = await __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request(`collections/${name}`, 'find');
        const files = await this.adapter.find({
            type: collection.storeName,
            profileId: this.profileId
        });
        const data = { files, collection: collection.fullCollection || collection };

        await this.syncRemoteChanges(data);
        await this.syncLocalChanges(data);
    }

    /**
     * Save remote changes locally.
     *
     * @param {Array} files
     * @param {Object} collection - Backbone model
     * @returns {Promise}
     */
    syncRemoteChanges({ files, collection }) {
        const promises = [];
        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(files, file => {
            // console.log("dropbox file: ");
            // console.log(file);
            const model = collection.findWhere({ id: file.id });

            if (!model || model.get('updated') < file.updated) {
                this.stat.statRemote = true;
                const newModel = promises.push(collection.channel.request('saveModelObject', {
                    data: file,
                    profileId: this.profileId
                }));
                __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.trigger('components/notes', 'save:model', { model: newModel });
            }
        });

        return Promise.all(promises);
    }

    /**
     * Synchronize local changes with a cloud storage.
     *
     * @param {Array} files
     * @param {Object} collection - Backbone model
     * @returns {Promise}
     */
    syncLocalChanges({ files, collection }) {
        const promises = [];

        collection.each(model => {
            const file = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.findWhere(files, { id: model.id });

            if (!file || file.updated < model.get('updated')) {
                promises.push(this.adapter.saveModel({ model, profileId: this.profileId }));
            }
        });

        return Promise.all(promises);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Sync;


/***/ }),
/* 1261 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_dropbox__ = __webpack_require__(417);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_dropbox___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_dropbox__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_backbone__);
/**
 * @module components/dropbox/Adapter
 */





/**
 * Dropbox sync adapter.
 *
 * @class
 * @license MPL-2.0
 */
class Adapter {

    /**
     * Default Dropbox app key.
     *
     * @prop {String}
     */
    get clientKey() {
        return 'hlicys9cs8rj3ep';
    }

    /**
     * @param {Object} configs - app settings
     */
    constructor(configs) {
        const { dropboxKey } = configs;
        this.configs = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({
            clientKey: dropboxKey.length ? dropboxKey : this.clientKey,
            accessToken: configs.dropboxAccessToken
        }, configs);

        /**
         * Dropbox instance
         *
         * @prop {Object}
         */
        this.dbx = new __WEBPACK_IMPORTED_MODULE_0_dropbox___default.a({ clientId: this.configs.clientKey });
    }

    /**
     * Check authentication.
     *
     * @returns {Promise}
     */
    checkAuth() {
        // eslint-disable-line complexity
        const hash = this.parseHash();

        // The access token was saved in configs
        if (this.configs.accessToken && this.configs.accessToken.length) {
            this.dbx.setAccessToken(this.configs.accessToken);
            return Promise.resolve(true);
        }
        // A user has granted the permission
        else if (hash.access_token && hash.access_token.length) {
                console.log(`Access token: ${hash.access_token}`);
                return this.saveAccessToken(hash.access_token);
            } else {
                // Clear the location hash if there was an error with auth
                if (hash.error) {
                    __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'navigate', { url: '/' });
                }

                return this.authenticate();
            }
    }

    /**
     * Parse the location hash.
     *
     * @param {String} url
     * @returns {Object}
     */
    parseHash(url = __WEBPACK_IMPORTED_MODULE_3_backbone___default.a.history.fragment) {
        const hash = url.split('&');
        const ret = {};

        if (!hash.length) {
            return ret;
        }

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(hash, str => {
            const parts = str.replace(/\+/g, ' ').split('=');

            if (parts.length > 1) {
                const key = parts.shift();
                let val = parts.length > 0 ? parts.join('=') : undefined;
                val = undefined ? null : decodeURIComponent(val.trim());
                ret[key] = val;
            }
        });

        return ret;
    }

    /**
     * Authenticate.
     *
     * @returns {Promise}
     */
    authenticate() {
        if (window.cordova) {
            return this.authCordova();
        } else {
            return this.authBrowser();
        }
    }

    /**
     * Authenticate in browser.
     */
    async authBrowser() {
        const url = window.electron ? 'http://localhost:9000/' : document.location;
        const authUrl = this.dbx.getAuthenticationUrl(url);
        const answer = await __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/confirm', 'show', {
            content: __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n('dropbox.auth confirm')
        });

        if (answer === 'confirm') {
            window.location = authUrl;
            if (window.electron) {
                return this.authElectron();
            }
        }
    }

    /**
     * Authenticate in Electron environment.
     *
     * @returns {Promise}
     */
    authElectron() {
        const { ipcRenderer } = window.electron;

        return new Promise(resolve => {
            ipcRenderer.once('lav:dropbox:oauth', (event, { url }) => {
                const hash = url ? this.parseHash(url.split('#')[1]) : {};

                if (hash.access_token && hash.access_token.length) {
                    this.saveAccessToken(hash.access_token).then(resolve);
                } else {
                    resolve(false);
                }
            });
        });
    }

    /**
     * Authenticate in Cordova environment (requires inappbrowser plugin).
     *
     * @returns {Promise} - true if authenticated
     */
    authCordova() {
        return new Promise(resolve => {
            this.dbx.authenticateWithCordova(accessToken => {
                this.saveAccessToken(accessToken).then(resolve);
            }, () => resolve(false));
        });
    }

    /**
     * Save the access token in configs.
     *
     * @param {String} accessToken
     * @returns {Promise}
     */
    async saveAccessToken(accessToken) {
        await __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Configs', 'saveConfig', {
            config: { name: 'dropboxAccessToken', value: accessToken }
        });

        // Redirect to the main page again
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'navigate', { url: '/' });
        this.configs.accessToken = accessToken;
        return true;
    }

    /**
     * Find all models of a particular collection type.
     *
     * @param {String} profileId
     * @param {String} type - [notes|notebooks|tags|files]
     * @returns {Promise}
     */
    async find({ profileId, type }) {
        const resp = await this.readDir({ path: `/${profileId}/${type}` });
        const promises = [];

        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(resp.entries, file => {
            if (file.name.search('.json') !== -1) {
                promises.push(this.readFile({ path: file.path_lower }));
            }
        });

        return Promise.all(promises);
    }

    /**
     * Read a directory on Dropbox.
     *
     * @param {String} {path} - path of the directory
     * @returns {Promise}
     */
    readDir({ path }) {
        return this.dbx.filesListFolder({
            path,
            include_deleted: false // eslint-disable-line
        }).catch(err => {
            // Empty folder
            if (err.status === 409) {
                return [];
            }

            return Promise.reject(err);
        });
    }

    /**
     * Read a file on Dropbox.
     *
     * @param {String} {path} - path of the file
     * @returns {Promise}
     */
    async readFile({ path }) {
        console.log('dropbox/Adapter.js: readFile()');
        const resp = await this.dbx.filesDownload({ path });
        return new Promise(resolve => {
            const reader = new FileReader();
            reader.addEventListener('loadend', () => {
                resolve(JSON.parse(reader.result));
            });
            reader.readAsText(resp.fileBlob);
        });
    }

    /**
     * Find a Backbone model on Dropbox.
     *
     * @param {Object} {model}
     * @returns {Promise} resolves with a note object
     */
    findModel({ model }) {
        if (!model.id) {
            return Promise.resolve();
        }

        return this.readFile({ path: this.getModelPath(model) });
    }

    /**
     * Save a Backbone model to Dropbox.
     *
     * @param {Object} model - Backbone model
     * @param {String} profileId
     * @returns {Promise}
     */
    saveModel({ model, profileId }) {
        // Don't do anything with empty models
        if (!model.id) {
            return Promise.resolve();
        }

        return this.dbx.filesUpload({
            path: this.getModelPath(model, profileId),
            autorename: false,
            mode: { '.tag': 'overwrite' },
            contents: JSON.stringify(model.getData())
        });
    }

    /**
     * Get a model's Dropbox path.
     *
     * @param {Object} model - Backbone model
     * @returns {String}
     */
    getModelPath(model, profileId) {
        return `/${profileId}/${model.storeName}/${model.id}.json`;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Adapter;


/***/ }),
/* 1262 */,
/* 1263 */,
/* 1264 */,
/* 1265 */,
/* 1266 */,
/* 1267 */,
/* 1268 */,
/* 1269 */,
/* 1270 */,
/* 1271 */,
/* 1272 */,
/* 1273 */,
/* 1274 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constants__ = __webpack_require__(344);
/**
 * @module components/dropbox/show/settings/View
 */




/**
 * Show a list of users whom you trust or invited.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Users extends __WEBPACK_IMPORTED_MODULE_1_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1275);
        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.template(tmpl);
    }

    get dropboxKeyNeed() {
        return __WEBPACK_IMPORTED_MODULE_2__constants__["a" /* default */].dropboxKeyNeed;
    }

    serializeData() {
        return {
            dropboxKey: this.collection.get('dropboxKey').get('value'),
            placeholder: this.dropboxKeyNeed ? 'Required' : 'Optional'
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Users;


/***/ }),
/* 1275 */
/***/ (function(module, exports) {

module.exports = "<div class=\"form-group\">\n    <h3>{{_.i18n('Dropbox API key')}}</h3>\n    <input class=\"form-control\" type=\"text\" name=\"dropboxKey\" value=\"{{dropboxKey}}\" placeholder=\"{{_.i18n(placeholder)}}\" />\n</div>\n\n<div class=\"form-group\">\n    <p>{{_.i18n('dropbox.api info 1')}} <a target=\"_blank\" href=\"https://www.dropbox.com/developers/apps\">Dropbox</a></p>\n    <p>{{_.i18n('dropbox.api info 2')}}</p>\n    <ol>\n        <li>{{_.i18n('dropbox.api info li 1')}}</li>\n        <li>{{_.i18n('dropbox.api info li 2')}}</li>\n    </ol>\n</div>\n"

/***/ }),
/* 1276 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__controller__ = __webpack_require__(1277);
/**
 * @module components/Notes/Router
 */





/**
 * Notes router.
 *
 * @class
 * @extends Marionette.AppRouter
 * @license MPL-2.0
 */
class Router extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.AppRouter {

  /**
   * Controller.
   *
   * @see module:components/Notes/controller
   * @returns {Object}
   */
  get controller() {
    return __WEBPACK_IMPORTED_MODULE_2__controller__["a" /* default */];
  }

  /**
   * appRoutes.
   *
   * @returns {Object}
   */
  get appRoutes() {
    const filter = 'notes(/f/:filter)(/q/:query)(/p:page)';

    return {
      '': 'showNotes',

      // Show notes list
      [`${filter}`]: 'showNotes',
      [`${filter}/show/:id`]: 'showNote',

      // Edit/add notes
      'notes/add': 'showForm',
      'notes/edit/:id': 'showForm'
    };
  }

}
/* unused harmony export default */


// Instantiate the router automatically
__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.once('App', 'init', () => new Router());

/***/ }),
/* 1277 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__list_Controller__ = __webpack_require__(1278);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__show_Controller__ = __webpack_require__(1285);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__form_Controller__ = __webpack_require__(1288);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__remove_Controller__ = __webpack_require__(1296);
/**
 * @module components/Notes/controller
 * @license MPL-2.0
 */









const log = __WEBPACK_IMPORTED_MODULE_1_debug___default()('lav:components/notes/controller');

/* harmony default export */ __webpack_exports__["a"] = ({

    /**
     * Router parameters.
     *
     * @returns {Object}
     */
    get options() {
        return this._args || {};
    },

    /**
     * Update router parameters.
     *
     * @param {Array} args
     * @returns {Object}
     */
    set options(args) {
        this._argsOld = this._args;
        this._args = {
            filter: args[0] || 'active',
            query: args[1],
            page: args[2],
            id: args[3]
        };
    },

    /**
     * Show a list of notes in the sidebar.
     */
    showNotes(...args) {
        this.options = args;

        // Don't instantiate the controller if filter paramaters are the same
        if (!this.filterHasChanged()) {
            return log('dont render notes sidebar');
        }

        log('showNotes', this.options);
        const controller = new __WEBPACK_IMPORTED_MODULE_3__list_Controller__["a" /* default */]({ filterArgs: this.options });
        controller.once('destroy', () => this.onListDestroy());
        return controller.init();
    },

    /**
     * Reset filter options once a user navigates to another component's page
     * (notebooks, settings, etc.)
     */
    onListDestroy() {
        const url = __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'getHash');

        if (url.search('notes') === -1) {
            log('reset options');
            this.options = [];
        }
    },

    /**
     * Check if filters have changed.
     *
     * @returns {Boolean}
     */
    filterHasChanged() {
        return !__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.isEqual(__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.omit(this.options, 'id', 'page'), __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.omit(this._argsOld || {}, 'id', 'page'));
    },

    /**
     * Show a particular note.
     *
     * @param {Array} ...args
     * @todo show the note view
     */
    showNote(...args) {
        // Show the sidebar
        this.showNotes(...args);

        // Show the note
        log('show the note');
        new __WEBPACK_IMPORTED_MODULE_4__show_Controller__["a" /* default */](this.options).init();
    },

    /**
     * Add/edit a note.
     *
     * @param {String} id
     */
    showForm(id) {
        // Show the sidebar if it isn't shown yet
        if (__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.isEmpty(this.options)) {
            this.showNotes(id);
        }

        log('showForm', { id });
        new __WEBPACK_IMPORTED_MODULE_5__form_Controller__["a" /* default */](__WEBPACK_IMPORTED_MODULE_0_underscore___default.a.extend({}, this.options, { id })).init();
    }

});

/***/ }),
/* 1278 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__views_Layout__ = __webpack_require__(1279);
/**
 * @module components/notes/list/Controller
 */







const log = __WEBPACK_IMPORTED_MODULE_3_debug___default()('lav:components/notes/list/Controller');

/**
 * Notes list controller.
 *
 * @class
 * @extends Marionette.Controller
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Application configs.
     *
     * @returns {Object}
     */
    get configs() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Configs', 'findConfigs');
    }

    /**
     * Fetch notes collection and render the sidebar view.
     *
     * @param {Object} options
     * @returns {Promise}
     */
    async init() {
        const opt = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({}, this.options.filterArgs, {
            perPage: this.configs.pagination
        });

        // Show a loader
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'showLoader', { region: 'sidebar' });

        // Fetch notes
        try {
            const collection = await __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Notes', 'find', opt);
            this.show(collection);
            this.listenToEvents();
        } catch (e) {
            log('Error', e);
        }
    }

    onDestroy() {
        log('destroy the controller');
        this.view.collection.removeEvents();
    }

    /**
     * Render the view.
     *
     * @fires components/notes#show:sidebar
     * @param {Object} collection
     */
    show(collection) {
        this.view = new __WEBPACK_IMPORTED_MODULE_4__views_Layout__["a" /* default */](__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({
            collection,
            configs: this.configs
        }, this.options));

        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'show', { region: 'sidebar', view: this.view });
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/navbar', 'show', this.options.filterArgs);
    }

    /**
     * Listen to various events.
     */
    listenToEvents() {
        this.view.collection.startListening();

        // Show note form on "c" keybinding
        this.listenTo(__WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('utils/Keybindings'), 'appCreateNote', this.navigateForm);

        // Show note form if add buttons in the navbar is clicked
        this.listenTo(__WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('components/navbar'), 'show:form', this.navigateForm);

        // Open a note on model:navigate event
        this.listenTo(this.view.collection.channel, 'model:navigate', __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.debounce(this.navigateModel, 420));

        // Destroy itself if the view is destroyed
        this.listenTo(this.view, 'destroy', this.destroy);
    }

    /**
     * Open a particular note.
     *
     * @param {Object} data
     * @param {Object} data.model - Backbone model
     */
    navigateModel(data) {
        const { model } = data;

        /**
         * Before navigating to a note, change URI.
         * It is done because if a user navigates back to the same page
         * a note might not appear at all.
         */
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'navigate', {
            trigger: false,
            filterArgs: this.options.filterArgs
        });

        // Navigate to the note page
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'navigate', {
            model,
            filterArgs: this.options.filterArgs
        });
    }

    /**
     * Show note form.
     */
    navigateForm() {
        log('navigate to form');
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'navigate', { url: 'notes/add' });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 1279 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__NotesView__ = __webpack_require__(1280);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__behaviors_Pagination__ = __webpack_require__(1283);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__behaviors_Sidebar__ = __webpack_require__(237);
/**
 * @module components/notes/list/views/Layout
 */








const log = __WEBPACK_IMPORTED_MODULE_2_debug___default()('lav:components/notes/list/views/Layout');

/**
 * Sidebar layout that shows a list of notes.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Layout extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1284);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * Behaviors.
     *
     * @see module:behaviors/Pagination
     * @see module:behaviors/Sidebar
     * @returns {Array}
     */
    behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_5__behaviors_Sidebar__["a" /* default */], __WEBPACK_IMPORTED_MODULE_4__behaviors_Pagination__["a" /* default */]];
    }

    /**
     * Regions.
     *
     * @returns {Object}
     */
    regions() {
        return {
            notes: '.list'
        };
    }

    /**
     * Show notes collection view.
     */
    onRender() {
        log('rendering notes collection view', this.options);
        this.showChildView('notes', new __WEBPACK_IMPORTED_MODULE_3__NotesView__["a" /* default */](this.options));
    }

    templateContext() {
        return {
            collection: this.collection
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Layout;


/***/ }),
/* 1280 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__NoteView__ = __webpack_require__(1281);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__behaviors_Navigate__ = __webpack_require__(236);
/**
 * @module components/notes/list/views/NotesView
 */





/**
 * Notes collection view.
 *
 * @class
 * @extends Marionette.CollectionView
 * @license MPL-2.0
 */
class NotesView extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.CollectionView {

  /**
   * Listen to keybindings used for navigating between items (j-k).
   *
   * @see module:behaviors/Navigate
   * @returns {Boolean} true
   */
  get useNavigateKeybindings() {
    return true;
  }

  /**
   * Component Radio channel.
   *
   * @prop {Object}
   */
  get channel() {
    return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/notes');
  }

  /**
   * Behaviors.
   *
   * @see module:behaviors/Navigate
   * @returns {Array}
   */
  behaviors() {
    return [__WEBPACK_IMPORTED_MODULE_3__behaviors_Navigate__["a" /* default */]];
  }

  /**
   * Child view.
   *
   * @see components/notes/list/views/NoteView
   * @returns {Object}
   */
  childView() {
    return __WEBPACK_IMPORTED_MODULE_2__NoteView__["a" /* default */];
  }

  /**
   * Child view options.
   *
   * @returns {Object}
   */
  childViewOptions() {
    return { filterArgs: this.options.filterArgs };
  }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = NotesView;


/***/ }),
/* 1281 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__behaviors_NavModel__ = __webpack_require__(420);
/**
 * @module components/notes/list/views/NoteView
 */






/**
 * Note item view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class NoteView extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1282);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * Behaviors.
     *
     * @see module:behaviors/NavModel
     * @returns {Array}
     */
    behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_3__behaviors_NavModel__["a" /* default */]];
    }

    ui() {
        return {
            favorite: '.favorite'
        };
    }

    events() {
        return {
            'click @ui.favorite': 'toggleFavorite'
        };
    }

    modelEvents() {
        return {
            change: 'render',
            'change:trash': 'remove'
        };
    }

    /**
     * Toggle favorite status of a note.
     *
     * @returns {Promise}
     */
    toggleFavorite() {
        this.model.toggleFavorite();
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Notes', 'saveModel', { model: this.model });
    }

    serializeData() {
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({}, this.model.attributes, {
            filterArgs: this.options.filterArgs
        });
    }

    templateContext() {
        return {
            // Return the first 50 characters of the content
            getContent() {
                return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.unescape(this.content).substring(0, 50);
            },

            getTags() {
                return this.tags;
            },

            // Return the link to a note
            link() {
                return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'getNoteLink', this);
            },

            // Return "active" string if the note is currently active (focused)
            isActive() {
                return this.filterArgs.id === this.id ? 'active' : '';
            }
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = NoteView;


/***/ }),
/* 1282 */
/***/ (function(module, exports) {

module.exports = "<a href=\"#{{ link() }}\" class=\"list--item -note list-group-item {{ isActive() }}\" id=\"note-{{ id }}\" data-id=\"{{ id }}\">\n    <h4 class=\"list-group-item-heading clearfix\">\n        <span class=\"list--item--title -note\">{= _.cleanXSS(title, false, true) }</span>\n        <span class=\"favorite list--item--favorite icon-star-empty <% if (isFavorite === 1) {%>icon-favorite<% } %>\"></span>\n    </h4>\n    \n    <p class=\"list--item--text\">\n        <!--{{ getContent() }}-->\n        <% _(getTags()).each(function(t) { %>\n        <span class=\"label label-default\">{{t}}</span>\n        <% }) %>\n    </p>\n\n</a>\n"

/***/ }),
/* 1283 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/**
 * @module behaviors/Pagination
 */



/**
 * Pagination behavior.
 *
 * @class
 * @extends Marionette.Behavior
 * @license MPL-2.0
 */
class Pagination extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Behavior {

    ui() {
        return {
            pageNav: '#pageNav',
            prevPage: '#prevPage',
            nextPage: '#nextPage'
        };
    }

    events() {
        return {
            'click @ui.nextPage': 'getNextPage',
            'click @ui.prevPage': 'getPreviousPage'
        };
    }

    collectionEvents() {
        return {
            reset: 'updatePaginationButtons'
        };
    }

    initialize() {
        this.options = this.view.options;
        this.collection = this.options.collection;

        this.listenTo(this.collection.channel, 'page:next', this.getNextPage);
        this.listenTo(this.collection.channel, 'page:previous', this.getPreviousPage);
    }

    /**
     * Update pagination buttons states (disabled) or hide them.
     */
    updatePaginationButtons() {
        this.ui.pageNav.toggleClass('hidden', this.collection.pagination.total === 0);
        this.ui.prevPage.toggleClass('disabled', !this.collection.hasPreviousPage());
        this.ui.nextPage.toggleClass('disabled', !this.collection.hasNextPage());
    }

    /**
     * Show models from the next page.
     */
    getNextPage() {
        if (this.collection.hasNextPage()) {
            this.navigatePage(1);
            this.collection.getNextPage();
        }
    }

    /**
     * Show models from the previous page.
     */
    getPreviousPage() {
        if (this.collection.hasPreviousPage()) {
            this.navigatePage(-1);
            this.collection.getPreviousPage();
        }
    }

    /**
     * Saves page status in window.location.
     *
     * @param {Number} number
     */
    navigatePage(number) {
        this.options.filterArgs.page = this.collection.pagination.current + number;

        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('utils/Url', 'navigate', {
            trigger: false,
            filterArgs: this.options.filterArgs
        });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Pagination;


/***/ }),
/* 1284 */
/***/ (function(module, exports) {

module.exports = "<!-- List of notes here -->\n<div class=\"list\"></div>\n\n<% if (collection.pagination.total > 0) { %>\n<nav class=\"navbar navbar-static-bottom navbar-bottom list--pager\" id=\"pageNav\">\n    <div class=\"btn-group btn-group-justified\" role=\"button\">\n        <div class=\"btn-group\">\n            <button class=\"list--pager--btn btn btn-default<% if(!collection.hasPreviousPage()) { %> disabled<% } %>\"\n                type=\"button\" id=\"prevPage\">\n                {{ _.i18n('Newer') }}\n            </button>\n        </div>\n        <div class=\"btn-group\">\n            <button class=\"list--pager--btn btn btn-default<% if(!collection.hasNextPage()) { %> disabled<% } %>\"\n                type=\"button\" id=\"nextPage\">\n                {{ _.i18n('Older') }}\n            </button>\n        </div>\n    </div>\n</nav>\n<% } %>\n"

/***/ }),
/* 1285 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__View__ = __webpack_require__(1286);
/**
 * @module components/notes/show/Controller
 */







const log = __WEBPACK_IMPORTED_MODULE_3_debug___default()('lav:components/notes/show/Controller');

/**
 * The controller shows an individual note.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Application configs.
     *
     * @returns {Object}
     */
    get configs() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Configs', 'findConfigs');
    }

    /**
     * Fetch the note and render the view.
     *
     * @returns {Promise}
     */
    async init() {
        log('options', this.options);

        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'showLoader', { region: 'content' });
        // console.log('notes/show/Controller.js options:')
        // console.log(this.options);
        try {
            const model = await this.fetch();
            this.show(model);
            this.listenToEvents();
        } catch (e) {
            log('error', e);
        }
    }

    onDestroy() {
        log('destroyed notes/show controller');
    }

    /**
     * Fetch the note model.
     *
     * @returns {Promise}
     */
    fetch() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Notes', 'findModel', __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({
            findAttachments: true
        }, this.options));
    }

    /**
     * Render the view.
     *
     * @param {Object} model
     */
    show(model) {
        this.view = new __WEBPACK_IMPORTED_MODULE_4__View__["a" /* default */]({
            model,
            configs: this.configs,
            filterArgs: this.options
        });

        // Render the view in "content" region
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'show', {
            region: 'content',
            view: this.view
        });

        // Set document title
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Title', 'set', { title: model.get('title') });
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.trigger('components/notes', 'model:active', { model });
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        this.listenTo(this.view, 'destroy', this.destroy);

        // Notes channel events
        const channel = __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('collections/Notes');
        this.listenTo(channel, 'destroy:model', this.onModelDestroy);
        this.listenTo(channel, `save:object:${this.options.id}`, this.onSaveObject);

        this.listenTo(this.view, 'toggle:task', this.toggleTask);
        this.listenTo(this.view, 'restore:model', this.restoreModel);
    }

    /**
     * Destroy itself if the model is removed.
     *
     * @param {Object} data
     * @param {Object} data.model - Backbone model
     */
    onModelDestroy(data) {
        if (this.view.model.id === data.model.id) {
            this.destroy();
        }
    }

    /**
     * After a model is synchronized, refresh the model again.
     *
     * @fires model#synced
     * @returns {Promise}
     */
    async onSaveObject() {
        let model;
        try {
            model = await this.fetch();
        } catch (e) {
            log('error', e);
            throw new Error('error', e);
        }

        this.view.model.htmlContent = model.htmlContent;
        this.view.model.set(model.attributes);
        this.view.model.trigger('synced');
    }

    /**
     * Toggle a task's status in content.
     *
     * @param {Object} data - Promise
     * @param {String} data.taskId
     */
    async toggleTask(data) {
        const { model } = this.view;
        const { taskId } = data;

        let mData;
        try {
            mData = await __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/markdown', 'toggleTask', {
                taskId,
                content: model.get('content')
            });
        } catch (e) {
            log('toggleTask() error:', e);
            throw new Error(e);
        }

        model.htmlContent = data.htmlContent;

        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Notes', 'saveModel', {
            model,
            data: __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.pick(mData, 'content', 'taskCompleted', 'taskAll')
        });
    }

    /**
     * Restore a model from trash.
     *
     * @returns {Promise}
     */
    restoreModel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Notes', 'restore', {
            model: this.view.model
        });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 1286 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_mousetrap__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_mousetrap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_mousetrap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__behaviors_Content__ = __webpack_require__(238);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_debug__);
/**
 * @module components/notes/show/View
 */









const log = __WEBPACK_IMPORTED_MODULE_5_debug___default()('lav:components/notes/show/View');

/**
 * Note view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1287);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'layout--body';
    }

    /**
     * Behaviors.
     *
     * @see module:behaviors/Content
     * @prop {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_4__behaviors_Content__["a" /* default */]];
    }

    ui() {
        return {
            favorite: '.btn--favorite--icon',
            body: '.-scroll',

            // Tasks
            tasks: '.task [type="checkbox"]',
            progress: '.progress-bar',
            percent: '.progress-percent',

            // Action buttons
            editBtn: '.note--edit',
            rmBtn: '.note--remove'
        };
    }

    events() {
        return {
            'click .note--share': 'showShare',
            'click .btn--favorite': 'toggleFavorite',
            'click @ui.tasks': 'toggleTask',
            'click @ui.rmBtn': 'triggerRemove'
        };
    }

    triggers() {
        return {
            'click .note--restore': 'restore:model'
        };
    }

    modelEvents() {
        return {
            synced: 'render',
            'change:trash': 'render',
            'change:isFavorite': 'onChangeFavorite',
            'change:taskCompleted': 'onTaskCompleted'
        };
    }

    constructor(...args) {
        super(...args);

        // Create debounced methods
        this.toggleTask = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.debounce(this.toggleTask, 200);
        this.toggleFavorite = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.throttle(this.toggleFavorite, 300, { leading: false });
    }

    onRender() {
        // Bind shortcuts
        __WEBPACK_IMPORTED_MODULE_2_mousetrap___default.a.bind('up', () => this.scrollTop());
        __WEBPACK_IMPORTED_MODULE_2_mousetrap___default.a.bind('down', () => this.scrollDown());
        __WEBPACK_IMPORTED_MODULE_2_mousetrap___default.a.bind(this.options.configs.actionsEdit, () => this.navigateEdit());
        __WEBPACK_IMPORTED_MODULE_2_mousetrap___default.a.bind(this.options.configs.actionsRemove, () => this.triggerRemove());
        __WEBPACK_IMPORTED_MODULE_2_mousetrap___default.a.bind(this.options.configs.actionsRotateStar, () => this.toggleFavorite());
    }

    onBeforeDestroy() {
        __WEBPACK_IMPORTED_MODULE_2_mousetrap___default.a.unbind(['up', 'down', this.options.configs.actionsEdit, this.options.configs.actionsRemove, this.options.configs.actionsRotateStar]);
    }

    /**
     * Show share modal window.
     */
    showShare() {
        __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.request('components/share', 'show', { model: this.model });
        return false;
    }

    /**
     * Toggle favorite status of a note.
     *
     * @returns {Promise}
     */
    toggleFavorite() {
        log('toggle favorite');
        this.model.toggleFavorite();
        return __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.request('collections/Notes', 'saveModel', { model: this.model });
    }

    /**
     * Toggle checked status of a task.
     *
     * @param {Object} e - event
     * @fires this#toggle:task
     */
    toggleTask(e) {
        log('toggle task');
        const $task = this.$(e.currentTarget);
        const taskId = Number($task.attr('data-task'));

        $task.blur();
        $task.prop('checked', $task.is(':checked') === false);
        this.trigger('toggle:task', { taskId });
        $task.prop('checked', !$task.is(':checked'));
    }

    /**
     * Change favorite icon.
     */
    onChangeFavorite() {
        this.ui.favorite.toggleClass('icon-favorite', this.model.get('isFavorite'));
    }

    /**
     * Update task progress bar after the status of a task is changed.
     */
    onTaskCompleted() {
        const { taskCompleted, taskAll } = this.model.attributes;
        const percent = Math.floor(taskCompleted * 100 / taskAll);

        this.ui.progress.css({ width: `${percent}%` });
        this.ui.percent.html(`${percent}%`);
    }

    /**
     * Scroll from bottom to top.
     */
    scrollTop() {
        this.ui.body.scrollTop(this.ui.body.scrollTop() - 50);
        return false;
    }

    /**
     * Scroll from top to bottom.
     */
    scrollDown() {
        this.ui.body.scrollTop(this.ui.body.scrollTop() + 50);
        return false;
    }

    /**
     * Navigate to edit page.
     */
    navigateEdit() {
        __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.request('utils/Url', 'navigate', { url: this.ui.editBtn.attr('href') });
        return false;
    }

    /**
     * Trigger remove event.
     *
     * @fires components/notes#remove
     */
    triggerRemove() {
        __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.request('components/notes', 'remove', { model: this.model });
        return false;
    }

    serializeData() {
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({}, this.model.attributes, {
            cloudStorage: __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.request('collections/Configs', 'findConfig', {
                name: 'cloudStorage'
            }),
            content: this.model.htmlContent || this.model.get('content'),
            notebook: (this.model.get('notebook') || {}).attributes,
            username: __WEBPACK_IMPORTED_MODULE_3_backbone_radio___default.a.request('collections/Profiles', 'getProfile')
        });
    }

    templateContext() {
        return {
            createdDate() {
                return new Date(this.created).toLocaleDateString();
            },

            getProgress() {
                return Math.floor(this.taskCompleted * 100 / this.taskAll);
            }
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1287 */
/***/ (function(module, exports) {

module.exports = "<nav class=\"layout--navbar header navbar navbar-static-top -note\">\n<div class=\"container-fluid\">\n    <div class=\"navbar-left header--left navbar-btn\">\n        <button title=\"{{_.i18n('Show sidebar')}}\" id=\"show--sidebar\" class=\"btn -note btn-default visible-xs\">\n            <span class=\"icon-left-open\"></span>\n        </button>\n    </div>\n\n    <div class=\"navbar-right header--right navbar-btn dropdown\">\n        <% if (cloudStorage === 'p2p') { %>\n            <% if (sharedBy === username) { %>\n        <!--\n            <a class=\"btn -note btn-default note--share\" href=\"#\">\n            <span class=\"icon-share\"></span>\n            {{_.i18n('Share')}}\n        </a>\n        -->\n            <% } else { %>\n        <a class=\"btn -note btn-default\" href=\"#\" title=\"{{_.i18n('Shared by')}} {{sharedBy}}\">\n            <span class=\"icon-share\"></span>\n            {{sharedBy}}\n        </a>\n            <% } %>\n        <% } %>\n\n        <a href=\"#notes/edit/{{id}}\" class=\"btn -note btn-default note--edit\">\n            <span class=\"icon-pencil\"></span>\n            <span class=\"hidden-xs\">{{_.i18n('Edit')}}</span>\n        </a>\n        <a href=\"#\" class=\"btn -note btn-default note--remove\">\n            <span class=\"icon-trashed\"></span>\n            <span class=\"hidden-xs\"><% if (trash === 0) { %>{{_.i18n('Delete')}}<% } else { %> {{_.i18n('Forever')}}<% } %></span>\n        </a>\n        <% if (trash !== 1) { %>\n        <a href=\"#settings\" class=\"btn -note btn-default\">\n            <span class=\"icon-cog\"></span>\n            <span>{{_.i18n('Settings')}}</span>\n        </a>\n        <% } else { %>\n        <a href=\"#\" class=\"btn -note btn-default\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            <b class=\"caret\"></b>\n        </a>\n        <div class=\"dropdown-menu\">\n            <div class=\"btn-group\">\n                <a href=\"#\" class=\"note--restore btn\">\n                    <span class=\"icon-undo icon--block\"></span>\n                    {{_.i18n('Restore')}}\n                </a>\n                <a href=\"#settings\" class=\"btn\">\n                    <span class=\"icon-cog icon--block\"></span>\n                    {{_.i18n('Settings')}}\n                </a>\n            </div>\n        </div>\n        <% } %>\n        <a href=\"/\" class=\"btn -note btn-default logout\">\n            <span>{{_.i18n('Logout')}}</span>\n        </a>\n    </div>\n</div>\n</nav>\n\n<div class=\"layout--body -scroll -note\">\n    <div class=\"content container-fluid -note\" data-id=\"{{id}}\">\n        <header>\n            <h1 class=\"page-header -note\">\n                {=_.cleanXSS(title)}\n                <small class=\"note--date\">{{createdDate()}}</small>\n                <button type=\"button\" class=\"btn btn-link btn--favorite pull-right\">\n                    <span class=\"btn--favorite--icon icon-star-empty <% if (isFavorite === 1) {%>icon-favorite<% } %>\"></span>\n                </button>\n            </h1>\n        </header>\n\n        <% if (taskAll !== 0) { %>\n        <div class=\"progress\">\n            <div class=\"progress-bar progress-bar-info\" role=\"progressbar\"\n                aria-valuenow=\"{{taskCompleted}}\" aria-valuemin=\"0\" aria-valuemax=\"{{taskAll}}\" style=\"width: {{getProgress(taskCompleted, taskAll)}}%\">\n                <span class=\"progress-percent\">\n                    {{getProgress()}}%\n                </span>\n            </div>\n        </div>\n        <% } %>\n\n        <p class=\"note--notebook\">\n            <% if (notebook && notebook.id) { %>\n            <a href=\"#notes/f/notebook/q/{{notebook.id}}\">\n                <i class=\"icon-notebook\"></i> {=_.cleanXSS(notebook.name)}\n            </a>\n            <% } %>\n        </p>\n\n        <div class=\"note--content\">\n            {=content}\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 1288 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__views_Form__ = __webpack_require__(1289);
/**
 * @module components/notes/form/Controller
 */







const log = __WEBPACK_IMPORTED_MODULE_3_debug___default()('lav:components/notes/form/Controller');

/**
 * Notes form controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    get configs() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Configs', 'findConfigs');
    }

    get notesChannel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('collections/Notes');
    }

    /**
     * Ignore these values when checking if a note's changed.
     *
     * @prop {Array}
     */
    get ignoreKeys() {
        return ['created', 'updated', 'encryptedData'];
    }

    /**
     * Fetch data and show the form.
     *
     * @returns {Promise}
     */
    async init() {
        try {
            await this.fetch();
            this.show();
            this.listenToEvents();
        } catch (e) {
            log('error', e);
        }
    }

    onDestroy() {
        log('destroyed');
    }

    /**
     * Fetch the note and notebooks.
     *
     * @returns {Promise}
     */
    async fetch() {
        this.model = await this.notesChannel.request('findModel', __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.extend({
            findAttachments: !__WEBPACK_IMPORTED_MODULE_2_underscore___default.a.isNull(this.options.id)
        }, this.options));

        this.notebooks = await __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Notebooks', 'find');
        return this.model;
    }

    /**
     * Show the view.
     */
    show() {
        // Saves data before you change anything, in case you cancel editing
        this.dataBeforeChange = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.omit(this.model.attributes, this.ignoreKeys);

        // Instantiate the view
        this.view = new __WEBPACK_IMPORTED_MODULE_4__views_Form__["a" /* default */]({
            model: this.model,
            notebooks: this.notebooks,
            notebookId: this.getNotebookId(),
            filtersArgs: this.options,
            configs: this.configs
        });

        // Render the view
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'show', {
            region: 'content',
            view: this.view
        });
        this.view.triggerMethod('after:render');

        // Set document title
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('utils/Title', 'set', { title: this.model.get('title') });
    }

    /**
     * Return notebook ID to which the note should be attached to.
     *
     * @returns {String} notebook Id
     */
    getNotebookId() {
        let notebookId = this.model.get('notebookId');

        /*
         * If the current note doesn't have a notebook attached,
         * try to use one from the filter if it specifies a notebook.
         */
        if (notebookId === '0' && this.options.filter === 'notebook') {
            notebookId = this.options.query;
        }

        return notebookId;
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        this.listenTo(this.view, 'destroy', this.destroy);
        this.listenTo(this.view, 'save', this.save);
        this.listenTo(this.view, 'cancel', this.checkChanges);

        this.listenTo(this.notesChannel, `save:object:${this.options.id}`, this.onSaveObject);
    }

    /**
     * Save the model.
     *
     * @param {Object} options
     * @param {Object} (options.autoSave) - true if "save" event is
     * triggered from autoSave method
     * @returns {Promise}
     */
    async save(options = {}) {
        let data = await this.getData();
        data = this.checkTitle(data);
        //        data.content = data.content.replace('&amp;', '&amp;amp;');

        if (data.hasOwnProperty('content')) {
            data.content = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.escape(data.content);
        }

        try {
            await this.notesChannel.request('saveModel', {
                data,
                saveTags: options.autoSave !== true,
                model: this.view.model
            });
        } catch (e) {
            log('save error:', e);
            throw new Error(e);
        }

        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.trigger('components/notes', 'save:model', { model: this.view.model });

        // Redirect to the previous page if isn't auto save
        if (options.autoSave !== true) {
            return this.redirect(false);
        }
    }

    /**
     * Return updated data.
     *
     * @returns {Promise} resolves with an object
     */
    async getData() {
        const notebookId = this.view.getChildView('notebooks').ui.notebookId.val().trim();

        let data = await __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/editor', 'getData');
        data.content = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.escape(data.content);
        data = this.checkTitle(data);
        return __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.extend({}, data, {
            notebookId,
            title: this.view.ui.title.val().trim()
        });
    }

    /**
     * Check if data contains title. If it doesnt, use "Untitled" as a title.
     *
     * @param {Object} data
     * @returns {Object}
     */
    checkTitle(data) {
        if (data.title === '') {
            data.title = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.i18n('Untitled'); // eslint-disable-line
        }

        // Set a new document title
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('utils/Title', 'set', { title: data.title });
        return data;
    }

    /**
     * Check if there are any new changes. If there are, ask the user if
     * they want to cancel those changes.
     *
     * @returns {Promise}
     */
    async checkChanges() {
        const res = await this.getData();
        this.model.setEscape(res);
        const data = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.omit(this.model.attributes, this.ignoreKeys);

        // There aren't any changes
        if (__WEBPACK_IMPORTED_MODULE_2_underscore___default.a.isEqual(this.dataBeforeChange, data)) {
            return this.redirect(false);
        }

        return this.showCancelConfirm();
    }

    /**
     * After a model is synchronized, refresh the model again.
     *
     * @fires model#synced
     * @returns {Promise}
     */
    async onSaveObject() {
        let model;
        try {
            model = await this.fetch();
        } catch (e) {
            log('error', e);
            throw new Error(e);
        }

        this.view.model.htmlContent = model.htmlContent;
        this.view.model.set(model.attributes);
        this.view.model.trigger('synced');
    }

    /**
     * Show a confirmation dialog asking a user if it is alright to
     * lose all changes.
     *
     * @returns {Promise}
     */
    async showCancelConfirm() {
        const res = await __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/confirm', 'show', {
            content: __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.i18n('You have unsaved changes')
        });

        if (res === 'confirm') {
            return this.redirect();
        }

        return this.onRejectCancel();
    }

    /**
     * Redirect to the previous page.
     *
     * @param {Boolean} preRedirect = true - false if the note should not
     * be removed or restored to the original state before redirecting
     * @returns {Promise}
     */
    async redirect(preRedirect = true) {
        await (preRedirect ? this.preRedirect() : Promise.resolve());
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('utils/Url', 'navigateBack');
        this.view.destroy();
    }

    /**
     * Delete the new note model or restore the original state
     * of the existing note.
     *
     * @returns {Promise}
     */
    preRedirect() {
        // Delete the new note model
        if (__WEBPACK_IMPORTED_MODULE_2_underscore___default.a.isUndefined(this.options.id) || __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.isNull(this.options.id)) {
            this.model.set({ title: 'Untitled' });
            return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/notes', 'remove', {
                model: this.model,
                force: true
            });
        }

        // Restore the original state of the note.
        return this.notesChannel.request('saveModel', {
            model: this.model,
            data: this.dataBeforeChange
        });
    }

    /**
     * User changed their minds about canceling all changes.
     */
    onRejectCancel() {
        // Enable auto save again
        this.view.options.isClosed = false;
        this.view.trigger('bind:keys');

        // Bring back the focus to the last active form element
        if (this.view.options.focus !== 'editor') {
            return this.view.ui[this.view.options.focus].focus();
        }

        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.trigger('components/editor', 'focus');
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 1289 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_mousetrap__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_mousetrap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_mousetrap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_mousetrap_plugins_global_bind_mousetrap_global_bind__ = __webpack_require__(1290);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_mousetrap_plugins_global_bind_mousetrap_global_bind___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_mousetrap_plugins_global_bind_mousetrap_global_bind__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__behaviors_Content__ = __webpack_require__(238);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Notebooks__ = __webpack_require__(1291);
/**
 * @module components/notes/form/views/Form
 */












const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:components/notes/form/views/Form');

/**
 * Note form view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Form extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1295);
        return __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'layout--body';
    }

    /**
     * Behaviors.
     *
     * @see module:behaviors/Content
     * @returns {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_7__behaviors_Content__["a" /* default */]];
    }

    /**
     * Radio channel.
     * components/notes/form
     *
     * @returns {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/notes/form');
    }

    /**
     * Regions (editor, notebooks.)
     *
     * @returns {Object}
     */
    regions() {
        return {
            editor: '#editor',
            notebooks: '#editor--notebooks'
        };
    }

    ui() {
        return {
            form: '.editor--form',
            saveBtn: '.editor--save',
            title: '#editor--input--title',
            words: '#editor--footer--words',
            chars: '#editor--footer--chars'
        };
    }

    events() {
        return {
            'click .editor--mode a': 'switchMode',
            'submit @ui.form': 'save',
            'click @ui.saveBtn': 'save',
            'click .editor--cancel': 'cancel',
            'change @ui.title': 'setTitle'
        };
    }

    modelEvents() {
        return {
            'change:title': 'onChangeTitle',
            'update:stats': 'showStats'
        };
    }

    /**
     * Initialize.
     *
     * @listens this.channel#getModel returns the model (request)
     * @listens this.channel#showChildView shows a view in a region (request)
     * @listens this.channel#save:auto calls autoSave method
     */
    initialize() {
        this.$body = __WEBPACK_IMPORTED_MODULE_3_jquery___default()('body');

        // Reply to requests
        this.channel.reply({
            getModel: this.model,
            showChildView: this.showChildView
        }, this);

        // Listen to events
        this.listenTo(this.channel, 'save:auto', this.autoSave);
        this.listenTo(this, 'bind:keys', this.bindKeys);

        // Unbind keyboard shortcuts if a modal window is shown
        this.listenTo(__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('views/Modal'), 'shown', this.unbindKeys);
        this.listenTo(__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('views/Modal'), 'hidden', this.bindKeys);

        this.bindKeys();
    }

    /**
     * Bind keyboard shortcuts.
     */
    bindKeys() {
        __WEBPACK_IMPORTED_MODULE_5_mousetrap___default.a.bindGlobal(['ctrl+s', 'command+s'], e => this.save(e));
        __WEBPACK_IMPORTED_MODULE_5_mousetrap___default.a.bindGlobal(['esc'], e => this.cancel(e));
    }

    /**
     * Unbind keyboard shortcuts.
     */
    unbindKeys() {
        __WEBPACK_IMPORTED_MODULE_5_mousetrap___default.a.unbind(['ctrl+s', 'command+s', 'esc']);
    }

    /**
     * Show notebooks selector.
     */
    onRender() {
        const opt = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.extend({}, __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.omit(this.options, 'model'), {
            collection: this.options.notebooks
        });
        this.showChildView('notebooks', new __WEBPACK_IMPORTED_MODULE_8__Notebooks__["a" /* default */](opt));
    }

    /**
     * The view was rendered.
     *
     * @fires this.channel#ready
     */
    onAfterRender() {
        this.channel.trigger('ready', { model: this.model });

        // Focus on the title
        this.ui.title.trigger('focus');

        // Change edit mode
        if (this.options.configs.editMode !== 'normal') {
            this.switchMode(this.options.configs.editMode);
        }

        this.showStats();
    }

    /**
     * Show text stats, including a number of words, characters.
     *
     * @param {Object} data
     * @param {String} data.content
     */
    showStats(data = {}) {
        const text = data.content || this.model.get('content');
        this.ui.words.text(__WEBPACK_IMPORTED_MODULE_2_underscore___default.a.countWords(text));
        this.ui.chars.text(text.length);
    }

    /**
     * Trigger an event that the view is about to be destroyed.
     *
     * @fires this.channel#before:destroy
     */
    onBeforeDestroy() {
        this.normalMode();
        this.channel.trigger('before:destroy');
    }

    /**
     * Stop replying to requests and unbind Mousetrap keys.
     */
    onDestroy() {
        this.channel.stopReplying();
        this.unbindKeys();
    }

    /**
     * Save the note and redirect back.
     *
     * @fires this#save
     */
    save(e = {}) {
        if (e.preventDefault) {
            e.preventDefault();
        }

        this.options.isClosed = true;
        this.trigger('save');
    }

    /**
     * Automatically save the changes.
     *
     * @fires this#save
     */
    autoSave() {
        // If the form is closed, don't do anything
        if (this.options.isClosed) {
            return;
        }

        log('auto save...');
        this.trigger('save', { autoSave: true });
    }

    /**
     * Cancel all changes.
     *
     * @fires this#cancel
     */
    cancel() {
        // Save which form element was under focus
        this.options.focus = this.ui.title.is(':focus') ? 'title' : 'editor';
        this.options.isClosed = true;

        this.trigger('cancel');
        return false;
    }

    /**
     * Update "title" attribute after every change.
     */
    setTitle() {
        this.model.set('title', this.ui.title.val().trim());
    }

    /**
     * Update the title value after the attribute is changed.
     */
    onChangeTitle() {
        this.ui.title.val(__WEBPACK_IMPORTED_MODULE_2_underscore___default.a.cleanXSS(this.model.get('title')));
    }

    /**
     * Switch the editor mode.
     *
     * @param {(String|Object)} e
     */
    switchMode(e) {
        const mode = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.isString(e) ? e : this.$(e.currentTarget).attr('data-mode');

        if (!mode) {
            return;
        }

        // Close the dropdown menu
        this.ui.form.trigger('click');

        // Switch to another mode
        this[`${mode}Mode`]();

        // Trigger an event that the editor mode has changed
        this.channel.trigger('change:mode', { mode });

        // Save in configs
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Configs', 'saveConfig', {
            config: { name: 'editMode', value: mode }
        });

        return false;
    }

    /**
     * Fullscreen mode.
     */
    fullscreenMode() {
        this.$body.removeClass('-preview').addClass('editor--fullscreen');
    }

    /**
     * Preview mode (two panes)
     */
    previewMode() {
        this.$body.addClass('editor--fullscreen -preview');
    }

    /**
     * Normal mode (the sidebar with notes is shown on the left side)
     */
    normalMode() {
        this.$body.removeClass('editor--fullscreen -preview');
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Form;


/***/ }),
/* 1290 */
/***/ (function(module, exports) {

/**
 * adds a bindGlobal method to Mousetrap that allows you to
 * bind specific keyboard shortcuts that will still work
 * inside a text input field
 *
 * usage:
 * Mousetrap.bindGlobal('ctrl+s', _saveChanges);
 */
/* global Mousetrap:true */
(function(Mousetrap) {
    var _globalCallbacks = {};
    var _originalStopCallback = Mousetrap.prototype.stopCallback;

    Mousetrap.prototype.stopCallback = function(e, element, combo, sequence) {
        var self = this;

        if (self.paused) {
            return true;
        }

        if (_globalCallbacks[combo] || _globalCallbacks[sequence]) {
            return false;
        }

        return _originalStopCallback.call(self, e, element, combo);
    };

    Mousetrap.prototype.bindGlobal = function(keys, callback, action) {
        var self = this;
        self.bind(keys, callback, action);

        if (keys instanceof Array) {
            for (var i = 0; i < keys.length; i++) {
                _globalCallbacks[keys[i]] = true;
            }
            return;
        }

        _globalCallbacks[keys] = true;
    };

    Mousetrap.init();
}) (Mousetrap);


/***/ }),
/* 1291 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__NotebooksCollection__ = __webpack_require__(1292);
/**
 * @module components/notes/form/views/Notebooks
 */






/**
 * Notebooks selector view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Notebooks extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1294);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    regions() {
        return {
            list: {
                el: '.editor--notebooks--select',
                replaceElement: true
            }
        };
    }

    ui() {
        return {
            notebookId: '[name="notebookId"]'
        };
    }

    events() {
        return {
            'change @ui.notebookId': 'addNotebook'
        };
    }

    /**
     * Render the collection view.
     */
    onRender() {
        this.showChildView('list', new __WEBPACK_IMPORTED_MODULE_3__NotebooksCollection__["a" /* default */](this.options));
        this.selectModel({ id: this.options.notebookId });
    }

    /**
     * Select the model.
     *
     * @param {Object} model - notebook model
     */
    selectModel(model) {
        this.ui.notebookId.val(model.id);
    }

    /**
     * Add a new notebook.
     *
     * @returns {Promise}
     */
    addNotebook() {
        // Add a new notebook only if add notebook option is selected
        if (!this.ui.notebookId.find('.addNotebook').is(':selected')) {
            return;
        }

        this.ui.notebookId.val(this.options.notebookId);
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/notebooks', 'notebookForm', {
            profileId: this.collection.profileId
        }).then(data => {
            if (data.model) {
                this.selectModel(data.model);
            }
        });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Notebooks;


/***/ }),
/* 1292 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Notebook__ = __webpack_require__(1293);
/**
 * @module components/notes/form/views/NotebooksCollection
 */




/**
 * Notebooks collection view.
 *
 * @class
 * @extends Marionette.CollectionView
 * @license MPL-2.0
 */
class NotebooksCollection extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.CollectionView {

    get tagName() {
        return 'optgroup';
    }

    get className() {
        return 'editor--notebooks--select';
    }

    /**
     * Child view.
     *
     * @see modules:components/notes/form/views/Notebook
     * @returns {Object}
     */
    childView() {
        return __WEBPACK_IMPORTED_MODULE_2__Notebook__["a" /* default */];
    }

    onRender() {
        this.$el.attr('label', __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n('Notebooks'));
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = NotebooksCollection;


/***/ }),
/* 1293 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/notes/form/views/Notebook
 */



/**
 * Notebook item view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Notebook extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template('{=_.cleanXSS(name)}');
    }

    get tagName() {
        return 'option';
    }

    onRender() {
        this.$el.attr('value', this.model.get('id'));
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Notebook;


/***/ }),
/* 1294 */
/***/ (function(module, exports) {

module.exports = "<div class=\"editor--notebooks\">\n    <select class=\"icons form-control editor--notebooks--list\" name=\"notebookId\">\n        <optgroup label=\"{{_.i18n('Action')}}\">\n            <option class=\"addNotebook\" value=\"\">\n                {{_.i18n('notebooks.add')}}\n            </option>\n\n            <option value=\"0\">\n                {{_.i18n('Select notebook')}}\n            </option>\n        </optgroup>\n\n        <optgroup label=\"{{_.i18n('Notebooks')}}\" class=\"editor--notebooks--select\">\n        </optgroup>\n    </select>\n</div>\n"

/***/ }),
/* 1295 */
/***/ (function(module, exports) {

module.exports = "<nav class=\"layout--navbar navbar navbar-default navbar-static-top header -form\">\n<div class=\"container-fluid\">\n    <div class=\"navbar-left header--left navbar-form\">\n        <div id=\"editor--notebooks\"></div>\n    </div>\n\n    <ul class=\"nav navbar-nav navbar-right header--right\">\n        <li class=\"dropdown\">\n            <button type=\"button\" title=\"Mode\" class=\"btn header--btn btn-default\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <i class=\"icon-fullscreen\"></i> <b class=\"caret hidden-xs\"></b>\n            </button>\n            <ul class=\"editor--mode dropdown-menu dropdown-menu-left\" role=\"menu\">\n                <li>\n                    <a href=\"#\" data-mode=\"fullscreen\">\n                        <i class=\"icon-fullscreen\"></i> {{ _.i18n('Full screen') }}\n                    </a>\n                </li>\n                <li>\n                    <a href=\"#\" data-mode=\"preview\">\n                        <i class=\"icon-eye\"></i> {{ _.i18n('Preview') }}\n                    </a>\n                </li>\n                <li>\n                    <a href=\"#\" data-mode=\"normal\">\n                        <i class=\"icon-squares\"></i> {{ _.i18n('Normal') }}\n                    </a>\n                </li>\n            </ul>\n        </li>\n        <li>\n            <button class=\"editor--cancel btn header--btn btn-default \">\n                <i class=\"icon-block\"></i>\n                <span class=\"hidden-xs\">{{ _.i18n('Cancel') }}<span>\n            </button>\n        </li>\n        <li>\n            <button class=\"editor--save btn header--btn btn-success \">\n                <i class=\"icon-save\"></i>\n                <span class=\"hidden-xs\">{{ _.i18n('Save') }}</span>\n            </button>\n        </li>\n    </ul>\n</div>\n</nav>\n\n<div class=\"layout--body -scroll -form\">\n    <div class=\"container-fluid editor--container\">\n        <form class=\"editor--form form-horizontal col-xs-12\" action=\"#\" method=\"post\">\n            <div class=\"form-group\">\n                <input id=\"editor--input--title\" class=\"form-control -borderless\" name=\"title\"\n                    type=\"text\" value=\"{=_.cleanXSS(title, true)}\" placeholder=\"{{ _.i18n('Title') }}\" spellcheck=\"true\" />\n            </div>\n        </form>\n    </div>\n    <div id=\"editor\" class=\"layout--body editor--container\"></div>\n    <footer id=\"editor--footer\">\n        <span id=\"editor--footer--lines\" class=\"pull-left\"></span>\n        <div class=\"pull-right\">\n            {{_.i18n('Words')}}: <span id=\"editor--footer--words\"></span>,\n            {{_.i18n('Characters')}}: <span id=\"editor--footer--chars\"></span>\n        </div>\n    </footer>\n</div>\n"

/***/ }),
/* 1296 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/notes/remove/Controller
 */



/**
 * Controller that handles removal of a note.
 *
 * @class
 * @license MPL-2.0
 */
class Controller {

    /**
     * Radio channel.
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.channel('components/notes');
    }

    /**
     * Confirm messages.
     *
     * @returns {Object}
     */
    get labels() {
        return {
            trash: 'notes.confirm trash',
            remove: 'notes.confirm remove'
        };
    }

    constructor() {
        this.channel.reply('remove', this.remove, this);
    }

    /**
     * Remove a note.
     *
     * @param {Object} options
     * @param {Object} (options.model) - note model
     * @param {String} (options.id) - note ID
     * @returns {Promise}
     */
    remove(options) {
        if (options.model) {
            return this.removeModel(options);
        } else if (options.id) {
            return this.removeById(options);
        } else {
            return Promise.reject('Provide either ID or model.');
        }
    }

    /**
     * Remove a note by its ID.
     *
     * @param {Object} options
     * @param {String} options.id
     * @returns {Promise}
     */
    async removeById(options) {
        const model = await __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('collections/Notes', 'findModel', options);
        return this.removeModel(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({ model }, options));
    }

    /**
     * Remove a note model from the database.
     *
     * @param {Object} options
     * @param {Object} options.model
     * @param {Boolean} (options.force) - remove a note without showing
     * a confirmation dialog
     * @returns {Promise}
     */
    async removeModel(options) {
        const { model } = options;

        const res = await (options.force ? 'confirm' : this.showConfirm(model));
        if (res !== 'confirm') {
            return;
        }

        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('collections/Notes', 'remove', { model });
    }

    /**
     * Show a confirmation dialog asking if a user is sure
     * they want to remove a note.
     *
     * @param {Object} model
     * @returns {Promise}
     */
    showConfirm(model) {
        const label = Number(model.get('trash')) === 0 ? 'trash' : 'remove';

        return __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('components/confirm', 'show', {
            content: __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n(this.labels[label], model.attributes)
        });
    }

}
/* unused harmony export default */


// Instantiate the controller immediately after the app starts
__WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.once('App', 'start', () => new Controller());

/***/ }),
/* 1297 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__controller__ = __webpack_require__(1298);
/**
 * @module components/notebooks/Router
 */





/**
 * Notebooks router.
 *
 * @class
 * @extends Marionette.AppRouter
 * @license MPL-2.0
 */
class Router extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.AppRouter {

    /**
     * Controller.
     *
     * @see module:components/Notebooks/controller
     * @returns {Object}
     */
    get controller() {
        return __WEBPACK_IMPORTED_MODULE_2__controller__["a" /* default */];
    }

    /**
     * appRoutes.
     *
     * @returns {Object}
     */
    get appRoutes() {
        return {
            notebooks: 'showList',
            'notebooks/add': 'notebookForm',
            'notebooks/edit/:id': 'notebookForm',
            'tags/add': 'tagForm',
            'tags/edit/:id': 'tagForm'
        };
    }

}
/* unused harmony export default */


__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.once('App', 'init', () => {
    // Instantiate the router
    new Router();

    // Start replying to "notebookForm" request
    __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.reply('components/notebooks', 'notebookForm', opt => {
        return __WEBPACK_IMPORTED_MODULE_2__controller__["a" /* default */].notebookFormReply(opt);
    });

    // Start replying to "tagForm" request
    __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.reply('components/notebooks', 'tagForm', opt => {
        return __WEBPACK_IMPORTED_MODULE_2__controller__["a" /* default */].tagFormReply(opt);
    });
});

/***/ }),
/* 1298 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__list_Controller__ = __webpack_require__(1299);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__form_notebook_Controller__ = __webpack_require__(1308);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__form_tag_Controller__ = __webpack_require__(1311);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__remove_Controller__ = __webpack_require__(1314);
/**
 * @module components/notebooks/controller
 * @license MPL-2.0
 */

// import Radio from 'backbone.radio';






const log = __WEBPACK_IMPORTED_MODULE_0_debug___default()('lav:components/notebooks/controller');

/* harmony default export */ __webpack_exports__["a"] = ({

    /**
     * Show a list of notebooks and tags.
     */
    showList() {
        log('showList');
        return new __WEBPACK_IMPORTED_MODULE_1__list_Controller__["a" /* default */]().init();
    },

    /**
     * Show notebook form.
     *
     * @param {String} [id] - ID of a notebook
     * @param {Object} [promise] - the promise will be resolved once
     * a new notebook is created
     */
    notebookForm(id, promise) {
        log('notebookForm', { id });
        return new __WEBPACK_IMPORTED_MODULE_2__form_notebook_Controller__["a" /* default */]({ id, promise }).init();
    },

    /**
     * The method is called once notebookForm request is made.
     *
     * @param {Object} options
     * @returns {Promise} resolved once a new notebook is created
     */
    notebookFormReply(options) {
        return new Promise((resolve, reject) => {
            this.notebookForm(options.id, { resolve, reject });
        });
    },

    /**
     * Tag form.
     *
     * @param {String} [id]
     */
    tagForm(id) {
        log('tagForm', { id });
        return new __WEBPACK_IMPORTED_MODULE_3__form_tag_Controller__["a" /* default */]({ id }).init();
    },

    /**
     * The method is called once notebookForm request is made.
     *
     * @param {Object} options
     * @returns {Promise} resolved once a new notebook is created
     */
    tagFormReply(options) {
        this.tagForm(options.id);
    }
});

/***/ }),
/* 1299 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__views_Layout__ = __webpack_require__(1300);
/**
 * @module components/notebooks/Controller
 */







const log = __WEBPACK_IMPORTED_MODULE_3_debug___default()('lav:components/notebooks/list/Controller');

/**
 * Notebooks list controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * App configs.
     *
     * @returns {Object}
     */
    get configs() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Configs', 'findConfigs');
    }

    onDestroy() {
        this.view.options.notebooks.removeEvents();
        this.view.options.tags.removeEvents();
        log('destroyed');
    }

    /**
     * Fetch data and render the view.
     *
     * @returns {Promise}
     */
    init() {
        // Show a loader
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'showLoader', { region: 'sidebar' });

        return this.fetch().then(results => this.show(results[0], results[1])).then(() => this.listenToEvents()).catch(err => log('error', err));
    }

    /**
     * Fetch all notebooks and tags.
     *
     * @returns {Promise}
     */
    fetch() {
        const opt = { conditions: { trash: 0 } };
        return Promise.all([__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Notebooks', 'find', opt), __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Tags', 'find', opt)]);
    }

    /**
     * Render the view.
     *
     * @param {Object} notebooks
     * @param {Object} tags
     */
    show(notebooks, tags) {
        this.view = new __WEBPACK_IMPORTED_MODULE_4__views_Layout__["a" /* default */]({
            notebooks,
            tags,
            configs: this.configs
        });

        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'empty', { region: 'content' });
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'show', { region: 'sidebar', view: this.view });
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/navbar', 'show', { section: __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.i18n('Notebooks & tags') });
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        // Start listening to collection events
        this.view.options.notebooks.startListening();
        this.view.options.tags.startListening();

        // Show notebook form on "c" keybinding
        this.listenTo(__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('utils/Keybindings'), 'appCreateNote', this.onCreateKeybinding);

        // Show notebook form if add button in the navbar is clicked
        this.listenTo(__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/navbar'), 'show:form', this.navigateForm);

        // Destroy itself if the view is destroyed
        this.listenTo(this.view, 'destroy', this.destroy);
    }

    /**
     * Create keybinding is pressed.
     * Show notebook/tag form depending on what region is active at the moment.
     */
    onCreateKeybinding() {
        this.navigateForm({ url: `/${this.view.activeRegion}/add` });
    }

    /**
     * Show notebook/tag form.
     *
     * @param {Object} data = {}
     * @param {String} (data.url) - URL that leads to the form page.
     * It will use notebook form if the parameter wasn't provided.
     */
    navigateForm(data = {}) {
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('utils/Url', 'navigate', { url: data.url || '/notebooks/add' });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 1300 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_mousetrap__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_mousetrap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_mousetrap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Notebooks__ = __webpack_require__(1301);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Tags__ = __webpack_require__(1304);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__behaviors_Sidebar__ = __webpack_require__(237);
/**
 * @module components/notebooks/list/views/Layout
 */









/**
 * Notebooks list layout view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Layout extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1307);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * Behaviors.
     *
     * @see module:behaviors/Sidebar
     * @returns {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_6__behaviors_Sidebar__["a" /* default */]];
    }

    /**
     * Do nothing on swipeleft event.
     *
     * @prop {Boolean} true
     */
    get noSwipeLeft() {
        return true;
    }

    /**
     * An array of keybinding names used in this view.
     *
     * @returns {Array}
     */
    get keybindings() {
        return ['actionsOpen', 'actionsEdit', 'actionsRemove', 'navigateBottom', 'navigateTop'];
    }

    /**
     * Regions.
     *
     * @returns {Object} - notebooks, tags
     */
    regions() {
        return {
            notebooks: '#notebooks',
            tags: '#tags'
        };
    }

    constructor(...args) {
        super(...args);

        /**
         * Currently active region (notebooks for default).
         *
         * @prop {String}
         */
        this.activeRegion = this.options.notebooks.length ? 'notebooks' : 'tags';

        // Listen to collection events
        this.listenTo(this.options.notebooks.channel, 'page:end', this.switchToTags);
        this.listenTo(this.options.tags.channel, 'page:start', this.switchToNotebooks);
    }

    onDestroy() {
        const keys = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.pick(this.options.configs, this.keybindings);
        __WEBPACK_IMPORTED_MODULE_3_mousetrap___default.a.unbind(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.values(keys));
    }

    /**
     * Render notebooks and tags view.
     */
    onRender() {
        const options = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.omit(this.options, 'notebooks', 'tags');

        // Start listening to keyboard events
        this.bindKeys();

        // Show notebooks
        this.showChildView('notebooks', new __WEBPACK_IMPORTED_MODULE_4__Notebooks__["a" /* default */](__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({
            collection: this.options.notebooks
        }, options)));

        // Show tags
        this.showChildView('tags', new __WEBPACK_IMPORTED_MODULE_5__Tags__["a" /* default */](__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({
            collection: this.options.tags
        }, options)));
    }

    /**
     * Bind keyboard shortcuts.
     */
    bindKeys() {
        __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.each(this.keybindings, name => {
            __WEBPACK_IMPORTED_MODULE_3_mousetrap___default.a.bind(this.options.configs[name], () => this[name]());
        });
    }

    /**
     * Open the currently active notebook/tag.
     */
    actionsOpen() {
        const $a = this.$('.list-group-item.active');
        this.navigateToLink($a);
    }

    /**
     * Find edit link of the currently active notebook/tag and navigate to it.
     */
    actionsEdit() {
        const $a = this.$('.list-group-item.active').parent().find('.edit-link:first');
        this.navigateToLink($a);
    }

    /**
     * Navigate to a link.
     *
     * @param {Object} $a - <a> jQuery object.
     */
    navigateToLink($a) {
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'navigate', { url: $a.attr('href') });
    }

    /**
     * Find remove link of the currently active notebook/tag and navigate to it.
     */
    actionsRemove() {
        const $a = this.$('.list-group-item.active').parent().find('.remove-link:first');
        $a.trigger('click');
    }

    /**
     * Trigger navigate:next event on the currently active region's view.
     */
    navigateBottom() {
        this.getChildView(this.activeRegion).trigger('navigate:next');
    }

    /**
     * Trigger navigate:previous event on the currently active region's view.
     */
    navigateTop() {
        this.getChildView(this.activeRegion).trigger('navigate:previous');
    }

    /**
     * Make tags region active.
     */
    switchToTags() {
        this.switchRegion('tags');
        this.navigateBottom();
    }

    /**
     * Make notebooks region active.
     */
    switchToNotebooks() {
        this.switchRegion('notebooks');
        this.navigateTop();
    }

    /**
     * Switch to another region.
     *
     * @param {String} name - region name
     */
    switchRegion(name) {
        this.activeRegion = name;
        this.getChildView(this.activeRegion).options.filterArgs = {};
    }

    serializeData() {
        return this.options;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Layout;


/***/ }),
/* 1301 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Notebook__ = __webpack_require__(1302);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__behaviors_Navigate__ = __webpack_require__(236);
/**
 * @module components/notebooks/list/views/Notebooks
 */






const log = __WEBPACK_IMPORTED_MODULE_2_debug___default()('lav:components/notebooks/list/views/Notebooks');

/**
 * Notebooks collection view.
 *
 * @class
 * @extends Marionette.CollectionView
 * @license MPL-2.0
 */
class Notebooks extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.CollectionView {

    get className() {
        return 'list--notebooks';
    }

    /**
     * Behaviors.
     *
     * @see module:behaviors/Navigate
     * @returns {Array}
     */
    behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_4__behaviors_Navigate__["a" /* default */]];
    }

    /**
     * Child view.
     *
     * @see module:components/notebooks/list/views/Notebook
     * @returns {Object}
     */
    childView() {
        return __WEBPACK_IMPORTED_MODULE_3__Notebook__["a" /* default */];
    }

    /**
     * Child view options.
     *
     * @returns {Object}
     */
    childViewOptions() {
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.omit(this.options, 'collection');
    }

    initialize() {
        log('init');
        this.options.filterArgs = {};
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Notebooks;


/***/ }),
/* 1302 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ItemView__ = __webpack_require__(421);
/**
 * @module components/notebooks/list/views/Notebook
 */



/**
 * Notebook list item view.
 *
 * @class
 * @extends module:components/notebooks/list/views/ItemView
 * @license MPL-2.0
 */
class Notebook extends __WEBPACK_IMPORTED_MODULE_1__ItemView__["a" /* default */] {

    get template() {
        const tmpl = __webpack_require__(1303);
        return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.template(tmpl);
    }

    modelEvents() {
        return {
            change: 'render'
        };
    }

    templateContext() {
        return {
            getPadding() {
                if (this.level === 1) {
                    return '';
                }

                return `padding-left:${this.level * 20}px`;
            }
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Notebook;


/***/ }),
/* 1303 */
/***/ (function(module, exports) {

module.exports = "<a class=\"list--item -notebook list-group-item\" href=\"#notes/f/notebook/q/{{id}}\" data-id=\"{{id}}\"\nstyle=\"{{getPadding()}}\">\n    <i class=\"icon-notebook\"></i>\n    {=_.cleanXSS(name)}\n</a>\n\n<div class=\"list--buttons btn-group dropdown\">\n    <button class=\"drop-edit btn btn-default btn-xs dropdown-toggle\" data-toggle=\"dropdown\">\n        <span class=\"caret\"></span>\n    </button>\n    <ul class=\"dropdown-menu pull-right\" role=\"menu\" aria-labelledby=\"dropdownMenu{{id}}\">\n        <li><a class=\"edit-link\" href=\"#notebooks/edit/{{id}}\">{{ _.i18n('Edit') }}</a></li>\n        <li><a class=\"remove-link\" href=\"#\">{{ _.i18n('Remove') }}</a></li>\n    </ul>\n</div>\n"

/***/ }),
/* 1304 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Tag__ = __webpack_require__(1305);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__behaviors_Navigate__ = __webpack_require__(236);
/**
 * @module components/notebooks/list/views/Tags
 */





/**
 * Tags collection view.
 *
 * @class
 * @extends Marionette.CollectionView
 * @license MPL-2.0
 */
class Tags extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.CollectionView {

    get className() {
        return 'list list--tags';
    }

    /**
     * Behaviors.
     *
     * @see module:behaviors/Navigate
     * @returns {Array}
     */
    behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_3__behaviors_Navigate__["a" /* default */]];
    }

    /**
     * Child view.
     *
     * @see module:components/notebooks/list/views/Tag
     * @returns {Object}
     */
    childView() {
        return __WEBPACK_IMPORTED_MODULE_1__Tag__["a" /* default */];
    }

    /**
     * Child view options.
     *
     * @returns {Object}
     */
    childViewOptions() {
        return __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.omit(this.options, 'collection');
    }

    initialize() {
        this.options.filterArgs = {};

        // Collection channel events
        this.listenTo(this.collection.channel, 'page:next', this.getNextPage);
    }

    /**
     * Show models from the next page.
     */
    getNextPage() {
        this.collection.pagination.current += 1;
        this.collection.getNextPage();
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Tags;


/***/ }),
/* 1305 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ItemView__ = __webpack_require__(421);
/**
 * @module components/notebooks/list/views/Tag
 */



/**
 * Tag list item view.
 *
 * @class
 * @extends module:components/notebooks/list/views/ItemView
 * @license MPL-2.0
 */
class Tag extends __WEBPACK_IMPORTED_MODULE_1__ItemView__["a" /* default */] {

  get template() {
    const tmpl = __webpack_require__(1306);
    return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.template(tmpl);
  }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Tag;


/***/ }),
/* 1306 */
/***/ (function(module, exports) {

module.exports = "<a class=\"list--item -tag list-group-item\" href=\"#notes/f/tag/q/{{name}}\" data-id=\"{{id}}\">\n    <i class=\"icon-tag\"></i>\n    {=_.cleanXSS(name)}\n</a>\n\n<div class=\"list--buttons btn-group dropdown\">\n    <button class=\"drop-edit btn btn-default btn-xs dropdown-toggle\" data-toggle=\"dropdown\">\n        <span class=\"caret\"></span>\n    </button>\n    <ul class=\"dropdown-menu pull-right\" role=\"menu\" aria-labelledby=\"dropdownMenu{{id}}\">\n        <li><a class=\"edit-link\" href=\"#tags/edit/{{id}}\">{{ _.i18n('Edit') }}</a></li>\n        <li><a class=\"remove-link\" href=\"#\">{{ _.i18n('Remove') }}</a></li>\n    </ul>\n</div>\n"

/***/ }),
/* 1307 */
/***/ (function(module, exports) {

module.exports = "<!-- Notebooks list -->\n<div id=\"notebooks\"></div>\n\n<header class=\"list--navbar navbar navbar-default navbar-static-top\">\n    <span class=\"navbar-brand list--brand\">{{ _.i18n('Tags') }}</span>\n    <ul class=\"nav navbar-nav navbar-right header--right list--nav\">\n        <li>\n            <span>\n            <a class=\"btn btn-success\" href=\"#tags/add\" title=\"{{ _.i18n('New tag') }}\">\n                <i class=\"icon-tag\"></i>\n            </a>\n            </span>\n        </li>\n    </ul>\n</header>\n<div id=\"tags\"></div>\n"

/***/ }),
/* 1308 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__View__ = __webpack_require__(1309);
/**
 * @module components/notebooks/form/notebook/Controller
 */






const log = __WEBPACK_IMPORTED_MODULE_2_debug___default()('lav:components/notebooks/form/notebook/Controller');

/**
 * Notebooks form controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Fetch data and show the notebook form.
     *
     * @returns {Promise}
     */
    init() {
        return this.fetch().then(results => this.show(results[0], results[1])).then(() => this.listenToEvents()).catch(err => log('error', err));
    }

    onDestroy() {
        log('destroy');
        this.fulfillPromise('resolve', { model: this.view.model });
        this.redirect();
    }

    /**
     * Fetch all notebooks and the notebook with the specified ID.
     *
     * @returns {Promise}
     */
    fetch() {
        log('options', this.options);
        return Promise.all([__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Notebooks', 'find', this.options), __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Notebooks', 'findModel', this.options)]);
    }

    /**
     * Render the form view in modal region.
     *
     * @param {Object} collection - notebooks collection
     * @param {Object} model - Notebook model
     */
    show(collection, model) {
        // Show only notebooks which are not related to the current model
        const notebooks = collection.clone();
        notebooks.reset(notebooks.rejectTree(model.id));

        this.view = new __WEBPACK_IMPORTED_MODULE_3__View__["a" /* default */]({
            notebooks,
            model,
            args: this.options
        });

        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'show', { region: 'modal', view: this.view });
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        // Destroy itself if the view is destroyed
        this.listenTo(this.view, 'destroy', this.destroy);

        // Save changes
        this.listenTo(this.view, 'save', this.save);
        this.listenTo(this.view, 'cancel', () => this.view.destroy());
    }

    /**
     * Create/save a notebook.
     *
     * @returns {Promise}
     */
    save() {
        const data = {
            name: this.view.ui.name.val().trim(),
            parentId: this.view.ui.parentId.val().trim()
        };

        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Notebooks', 'saveModel', {
            data,
            model: this.view.model
        }).then(() => this.onSave()).catch(err => this.onSaveError(err));
    }

    /**
     * A notebook was created/saved.
     */
    onSave() {
        log('saved');
        // Resolve the promise
        this.fulfillPromise('resolve', { model: this.view.model });

        // Destroy the view
        this.view.destroy();
    }

    /**
     * Saving the notebook was unsuccessful.
     *
     * @param {Object} error
     */
    onSaveError(error) {
        log('saveModel error', error);
        this.fulfillPromise('reject', { error });
    }

    /**
     * Check if the controller was instantiated with a promise.
     * If it was, fulfill the promise.
     *
     * @param {String} action - resolve or reject
     * @param {Object} data
     */
    fulfillPromise(action, data) {
        if (this.options.promise) {
            this.options.promise[action](data);
            this.options.promise = null;
        }
    }

    /**
     * Navigate to notebooks page.
     */
    redirect() {
        const hash = __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('utils/Url', 'getHash');

        // Redirect back only if it's notebooks page
        if (hash.search(/notebooks/) !== -1) {
            __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('utils/Url', 'navigate', {
                trigger: false,
                url: '/notebooks'
            });
        }
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 1309 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__behaviors_ModalForm__ = __webpack_require__(160);
/**
 * @module components/notebooks/form/notebook/View
 */




/**
 * Notebook form view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1310);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'modal fade';
    }

    ui() {
        return {
            name: 'input[name="name"]',
            parentId: 'select[name="parentId"]'
        };
    }

    /**
     * Behaviors.
     *
     * @see module:behavior/ModalForm
     * @returns {Array}
     */
    behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_2__behaviors_ModalForm__["a" /* default */]];
    }

    serializeData() {
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({}, this.model.attributes, {
            notebooks: this.options.notebooks.toJSON()
        });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1310 */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h3 class=\"modal-title\">\n                <% if (id) { %>\n                {{ _.i18n('notebooks.edit') }}\n                <% } else { %>\n                {{ _.i18n('notebooks.add') }}\n                <% } %>\n            </h3>\n        </div>\n\n        <div class=\"modal-body modal--body\">\n            <div class=\"container-fluid modal--container\">\n                <form action=\"#\" class=\"form-horizontal modal--form\" method=\"post\">\n                    <div class=\"form-group modal--group\">\n                        <input name=\"name\" class=\"form-control modal--input\"\n                            type=\"text\" value=\"{=_.cleanXSS(name)}\" placeholder=\"{{ _.i18n('Title') }}\" spellcheck=\"true\" />\n                    </div>\n\n                    <div class=\"form-group modal--group\">\n                        <select name=\"parentId\" class=\"form-control modal--input\">\n                            <option value=\"0\">{{ _.i18n('Parent') }}: {{ _.i18n('Root') }}</option>\n                            <% _.each(notebooks, function (notebook) { %>\n                            <option value=\"{{notebook.id}}\"{{_.selectOption(parentId, notebook.id) }}>\n                                {{ _.i18n('Parent') }}: {=_.cleanXSS(notebook.name)}\n                            </option>\n                            <% }); %>\n                        </select>\n                    </div>\n                </form>\n            </div>\n        </div>\n\n        <div class=\"modal-footer\">\n            <button class=\"btn btn-secondary cancelBtn\">\n                {{ _.i18n('Cancel') }}\n            </button>\n            <button class=\"btn btn-success ok\">\n                {{ _.i18n('Save') }}\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 1311 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__View__ = __webpack_require__(1312);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_debug__);
/**
 * @module components/notebooks/form/tag/Controller
 */






const log = __WEBPACK_IMPORTED_MODULE_3_debug___default()('lav:components/notebooks/form/tag/Controller');

/**
 * Tag form controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    onDestroy() {
        log('destroyed');
        this.redirect();
    }

    /**
     * Fetch data and render the view.
     *
     * @returns {Promise}
     */
    init() {
        return this.fetch().then(model => this.show(model)).then(() => this.listenToEvents()).catch(err => log('error', err));
    }

    /**
     * Fetch the tag model.
     *
     * @returns {Promise}
     */
    fetch() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Tags', 'findModel', this.options);
    }

    /**
     * Render the view.
     *
     * @param {Object} model
     */
    show(model) {
        this.view = new __WEBPACK_IMPORTED_MODULE_2__View__["a" /* default */]({ model });
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'show', { region: 'modal', view: this.view });
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        this.listenTo(this.view, 'destroy', this.destroy);
        this.listenTo(this.view, 'save', this.save);
        this.listenTo(this.view, 'cancel', this.cancel);
    }

    /**
     * Save changes.
     *
     * @returns {Promise}
     */
    save() {
        const data = {
            name: this.view.ui.name.val().trim().toLowerCase()
        };

        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('collections/Tags', 'saveModel', {
            data,
            model: this.view.model
        }).then(() => this.view.destroy()).catch(err => log('error', err));
    }

    /**
     * Destroy the view.
     */
    cancel() {
        this.view.destroy();
    }

    /**
     * Navigate to notebooks page.
     */
    redirect() {
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('utils/Url', 'navigate', {
            trigger: false,
            url: '/notebooks'
        });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 1312 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__behaviors_ModalForm__ = __webpack_require__(160);
/**
 * @module components/notebooks/form/tag/View
 */




/**
 * Tag form view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1313);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'modal fade';
    }

    ui() {
        return {
            name: 'input[name="name"]'
        };
    }

    /**
     * Behaviors.
     *
     * @see module:behavior/ModalForm
     * @returns {Array}
     */
    behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_2__behaviors_ModalForm__["a" /* default */]];
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1313 */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal-dialog\"><div class=\"modal-content\">\n    <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n        <h3 class=\"modal-title\">\n            <% if (id) { %>\n            {{ _.i18n('tags.edit') }}\n            <% } else { %>\n            {{ _.i18n('tags.add') }}\n            <% } %>\n        </h3>\n    </div>\n    <div class=\"modal-body modal--body\">\n        <div class=\"container-fluid modal--container\">\n            <form action=\"#\" class=\"form-horizontal modal--form\" method=\"POST\">\n                <div class=\"form-group modal--group\">\n                    <input name=\"name\" class=\"form-control modal--input\"\n                        type=\"text\" value=\"{=_.cleanXSS(name)}\" placeholder=\"{{ _.i18n('Title') }}\" spellcheck=\"true\" />\n                </div>\n            </form>\n        </div>\n    </div>\n    <div class=\"modal-footer\">\n        <button class=\"btn btn-secondary cancelBtn\" href=\"#\">{{ _.i18n('Cancel') }}</button>\n        <button class=\"btn btn-success ok\" href=\"#\">{{ _.i18n('Save') }}</button>\n    </div>\n</div></div>\n"

/***/ }),
/* 1314 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_debug__);
/**
 * @module components/notebooks/remove/Controller
 */




const log = __WEBPACK_IMPORTED_MODULE_2_debug___default()('lav:components/notebooks/remove/Controller');

/**
 * Controller that handles the removal of notebooks and tags.
 *
 * @class
 * @license MPL-2.0
 */
class Controller {

    /**
     * Radio channel (components/notebooks)
     *
     * @returns {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/notebooks');
    }

    /**
     * Custom confirmation dialog buttons for notebooks.
     *
     * @returns {Array}
     */
    get notebookButtons() {
        const btnNotes = 'notebooks.remove with notes';
        return [{ event: 'reject', name: 'Cancel' }, { event: 'confirmNotes', name: btnNotes, class: 'btn-danger' }, { event: 'confirm', name: 'notebooks.remove', class: 'btn-success' }];
    }

    constructor() {
        this.channel.reply('remove', this.remove, this);
    }

    /**
     * Remove a notebook/tag model.
     *
     * @param {Object} options
     * @param {Object} options.model - notebook/tag model
     * @returns {Promise}
     */
    async remove(options) {
        const { model } = options;
        const res = await this.showConfirm(model);
        this.requestRemove(model, res);
    }

    /**
     * Show a confirmation dialog asking if a user is sure
     * they want to remove a note.
     *
     * @param {Object} model
     * @returns {Promise}
     */
    showConfirm(model) {
        const data = {};
        data.content = __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.i18n(`${model.storeName}.confirm remove`, model.attributes);

        // Notebooks confirm dialog has custom buttons
        if (model.storeName === 'notebooks') {
            data.buttons = this.notebookButtons;
        }

        log('show confirm');
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('components/confirm', 'show', data);
    }

    /**
     * Make remove request.
     *
     * @param {Object} model
     * @param {String} res - confirmation dialog result
     * if res is equal to confirmNotes, it will remove attached notes too
     * @returns {Promise}
     */
    requestRemove(model, res) {
        if (res === 'reject') {
            return;
        }

        const channel = model.storeName === 'tags' ? 'Tags' : 'Notebooks';

        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request(`collections/${channel}`, 'remove', {
            model,
            removeNotes: res === 'confirmNotes'
        });
    }

}
/* unused harmony export default */


// Instantiate the controller immediately after the app starts
__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.once('App', 'start', () => new Controller());

/***/ }),
/* 1315 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__controller__ = __webpack_require__(1316);
/**
 * @module components/settings/Router
 */




/**
 * Settings router.
 *
 * @class
 * @extends Marionette.AppRouter
 * @license MPL-2.0
 */
class Router extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.AppRouter {

  /**
   * Controller.
   *
   * @see module:components/settings/controller
   * @prop {Object}
   */
  get controller() {
    return __WEBPACK_IMPORTED_MODULE_2__controller__["a" /* default */];
  }

  /**
   * appRoutes
   *
   * @prop {Object}
   */
  get appRoutes() {
    return {
      'settings(/:tab)': 'showContent'
    };
  }

}
/* unused harmony export default */


// Instantiate the router automatically
__WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.once('App', 'init', () => new Router());

/***/ }),
/* 1316 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sidebar_Controller__ = __webpack_require__(1317);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__show_Controller__ = __webpack_require__(1322);
/**
 * @module components/settings/controller
 * @license MPL-2.0
 */





const log = __WEBPACK_IMPORTED_MODULE_0_debug___default()('lav:components/notes/controller');

/* harmony default export */ __webpack_exports__["a"] = ({

    /**
     * Show settings sidebar.
     *
     * @param {Object} options
     */
    showSidebar(options) {
        // Instantiate the sidebar controller only once
        if (this.sidebar) {
            return;
        }

        this.sidebar = new __WEBPACK_IMPORTED_MODULE_2__sidebar_Controller__["a" /* default */](options);
        this.sidebar.init();
        this.sidebar.once('destroy', () => this.onDestroy());
    },

    /**
     * Show settings.
     */
    showContent(tab) {
        log('showSettings', { tab });
        this.showSidebar({ tab });

        this.content = new __WEBPACK_IMPORTED_MODULE_3__show_Controller__["a" /* default */]({ tab });
        this.content.init();
        this.content.once('destroy', () => this.onDestroy());
    },

    /**
     * Destroy the sidebar controller if settings controller is destroyed.
     */
    onDestroy() {
        const url = __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('utils/Url', 'getHash');

        // If a user is not on settings page anymore
        if (url.search('settings') === -1) {
            // Destroy the sidebar controller
            if (this.sidebar) {
                this.sidebar.destroy();
                this.sidebar = null;
            }

            // Destroy the content controller
            if (this.content) {
                this.content.destroy();
                this.content = null;
            }
        }
    }

});

/***/ }),
/* 1317 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__views_View__ = __webpack_require__(1318);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__views_Navbar__ = __webpack_require__(1320);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_debug__);
/**
 * @module components/settings/sidebar/Controller
 */






const log = __WEBPACK_IMPORTED_MODULE_4_debug___default()('lav:components/settings/sidebar/Controller');

/**
 * Settings sidebar controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Radio channel.
     *
     * @prop {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.channel('components/settings');
    }

    /**
     * Destroy the views.
     */
    onDestroy() {
        this.stopListening();

        if (!this.view._isDestroyed) {
            this.view.destroy();
        }

        this.navbar.destroy();
    }

    init() {
        this.options.tab = this.options.tab || 'general';
        this.show();
        this.listenToEvents();
    }

    /**
     * Show the sidebar and navbar.
     */
    show() {
        // Render the sidebar view
        this.view = new __WEBPACK_IMPORTED_MODULE_2__views_View__["a" /* default */](this.options);
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'show', {
            region: 'sidebar',
            view: this.view
        });

        // Render the navbar view
        this.navbar = new __WEBPACK_IMPORTED_MODULE_3__views_Navbar__["a" /* default */]();
        __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request('Layout', 'show', {
            region: 'sidebarNavbar',
            view: this.navbar
        });
        log('show view');
    }

    /**
     * Start listening to events.
     */
    listenToEvents() {
        this.listenTo(this.view, 'destroy', this.destroy);
        this.listenTo(this.channel, 'activate:tab', this.activateTab);
    }

    /**
     * Trigger activate:tab event to the view.
     *
     * @param {Object} data
     * @param {String} data.tab
     */
    activateTab(data) {
        this.view.activateTab(data);
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 1318 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__behaviors_Sidebar__ = __webpack_require__(237);
/**
 * @module components/settings/sidebar/View
 */






/**
 * Settings sidebar view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1319);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * Behaviors.
     *
     * @see module:behaviors/Sidebar
     * @returns {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_3__behaviors_Sidebar__["a" /* default */]];
    }

    events() {
        return {
            'click a': 'confirm'
        };
    }

    /**
     * After the view has rendered, activate a tab.
     */
    onRender() {
        this.activateTab(this.options);
    }

    /**
     * Activate a tab.
     *
     * @param {Object} data
     * @param {String} data.tab
     */
    activateTab(data) {
        this.$('.active').removeClass('active');
        this.$(`[href*=${data.tab}]`).addClass('active');
    }

    /**
     * Before navigating to another page, check if there are any unsaved changes.
     *
     * @param {Object} e
     */
    confirm(e) {
        e.preventDefault();

        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/settings', 'confirmNavigate', {
            url: this.$(e.currentTarget).attr('href')
        });
    }

    serializeData() {
        return this.options;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1319 */
/***/ (function(module, exports) {

module.exports = "<div class=\"layout--body --scroll\">\n    <div class=\"list-group list-notebooks list--settings\">\n        <a class=\"list-group-item list--settings\" href=\"#settings/general\">\n            <i class=\"icon-cog\"></i>\n            {{_.i18n('General')}}\n        </a>\n        <a class=\"list-group-item list--settings\" href=\"#settings/editor\">\n            <i class=\"icon-pencil\"></i>\n            {{_.i18n('Editor')}}\n        </a>\n        <a class=\"list-group-item list--settings\" href=\"#settings/keybindings\">\n            <i class=\"icon-indent\"></i>\n            {{_.i18n('Keybindings')}}\n        </a>\n        <a class=\"list-group-item list--settings\" href=\"#settings/encryption\">\n            <i class=\"icon-lock\"></i>\n            {{_.i18n('Encryption')}}\n        </a>\n        <a class=\"list-group-item list--settings\" href=\"#settings/sync\">\n            <i class=\"icon-arrows\"></i>\n            {{_.i18n('Sync')}}\n        </a>\n        <a class=\"list-group-item list--settings\" href=\"#settings/wipe\">\n            <i class=\"icon-bomb\"></i>\n            {{_.i18n('Wipe')}}\n        </a>\n\n        <li class=\"list-group-item list--settings -disabled\">{{_.i18n('Other')}}</li>\n        <a class=\"list-group-item list--settings\" href=\"#settings/importExport\">\n            <i class=\"icon-cog\"></i>\n            {{_.i18n('Backup')}}\n        </a>\n    </div>\n</div>\n"

/***/ }),
/* 1320 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/**
 * @module components/settings/sidebar/Navbar
 */



/**
 * Settings navbar view for the sidebar.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Navbar extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

  get template() {
    const tmpl = __webpack_require__(1321);
    return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
  }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Navbar;


/***/ }),
/* 1321 */
/***/ (function(module, exports) {

module.exports = "<nav class=\"header navbar navbar-default navbar-static-top header--settings -left\" id=\"sidebar--nav\">\n<div class=\"container-fluid\">\n    <ul class=\"nav navbar-nav navbar-left\">\n        <li>\n            <a href=\"#\" class=\"settings--close\">\n                <i class=\"icon-left-open-big\"></i>\n            </a>\n        </li>\n        <li>\n            <a href=\"#/settings/general\" class=\"btn-link header--title\">\n                {{_.i18n('Settings')}}\n            </a>\n        </li>\n    </ul>\n</div>\n</nav>\n"

/***/ }),
/* 1322 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__View__ = __webpack_require__(1323);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__general_View__ = __webpack_require__(1325);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__editor_View__ = __webpack_require__(1328);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__encryption_View__ = __webpack_require__(1330);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__keybindings_View__ = __webpack_require__(1336);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__sync_View__ = __webpack_require__(1338);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__importExport_View__ = __webpack_require__(1342);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__wipe_View__ = __webpack_require__(1344);
/**
 * @module components/settings/show/Controller
 */














const log = __WEBPACK_IMPORTED_MODULE_3_debug___default()('lav:components/settings/show/Controller');

/**
 * Settings content controller.
 *
 * @class
 * @extends Marionette.Object
 * @license MPL-2.0
 */
class Controller extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.Object {

    /**
     * Tab view classes.
     *
     * @prop {Object}
     */
    get views() {
        return {
            General: __WEBPACK_IMPORTED_MODULE_5__general_View__["a" /* default */],
            Editor: __WEBPACK_IMPORTED_MODULE_6__editor_View__["a" /* default */],
            Encryption: __WEBPACK_IMPORTED_MODULE_7__encryption_View__["a" /* default */],
            Keybindings: __WEBPACK_IMPORTED_MODULE_8__keybindings_View__["a" /* default */],
            Sync: __WEBPACK_IMPORTED_MODULE_9__sync_View__["a" /* default */],
            ImportExport: __WEBPACK_IMPORTED_MODULE_10__importExport_View__["a" /* default */],
            Wipe: __WEBPACK_IMPORTED_MODULE_11__wipe_View__["a" /* default */]
        };
    }

    /**
     * Radio channel.
     *
     * @prop {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('components/settings');
    }

    /**
     * Radio channel for configs collection.
     *
     * @prop {Object}
     */
    get configsChannel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('collections/Configs');
    }

    constructor(...args) {
        super(...args);

        /**
         * Used for saving new values for configs to save them later.
         *
         * @prop {Object}
         */
        this.changes = {};
    }

    onDestroy() {
        this.stopListening();
        this.channel.stopReplying();

        if (!this.view._isDestroyed) {
            this.view.destroy();
        }
    }

    /**
     * Init.
     *
     * @returns {Promise}
     */
    init() {
        this.options.tab = this.options.tab || 'general';

        return this.fetch().then(res => this.show(res)).then(() => this.listenToEvents()).catch(err => log('error', err));
    }

    /**
     * Fetch configs.
     *
     * @returns {Promise}
     */
    fetch() {
        return Promise.all([this.configsChannel.request('find'), __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Users', 'find')]);
    }

    /**
     * Show the layout view.
     *
     * @param {Array}
     */
    show(results) {
        const [collection, users] = results;
        const TabView = this.views[__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.capitalize(this.options.tab)];

        // Render the view
        this.view = new __WEBPACK_IMPORTED_MODULE_4__View__["a" /* default */](__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.extend({ collection, users, TabView }, this.options));
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'show', { region: 'content', view: this.view });

        // Activate a tab in the sidebar
        this.channel.trigger('activate:tab', this.options);
    }

    /**
     * Start listening to events and requests.
     */
    listenToEvents() {
        // Listen to view events
        this.listenTo(this.view, 'destroy', this.destroy);
        this.listenTo(this.view, 'save', this.save);
        this.listenTo(this.view, 'cancel', this.confirmNavigate);
        this.listenTo(this.view, 'close', this.confirmNavigate);
        // Listen to child view events
        this.listenTo(this.view.tabView, 'change:value', this.changeValue);

        // Reply to requests
        this.channel.reply({
            confirmNavigate: this.confirmNavigate
        }, this);
    }

    /**
     * Save new values of a config in "changes" property.
     *
     * @param {Object} data
     * @param {String} data.name
     * @param {String} data.value
     */
    changeValue(data) {
        this.changes[data.name] = data;
        log('new changes', this.changes);
    }

    /**
     * We should probably never need preRedirect
     */

    async redirect() {
        const preRedirect = false;
        await (preRedirect ? this.preRedirect() : Promise.resolve());
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'navigateBack');
        this.view.destroy();
    }

    /**
     * Save changes.
     *
     * @returns {Promise}
     */
    save() {
        if (!this.hasChanges()) {
            return Promise.resolve(this.view.triggerMethod('saved'));
        }

        return this.configsChannel.request('saveConfigs', {
            configs: this.changes
        }).then(() => this.view.triggerMethod('saved')).then(() => this.changes = []).catch(err => log('save error', err));
    }

    /**
     * Before navigating to another page, show a confirm message
     * if there are unsaved changes.
     *
     * @returns {Promise}
     */
    async confirmNavigate(...args) {
        // Don't show the confirmation dialog if there are no changes
        if (!this.hasChanges()) {
            return this.navigate(...args);
        }

        const res = await __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/confirm', 'show', {
            content: __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n('You have unsaved changes')
        });

        if (res === 'confirm') {
            return this.navigate(...args);
        }
    }

    /**
     * Check if there are any unsaved changes.
     *
     * @returns {Boolean} - returns true if there are some changes
     */
    hasChanges() {
        return !__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.isEmpty(this.changes);
    }

    /**
     * Navigate to a page.
     *
     * @param {Object} options={}
     * @param {String} options.url
     */
    navigate(options = {}) {
        const url = options.url || '/notes';
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('utils/Url', 'navigate', { url });

        // Reload the page to apply changes
        /**
         * This is annoying at best.  I think it might be actively breaking things on top of it.
         * I'm not actually sure if it's needed.
         */
        /*
        if (url.search('settings') === -1) {
            document.location.reload();
        }
        */
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Controller;


/***/ }),
/* 1323 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__behaviors_Content__ = __webpack_require__(238);
/**
 * @module components/settings/show/View
 */




/**
 * Settings layout view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1324);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * Behaviors.
     *
     * @see module:behaviors/Content
     * @returns {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_2__behaviors_Content__["a" /* default */]];
    }

    regions() {
        return {
            content: '.settings--content'
        };
    }

    ui() {
        return {
            save: '.settings--save'
        };
    }

    events() {
        return {
            'click @ui.save': 'save'
        };
    }

    triggers() {
        return {
            'click .settings--close': 'close'
        };
    }

    /**
     * Show a tab view.
     */
    onRender() {
        this.tabView = new this.options.TabView(this.options);
        this.showChildView('content', this.tabView);
    }

    /**
     * Trigger "save" event.
     *
     * @param {Object} e
     */
    save(e) {
        e.preventDefault();
        const view = this.getChildView('content');

        /*
         * If the password was autofilled by a user's browser, it usually
         * does not trigger `change` event. This will fix it.
         */
        if (view.ui && view.ui.password) {
            view.ui.password.trigger('change');
        }

        this.ui.save.attr('disabled', true);
        this.trigger('save');
    }

    /**
     * Remove "disabled" attribute from "save" button.
     */
    onSaved() {
        this.ui.save.removeAttr('disabled');
    }

    /**
     * Return options.
     *
     * @returns {Object}
     */
    serializeData() {
        return this.options;
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1324 */
/***/ (function(module, exports) {

module.exports = "<nav class=\"layout--navbar header navbar navbar-static-top -settings -right -tab-{{tab}}\">\n<div class=\"container-fluid\">\n    <div class=\"navbar-left header--left navbar-btn\">\n        <button title=\"{{_.i18n('Show sidebar')}}\" id=\"show--sidebar\" class=\"btn btn-default visible-xs\">\n            <span class=\"icon-left-open\"></span>\n        </button>\n    </div>\n\n    <div class=\"navbar-right header--right navbar-btn\">\n        <button type=\"button\" class=\"btn btn-default settings--close\">\n            {{ _.i18n('Close') }}\n        </button>\n        <button type=\"button\" class=\"btn btn-success settings--save\">\n            <i class=\"icon-save\"></i>\n            <span class=\"save-btn-text\">{{ _.i18n('Save') }}</span>\n        </button>\n    </div>\n</div>\n</nav>\n\n<div class=\"layout--body -scroll -settings\">\n    <div class=\"container-fluid -settings\">\n        <div class=\"settings--content form form-horizontal\"></div>\n    </div>\n</div>\n"

/***/ }),
/* 1325 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_i18next__ = __webpack_require__(141);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__locales_locales_json__ = __webpack_require__(295);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__locales_locales_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__locales_locales_json__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_themes_json__ = __webpack_require__(1326);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_themes_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__styles_themes_json__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Behavior__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_backbone_radio__);
/**
 * @module components/settings/show/general/View
 */








/**
 * General settings view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1327);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * Behaviors.
     *
     * @see module:components/settings/show/Behavior
     * @returns {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_5__Behavior__["a" /* default */]];
    }

    events() {
        return {
            'change @ui.theme': 'previewTheme'
        };
    }

    ui() {
        return {
            theme: '#theme'
        };
    }

    /**
     * Preview a theme.
     */
    previewTheme() {
        __WEBPACK_IMPORTED_MODULE_6_backbone_radio___default.a.trigger('components/settings', 'changeTheme', { name: this.ui.theme.val() });
    }

    /**
     * serializeData.
     *
     * @returns {Object}
     */
    serializeData() {
        const models = this.collection.getConfigs();

        return {
            locales: __WEBPACK_IMPORTED_MODULE_3__locales_locales_json___default.a,
            models,
            themes: __WEBPACK_IMPORTED_MODULE_4__styles_themes_json___default.a,
            appLang: models.appLang || __WEBPACK_IMPORTED_MODULE_2_i18next__["default"].language || 'en',
            theme: models.theme || 'default'
        };
    }

    /**
     * templateContext.
     *
     * @returns {Object}
     */
    templateContext() {
        return {

            /**
             * Selects a locale if it's active.
             *
             * @param {String} locale
             * @returns {String}
             */
            selectLocale(locale) {
                if (this.appLang === locale || this.appLang.search(locale) >= 0) {
                    return ' selected';
                }
            }

        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1326 */
/***/ (function(module, exports) {

module.exports = {"default":"Default theme","dark":"Dark"}

/***/ }),
/* 1327 */
/***/ (function(module, exports) {

module.exports = "<div class=\"form-group\">\n    <label class=\"col-sm-2 control-label\" for=\"appLang\">\n        <i class=\"fa fa-cloud\"></i> {{ _.i18n('Language') }}\n    </label>\n    <div class=\"col-sm-10\">\n        <select class=\"form-control\" name=\"appLang\" id=\"appLang\">\n        <% _.forEach(locales, function(val, locale) { %>\n        <option value=\"{{ locale }}\"{{ selectLocale(locale) }}>\n            {{ val.nativeName }}\n        </option>\n        <% }); %>\n        </select>\n    </div>\n</div>\n\n<div class=\"form-group\">\n    <label class=\"col-sm-2 control-label\" for=\"theme\">\n        <i class=\"fa fa-cloud\"></i> {{ _.i18n('Theme') }}\n    </label>\n    <div class=\"col-sm-10\">\n        <select class=\"form-control\" name=\"theme\" id=\"theme\">\n            <% _.forEach(themes, function(name, theme) { %>\n            <option value=\"{{theme}}\"{{ _.selectOption(models.theme, theme) }}>{{name}}</option>\n            <% }); %>\n        </select>\n    </div>\n</div>\n\n<div class=\"form-group\">\n    <label class=\"col-sm-2 control-label\" for=\"pagination\">{{ _.i18n('Notes per page') }}</label>\n    <div class=\"col-sm-10\">\n        <input type=\"number\" id=\"pagination\" name=\"pagination\" value=\"{{models.pagination}}\" class=\"form-control\" >\n    </div>\n</div>\n\n<div class=\"form-group\">\n    <label class=\"col-sm-2 control-label\" for=\"sortnotes\">{{ _.i18n('Sort notes') }}</label>\n    <div class=\"col-sm-10\">\n        <select id=\"sortnotes\" class=\"form-control\" name=\"sortnotes\" checked=\"{{models.sortnotes}}\">\n            <option value=\"created\">{{ _.i18n('Created date') }}</option>\n            <option value=\"updated\" {{_.selectOption(models.sortnotes, 'updated')}}>\n            {{ _.i18n('Updated date') }}\n            </option>\n            <option value=\"title\" {{_.selectOption(models.sortnotes, 'title')}}>\n            {{ _.i18n('Title') }}\n            </option>\n        </select>\n    </div>\n</div>\n\n<div class=\"form-group\">\n    <label class=\"col-sm-2 control-label\" for=\"sortnotebooks\">{{ _.i18n('Sort notebooks') }}</label>\n    <div class=\"col-sm-10\">\n        <select id=\"sortnotebooks\" class=\"form-control\" name=\"sortnotebooks\" checked=\"{{models.sortnotebooks}}\">\n            <option value=\"name\">{{ _.i18n('Name') }}</option>\n            <option value=\"created\" {{_.selectOption(models.sortnotebooks, 'created')}}>\n            {{ _.i18n('Created date') }}\n            </option>\n        </select>\n    </div>\n</div>\n\n<div class=\"form-group\">\n    <label class=\"col-sm-2 control-label\" for=\"navbarNotebooksMax\">{{ _.i18n('Notebooks in drawer') }}</label>\n    <div class=\"col-sm-10\">\n        <input type=\"number\" id=\"navbarNotebooksMax\" name=\"navbarNotebooksMax\" value=\"{{models.navbarNotebooksMax}}\" class=\"form-control\" >\n    </div>\n</div>\n"

/***/ }),
/* 1328 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Behavior__ = __webpack_require__(102);
/**
 * @module components/settings/show/editor/View
 */




/**
 * Editor settings view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1329);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * Behaviors.
     *
     * @see module:components/settings/show/Behavior
     * @returns {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_2__Behavior__["a" /* default */]];
    }

    ui() {
        return {
            indentUnit: '#indentUnit',
            indentWarning: '#indentUnit-low-warning'
        };
    }

    events() {
        return {
            'change @ui.indentUnit': 'checkIndentUnit'
        };
    }

    /**
     * Show indentation warning if its value is lower than 3.
     */
    checkIndentUnit() {
        const indent = Number(this.ui.indentUnit.val().trim());
        this.ui.indentWarning.toggleClass('hidden', indent >= 3);
    }

    serializeData() {
        return {
            models: this.collection.getConfigs()
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1329 */
/***/ (function(module, exports) {

module.exports = "<div class=\"form-group\">\n    <label class=\"col-sm-2 control-label\" for=\"editMode\">{{ _.i18n('Default edit mode') }}</label>\n    <div class=\"col-sm-10\">\n        <select id=\"editMode\" class=\"form-control\" name=\"editMode\" checked=\"{{models.editMode}}\">\n            <option value=\"normal\">{{ _.i18n('Normal') }}</option>\n            <option value=\"fullscreen\" {{_.selectOption(models.editMode, 'fullscreen')}}>{{ _.i18n('Fullscreen') }}</option>\n            <option value=\"preview\" {{_.selectOption(models.editMode, 'preview')}}>{{ _.i18n('Fullscreen with preview') }}</option>\n        </select>\n    </div>\n</div>\n\n<div class=\"form-group\">\n    <label class=\"col-sm-2 control-label\" for=\"indentUnit\">{{ _.i18n('Spaces per indent') }}</label>\n    <div class=\"col-sm-10\">\n        <input type=\"number\" id=\"indentUnit\" name=\"indentUnit\" value=\"{{models.indentUnit}}\" class=\"form-control\" >\n        <div id=\"indentUnit-low-warning\" class=\"text-warning <%if(models.indentUnit >= 3){%>hidden<%}%>\">\n            {{ _.i18n('Recommended 3 or more, for indenting numbered lists') }}\n        </div>\n    </div>\n</div>\n\n<div class=\"form-group\">\n    <label class=\"col-sm-2 control-label\" for=\"textEditor\">{{ _.i18n('Text editor') }}</label>\n    <div class=\"col-sm-10\">\n\t\t<!-- TODO Change editMode in Zeile drunter-->\n\t\t<!-- TODO Add translation-->\n        <select id=\"textEditor\" class=\"form-control\" name=\"textEditor\" checked=\"{{models.textEditor}}\">\n            <option value=\"default\">{{ _.i18n('Default') }}</option>\n            <option value=\"vim\" {{_.selectOption(models.textEditor, 'vim')}}>{{ _.i18n('Vim') }}</option>\n\t\t\t<option value=\"emacs\" {{_.selectOption(models.textEditor, 'emacs')}}>{{ _.i18n('Emacs') }}</option>\n\t\t\t<option value=\"sublime\" {{_.selectOption(models.textEditor, 'sublime')}}>{{ _.i18n('Sublime') }}</option>\n        </select>\n    </div>\n</div>\n"

/***/ }),
/* 1330 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_openpgp__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_openpgp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_openpgp__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Behavior__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Key__ = __webpack_require__(1331);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Passphrase__ = __webpack_require__(1333);
/**
 * @module components/settings/show/encryption/View
 */









/**
 * Encryption settings view.
 *
 * @todo implement encryption settings
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1335);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * Behaviors.
     *
     * @see module:components/settings/show/Behavior
     * @returns {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_4__Behavior__["a" /* default */]];
    }

    ui() {
        return {
            useEncrypt: '#useEncryption'
        };
    }

    events() {
        return {
            'click #btn--privateKey': 'showPrivateKey',
            'click #btn--passphrase': 'showPasswordView',
            'change @ui.useEncrypt': 'useEncryption'
        };
    }

    collectionEvents() {
        return {
            change: 'render'
        };
    }

    initialize() {
        this.user = __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'getUser');
    }

    /**
     * Show a user's personal key information.
     */
    showPrivateKey() {
        this.showKey(this.privateKey, true);
    }

    /**
     * Show a key information.
     *
     * @param {Object} key
     * @param {Boolean} isPrivate - true if it's a user's personal key
     */
    showKey(key, isPrivate) {
        const view = new __WEBPACK_IMPORTED_MODULE_5__Key__["a" /* default */]({ key, isPrivate });
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'show', { view, region: 'modal' });
    }

    /**
     * Show the password view where one can change their passphrase.
     */
    showPasswordView() {
        const view = new __WEBPACK_IMPORTED_MODULE_6__Passphrase__["a" /* default */]({ model: this.user });
        __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('Layout', 'show', { view, region: 'modal' });
    }

    /**
     * Ask a user if they are sure they want to disable encryption.
     */
    async useEncryption() {
        // Don't show the confirmation dialog if a user is enabling encryption
        if (this.ui.useEncrypt.is(':checked')) {
            return true;
        }

        const answer = await __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/confirm', 'show', {
            content: __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n('Are you sure you want to disable encryption?')
        });

        if (answer === 'reject') {
            this.ui.useEncrypt.prop('checked', true);
        }
    }

    /**
     * serializeData.
     *
     * @returns {Object}
     */
    serializeData() {
        const models = this.collection.getConfigs();
        const privateKey = __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/Encryption', 'getUserKeys').privateKey;
        return { models, privateKey };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1331 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/**
 * @module components/settings/show/encryption/Key
 */




/**
 * Show private/public key information.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Key extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1332);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'modal fade';
    }

    ui() {
        return {
            text: 'textarea'
        };
    }

    events() {
        return {
            'focus @ui.text': 'selectAll',
            'click .btn--cancel': 'destroy',
            'click .btn--close': 'close'
        };
    }

    /**
     * Select everything in the textarea.
     */
    selectAll() {
        this.ui.text.select();
    }

    serializeData() {
        // console.log("this.options");
        // console.log(this.options);
        return this.options;
    }

    initialize() {
        this.user = __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'getUser');
        this.key = __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/Encryption', 'getUserKeys').privateKey;

        // console.log('this.key:');
        // console.log(this.key);
    }

    templateContext() {
        return {
            key: this.key,
            /**
             * Show armored key.
             *
             * @returns {String}
             */
            getArmor() {
                const key = this.key.isPrivate() ? this.key.toPublic() : this.key;
                return key.armor();
            },

            /**
             * Return key fingerprint.
             *
             * @returns {String}
             */
            getFingerprint() {
                return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.splitBy4(this.key.getFingerprint());
            },

            /**
             * Return algorithm type (RSA)
             *
             * @returns {String}
             */
            getType() {
                return this.key.primaryKey.algorithm.split('_')[0];
            }
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Key;


/***/ }),
/* 1332 */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal-dialog modal-mini\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h3 class=\"modal-title\">{{ _.i18n('Key') }}</h3>\n        </div>\n        <div class=\"modal-body\">\n            <div class=\"row\">\n                <div class=\"col-md-4\">\n                    Avatar @todo\n                </div>\n                <div class=\"col-md-8\">\n                    <table class=\"table table-condensed\">\n                        <tr>\n                            <td>{{_.i18n('User ID')}}</td>\n                            <td>{{key.users[0].userId.userid}}</td>\n                        </tr>\n                        <tr>\n                            <td>{{_.i18n('Key ID')}}</td>\n                            <td>{{key.primaryKey.getKeyId().toHex()}}</td>\n                        </tr>\n                        <tr>\n                            <td>{{_.i18n('Fingerprint')}}</td>\n                            <td>{{getFingerprint()}}</td>\n                        </tr>\n                        <tr>\n                            <td>{{_.i18n('Type')}}</td>\n                            <td>{{getType()}}</td>\n                        </tr>\n                        <tr>\n                            <td>{{_.i18n('Created')}}</td>\n                            <td>{{key.primaryKey.created.toLocaleDateString()}}</td>\n                        </tr>\n                        <tr>\n                            <td>{{_.i18n('Expires')}}</td>\n                            <td>\n                                <% if (key.primaryKey.expirationTimeV3 === 0) { %>\n                                {{_.i18n('Never')}}\n                                <% } %>\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n\n            <div>\n                <h4>{{_.i18n('Public key')}}:</h4>\n                <textarea class=\"form-control\" readonly=\"true\" rows=\"8\">{{getArmor()}}</textarea>\n            </div>\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-default btn--close\">\n                {{ _.i18n('Close') }}\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 1333 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_debug__);
/**
 * @module components/settings/show/encryption/Passphrase
 */





const log = __WEBPACK_IMPORTED_MODULE_3_debug___default()('lav:components/settings/show/encryption/Passphrase');

/**
 * Change passphrase of the private key.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Passphrase extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1334);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    get className() {
        return 'modal fade';
    }

    ui() {
        return {
            oldPassphrase: '#oldPassphrase',
            newPassphrase: '#newPassphrase',
            newPassphraseRe: '#newPassphraseRe',
            helpError: '.help--error'
        };
    }

    events() {
        return {
            'click .btn--cancel': 'destroy',
            'click .btn--close': 'close',
            'click .btn--save': 'save',
            'keyup input': 'saveOnEnter'
        };
    }

    /**
     * Save the passphrase if a user presses "enter".
     *
     * @param {Object} e
     */
    saveOnEnter(e) {
        if (e.which === 13) {
            return this.save();
        }
    }

    /**
     * Change the passphrase and save updated private key.
     *
     * @returns {Promise}
     */
    save() {
        if (this.ui.newPassphrase.val() !== this.ui.newPassphraseRe.val()) {
            return this.onChangeError('Passwords do not match');
        }

        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'changePassphrase', {
            model: this.model,
            oldPassphrase: this.ui.oldPassphrase.val().trim(),
            newPassphrase: this.ui.newPassphrase.val().trim()
        }).then(() => document.location.reload()).catch(err => this.onChangeError(err));
    }

    /**
     * Changing the passphrase failed.
     */
    onChangeError(err) {
        log('error', err);
        if (typeof err === 'string') {
            this.ui.helpError.text(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n(err));
        }
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Passphrase;


/***/ }),
/* 1334 */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal-dialog modal-mini\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h3 class=\"modal-title\">{{ _.i18n('Change passphrase') }}</h3>\n        </div>\n        <div class=\"modal-body\">\n            <div class=\"form-group\">\n                <input id=\"oldPassphrase\" name=\"oldPassphrase\" placeholder=\"{{_.i18n('Old passphrase')}}\" class=\"form-control\" type=\"password\" />\n            </div>\n            <div class=\"form-group\">\n                <input id=\"newPassphrase\" name=\"newPassphrase\" placeholder=\"{{_.i18n('New passphrase')}}\" class=\"form-control\" type=\"password\" />\n            </div>\n            <div class=\"form-group\">\n                <input id=\"newPassphraseRe\" name=\"newPassphraseRe\" placeholder=\"{{_.i18n('Re-enter passphrase')}}\" class=\"form-control\" type=\"password\" />\n            </div>\n            <div class=\"form-group\">\n                <p class=\"help-block\">\n                    <p>{{_.i18n('Choose a strong and hard to guess passphrase')}}.</p>\n                    <p><b>{{_.i18n('Please make sure you remember the passphrase you have set')}}. If you forget the passphrase, it will be impossible to recover your data.</b></p>\n                    <p class=\"text-danger help--error\"></p>\n                </p>\n            </div>\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-default btn--cancel\">\n                {{ _.i18n('Close') }}\n            </button>\n            <button type=\"button\" class=\"btn btn-success btn--save\">\n                {{ _.i18n('Save') }}\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 1335 */
/***/ (function(module, exports) {

module.exports = "<div class=\"form-group\">\n    <div class=\"col-sm-12 checkbox\">\n         <label class=\"control-label\">\n             <input id=\"useEncryption\" type=\"checkbox\" name=\"encrypt\" <% if(Number(models.encrypt) === 1) { %> checked<% } %> >\n             {{ _.i18n('Use encryption') }}\n         </label>\n    </div>\n</div>\n\n<% if (privateKey) { %>\n<div class=\"center-block\">\n    <header>\n        <h3>{{_.i18n('Your key')}}</h3>\n    </header>\n\n    <button id=\"btn--privateKey\" type=\"button\" class=\"btn btn-default btn-block\">\n        <i class=\"icon-lock\"></i>\n        {{privateKey.users[0].userId.userid}}\n    </button>\n    <button id=\"btn--passphrase\" type=\"button\" class=\"btn btn-default btn-block\">\n        <i class=\"icon-pencil\"></i>\n        {{_.i18n('Change passphrase')}}\n    </button>\n</div>\n<% } %>\n"

/***/ }),
/* 1336 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Behavior__ = __webpack_require__(102);
/**
 * @module components/settings/show/keybindings/View
 */




/**
 * Keybindings settings view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1337);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * Behaviors.
     *
     * @see module:components/settings/show/Behavior
     * @returns {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_2__Behavior__["a" /* default */]];
    }

    serializeData() {
        return this.options;
    }

    templateContext() {
        return {
            /**
             * Return an array of models filtered by their names.
             *
             * @param {String} str
             * @returns {Array}
             */
            filter(str) {
                return this.collection.filterByName(str);
            },

            /**
             * Application wide shortcuts.
             *
             * @returns {Array}
             */
            appShortcuts() {
                return this.collection.appShortcuts();
            }
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1337 */
/***/ (function(module, exports) {

module.exports = "<fieldset>\n    <legend>{{ _.i18n('Navigation') }}</legend>\n    <% _.forEach(filter('navigate'), function (model) { %>\n    <div class=\"form-group\">\n        <label class=\"col-sm-2 control-label\" for=\"{{ model.get('name') }}\">{{ _.i18n(model.get('name')) }}</label>\n        <div class=\"col-sm-10\">\n            <input id=\"{{ model.get('name') }}\" class=\"form-control\" type=\"text\" value=\"{{ model.get('value') }}\" name=\"{{ model.get('name') }}\"/>\n        </div>\n    </div>\n    <% }); %>\n</fieldset>\n<fieldset>\n    <legend>{{ _.i18n('Jump') }}</legend>\n    <% _.forEach(filter('jump'), function (model) { %>\n    <div class=\"form-group\">\n        <label class=\"col-sm-2 control-label\" for=\"{{ model.get('name') }}\">{{ _.i18n(model.get('name')) }}</label>\n        <div class=\"col-sm-10\">\n            <input id=\"{{ model.get('name') }}\" class=\"form-control\" type=\"text\" value=\"{{ model.get('value') }}\" name=\"{{ model.get('name') }}\"/>\n        </div>\n    </div>\n    <% }); %>\n</fieldset>\n<fieldset>\n    <legend>{{ _.i18n('Actions') }}</legend>\n    <% _.forEach(filter('actions'), function (model) { %>\n    <div class=\"form-group\">\n        <label class=\"col-sm-2 control-label\" for=\"{{ model.get('name') }}\">{{ _.i18n(model.get('name')) }}</label>\n        <div class=\"col-sm-10\">\n            <input id=\"{{ model.get('name') }}\" class=\"form-control\" type=\"text\" value=\"{{ model.get('value') }}\" name=\"{{ model.get('name') }}\"/>\n        </div>\n    </div>\n    <% }); %>\n</fieldset>\n<fieldset>\n    <legend>{{ _.i18n('App') }}</legend>\n    <% _.forEach(appShortcuts(), function (model) { %>\n    <div class=\"form-group\">\n        <label class=\"col-sm-2 control-label\" for=\"{{ model.get('name') }}\">{{ _.i18n(model.get('name')) }}</label>\n        <div class=\"col-sm-10\">\n            <input id=\"{{ model.get('name') }}\" class=\"form-control\" type=\"text\" value=\"{{ model.get('value') }}\" name=\"{{ model.get('name') }}\"/>\n        </div>\n    </div>\n    <% }); %>\n</fieldset>\n"

/***/ }),
/* 1338 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Behavior__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Users__ = __webpack_require__(1339);
/**
 * @module components/settings/show/sync/View
 */




// import constants from '../../../../constants';


/**
 * Sync settings view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1341);
        return __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.template(tmpl);
    }

    /**
     * Behaviors.
     *
     * @see module:components/settings/show/Behavior
     * @returns {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_3__Behavior__["a" /* default */]];
    }

    regions() {
        return {
            content: '#sync--content'
        };
    }

    ui() {
        return {
            sync: '[name=cloudStorage]'
        };
    }

    events() {
        return {
            'change @ui.sync': 'showSyncView'
        };
    }

    onRender() {
        this.showSyncView();
    }

    /**
     * Show a sync adapter view.
     */
    showSyncView() {
        const sync = this.ui.sync.val().trim();

        if (sync === 'p2p') {
            return this.showUsers();
        }

        this.showSync(sync);
    }

    /**
     * Show a list of users whom you trust.
     */
    showUsers() {
        this.showChildView('content', new __WEBPACK_IMPORTED_MODULE_4__Users__["a" /* default */]({
            collection: this.options.users
        }));
    }

    /**
     * Request the settings view from the sync adapter.
     *
     * @param {String} name
     */
    showSync(name) {
        const ViewS = __WEBPACK_IMPORTED_MODULE_1_backbone_radio___default.a.request(`components/${name}`, 'getSettingsView');

        // If the adapter doesn't have the settings view, just empty the region
        if (!ViewS) {
            return this.getRegion('content').empty();
        }

        this.showChildView('content', new ViewS({ collection: this.collection }));
    }

    serializeData() {
        return {
            models: this.collection.getConfigs()
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1339 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_marionette__);
/**
 * @module components/settings/show/sync/Users
 */




/**
 * Show a list of users whom you trust or invited.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class Users extends __WEBPACK_IMPORTED_MODULE_2_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1340);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    collectionEvents() {
        return {
            'add change update': 'render'
        };
    }

    events() {
        return {
            'click .sync--invite--reject': 'rejectInvite',
            'click .sync--invite--accept': 'acceptInvite',
            'click .sync--trust--remove': 'removeFromTrust'
        };
    }

    /**
     * Show a confirmation dialog before accepting/rejecting an invite.
     *
     * @param {Object} e
     * @param {String} content
     * @returns {Promise}
     */
    async showConfirm(e, content) {
        const username = this.$(e.currentTarget).attr('data-user');
        const model = this.collection.get(username);

        const res = await __WEBPACK_IMPORTED_MODULE_0_backbone_radio___default.a.request('components/confirm', 'show', {
            content: __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n(content, model.getData())
        });
        return [res, model];
    }

    /**
     * Reject an invite.
     *
     * @param {Object} e
     * @returns {Promise}
     */
    async rejectInvite(e) {
        const msg = 'Confirm you want to reject the invite';
        const [res, model] = await this.showConfirm(e, msg);
        if (res === 'confirm') {
            return model.channel.request('rejectInvite', { model });
        }
    }

    /**
     * Accept an invite.
     *
     * @param {Object} e
     * @returns {Promise}
     */
    async acceptInvite(e) {
        const msg = 'Confirm you want to add the user to trust';
        const [res, model] = await this.showConfirm(e, msg);
        if (res === 'confirm') {
            return model.channel.request('acceptInvite', { model });
        }
    }

    /**
     * Remove a user from trust.
     *
     * @param {Object} e
     * @returns {Promise}
     */
    async removeFromTrust(e) {
        e.preventDefault();
        const msg = 'Confirm you want to remove the user from trust';
        const [res, model] = await this.showConfirm(e, msg);
        if (res === 'confirm') {
            return model.channel.request('remove', { model });
        }
    }

    serializeData() {
        return {
            pendingUsers: this.collection.getPending(),
            trustedUsers: this.collection.getTrusted()
        };
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = Users;


/***/ }),
/* 1340 */
/***/ (function(module, exports) {

module.exports = "<% if (pendingUsers.length) { %>\n<div class=\"form-group\">\n    <h3>{{_.i18n('Pending invites')}}</h3>\n\n    <div class=\"list-group\">\n        <% _.each(pendingUsers, function(pendingUser) { %>\n        <div class=\"list-group-item\">\n            <h4>{{pendingUser.get('username')}}</h4>\n            <p>{{_.i18n('Key fingerprint')}}: <mark>{{_.splitBy4(pendingUser.get('fingerprint'))}}</mark></p>\n            <p class=\"text-center\">\n                <button class=\"btn btn-warning sync--invite--reject\" data-user=\"{{pendingUser.get('username')}}\">\n                    {{_.i18n('Reject')}}\n                </button>\n                <button class=\"btn btn-success sync--invite--accept\" data-user=\"{{pendingUser.get('username')}}\">\n                    {{_.i18n('Accept')}}\n                </button>\n            </p>\n        </div>\n        <% }) %>\n    </div>\n</div>\n<% } %>\n\n<% if (trustedUsers.length) { %>\n<div class=\"form-group\">\n    <h3>{{_.i18n('Users you trust')}}</h3>\n\n    <div class=\"list-group\">\n        <% _.each(trustedUsers, function(trustedUser) { %>\n        <div class=\"list-group-item\">\n            <div class=\"pull-right dropdown\">\n                <button class=\"btn btn-sm btn-default\" data-toggle=\"dropdown\">\n                    <span class=\"caret\"></span>\n                </button>\n                <ul class=\"dropdown-menu\">\n                    <li><a href=\"#\">{{_.i18n('Shared with') + ' ' + trustedUser.get('username')}}</a></li>\n                    <li><a href=\"#\">{{_.i18n('Shared by') + ' ' + trustedUser.get('username')}}</a></li>\n                    <li><a class=\"sync--trust--remove\" href=\"#\" data-user=\"{{trustedUser.get('username')}}\">{{_.i18n('Remove from trust')}}</a></li>\n                </ul>\n            </div>\n            <div>\n                <h4>\n                    {{trustedUser.get('username')}}\n                    <% if (trustedUser.get('pendingInvite')) { %>\n                    <small>{{_.i18n('pending approval')}}</small>\n                    <% } %>\n                </h4>\n                <p>{{_.i18n('Key fingerprint')}}: <mark>{{_.splitBy4(trustedUser.get('fingerprint'))}}</mark></p>\n            </div>\n        </div>\n        <% }) %>\n    </div>\n</div>\n<% } %>\n"

/***/ }),
/* 1341 */
/***/ (function(module, exports) {

module.exports = "<div class=\"form-group\">\n    <h3>{{_.i18n('Synchronization method')}}</h3>\n    <select class=\"form-control col-xs-12\" name=\"cloudStorage\">\n        <!-- <option {{_.selectOption(models.cloudStorage, 'p2p')}}value=\"p2p\">Peer to peer</option> -->\n        <option {{_.selectOption(models.cloudStorage, 'p2p')}}value=\"p2p\">None</option>\n        <option {{_.selectOption(models.cloudStorage, 'dropbox')}}value=\"dropbox\">Dropbox</option>\n        <option {{_.selectOption(models.cloudStorage, 'remotestorage')}}value=\"remotestorage\">RemoteStorage</option>\n    </select>\n</div>\n\n<div id=\"sync--content\"></div>\n"

/***/ }),
/* 1342 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/**
 * @module components/settings/show/importExport/View
 */




/**
 * Import/export settings view.
 *
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1343);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * ImportExport component Radio channel.
     *
     * @prop {Object}
     */
    get channel() {
        return __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.channel('components/importExport');
    }

    events() {
        return {
            'click .btn--import': 'triggerClick',
            'change #import--data': 'importData',
            'change #import--evernote': 'importEvernote',
            'click #export--data': 'exportData',
            'click #export--key': 'exportKey'
        };
    }

    /**
     * Emulate click on the file button to show file chooser.
     *
     * @param {Object} e
     */
    triggerClick(e) {
        e.preventDefault();
        const input = this.$(e.currentTarget).attr('data-file');
        this.$(input).click();
    }

    /**
     * Recover from a backup.
     */
    importData(e) {
        const { files } = e.target;
        if (!files.length) {
            return;
        }

        this.channel.request('import', { files });
    }

    /**
     * Import notes from Evernote backup.
     */
    importEvernote(e) {
        const { files } = e.target;
        this.channel.request('importEvernote', { files });
    }

    /**
     * Export everything from Encryptic.
     */
    exportData() {
        this.channel.request('export');
    }

    /**
     * Export OpenPGP private key.
     */
    exportKey() {
        this.channel.request('export', { exportKey: true });
    }

}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1343 */
/***/ (function(module, exports) {

module.exports = "<fieldset>\n    <legend>{{_.i18n('Backup your private key')}}</legend>\n    <div class=\"form-group container-fluid\">\n        <button id=\"export--key\" type=\"button\" class=\"btn btn-default btn-block\">\n            <i class=\"icon-cog\"></i> {{ _.i18n('Backup') }}\n        </button>\n    </div>\n</fieldset>\n<br/>\n\n<fieldset>\n    <legend>{{_.i18n('Backup everything')}}</legend>\n    <div class=\"form-group container-fluid\">\n        <input accept=\".zip\" id=\"import--data\" class=\"hide\" type=\"file\">\n        <button data-file=\"#import--data\" type=\"button\" class=\"btn btn-default btn-block btn--import\">\n            <i class=\"icon-note\"></i> {{ _.i18n('Recover from backup') }}\n        </button>\n        <button id=\"export--data\" type=\"button\" class=\"btn btn-default btn-block\">\n            <i class=\"icon-note\"></i> {{ _.i18n('Backup everything') }}\n        </button>\n    </div>\n</fieldset>\n<br/>\n\n<fieldset>\n    <legend>{{_.i18n('Import from other services')}}</legend>\n    <div class=\"form-group container-fluid\">\n        <input accept=\".enex\" id=\"import--evernote\" class=\"hide\" type=\"file\">\n        <button data-file=\"#import--evernote\" type=\"button\" class=\"btn btn-default btn-block btn--import\">\n            <i class=\"icon-note\"></i> {{ _.i18n(\"Import from Evernote's backup\") }}\n        </button>\n    </div>\n</fieldset>\n"

/***/ }),
/* 1344 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone_marionette__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone_radio__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Behavior__ = __webpack_require__(102);
/**
 * @module components/settings/show/encryption/View
 */






/**
 * Encryption settings view.
 *
 * @todo implement encryption settings
 * @class
 * @extends Marionette.View
 * @license MPL-2.0
 */
class View extends __WEBPACK_IMPORTED_MODULE_0_backbone_marionette___default.a.View {

    get template() {
        const tmpl = __webpack_require__(1345);
        return __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.template(tmpl);
    }

    /**
     * Behaviors.
     *
     * @see module:components/settings/show/Behavior
     * @returns {Array}
     */
    get behaviors() {
        return [__WEBPACK_IMPORTED_MODULE_3__Behavior__["a" /* default */]];
    }

    ui() {
        return {
            doWipe: '#doWipe'
        };
    }

    events() {
        return {
            'click #btn--wipe': 'doWipeAllData'
        };
    }

    collectionEvents() {
        return {
            change: 'render'
        };
    }

    initialize() {
        this.user = __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'getUser');
    }

    /**
     * Ask a user if they are sure they want to disable encryption.
     */
    async doWipeAllData() {
        // Don't show the confirmation dialog if a user is enabling encryption
        const answer = await __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('components/confirm', 'show', {
            content: __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.i18n('Remove ALL of this user\'s data from this device and return to login screen?')
        });

        if (answer === 'reject') {
            // noop
            Function.prototype();
        } else {
            // nuke data here
            console.log('doWipeAllData() confirmed...');
            window.location.replace('/');
            __WEBPACK_IMPORTED_MODULE_2_backbone_radio___default.a.request('collections/Profiles', 'destroyProfile', this.user.id);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = View;


/***/ }),
/* 1345 */
/***/ (function(module, exports) {

module.exports = "<div class=\"center-block\">\n    <header>\n        <h3>{{_.i18n('Erasure options')}}</h3>\n    </header>\n\n    <button id=\"btn--wipe\" type=\"button\" class=\"btn btn-default btn-block\">\n        <i class=\"icon-lock\"></i>\n        {{_.i18n('Erase user profile on this computer')}}\n    </button>\n</div>\n\n"

/***/ })
]),[444]);
//# sourceMappingURL=main.js.map